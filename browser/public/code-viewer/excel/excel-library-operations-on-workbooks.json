{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/operations-on-workbooks/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { Workbook } from 'igniteui-react-excel';\nimport { WorkbookFormat } from 'igniteui-react-excel';\nimport { WorksheetRegion } from 'igniteui-react-excel';\nimport { ExcelUtility } from './ExcelUtility';\n\nIgrDataGridModule.register();\n\nexport default class ExcelLibraryUsingWorkbooks extends React.Component<any, any> {\n\n    public grid: IgrDataGrid;\n\n    public employeeData: any[];\n    public expenseData: any[];\n    public incomeData: any[];\n\n    public companies: string[];\n    public firstNames: string[];\n    public lastNames: string[];\n    public countries: string[];\n    public titles: string[];\n    public employeeColumns: string[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.onGridRef = this.onGridRef.bind(this);\n        this.createWorkbook = this.createWorkbook.bind(this);\n        this.saveWorkbook = this.saveWorkbook.bind(this);\n        this.switchDataSource = this.switchDataSource.bind(this);\n\n        this.companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\"];\n        this.firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\"];\n        this.lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\"];\n        this.countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\"];\n        this.titles = [\"Sales Rep.\", \"Engineer\", \"Administrator\", \"Manager\"];\n        this.employeeColumns = [\"Name\", \"Company\", \"Title\", \"Age\", \"Country\", \"Salary\"];\n\n        this.initData();\n\n        this.state = {\n            selected: \"Employees - Table1\"\n        } as any;\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <div className=\"options horizontal\">\n                    <button className=\"options-button\" onClick={this.createWorkbook}>Create Workbook</button>\n                    <button className=\"options-button\" onClick={this.saveWorkbook}>Save Workbook</button>\n                    <label className=\"options-label\">Select Table to Export: </label>\n                    <select onChange={this.onTableChange} value={(this.state as any).selected}>\n                        <option>Employees - Table1</option>\n                        <option>Expenses - Table2</option>\n                        <option>Income - Table3</option>\n                    </select>\n                </div>\n                <div className=\"container\">\n                    <IgrDataGrid\n                        ref = {this.onGridRef}\n                        height=\"100%\"\n                        width=\"100%\"\n                        dataSource={this.employeeData} />\n                </div>\n            </div>\n        );\n    }\n\n    public initData() {\n        this.expenseData = [];\n        this.employeeData = [];\n        this.incomeData = [];\n\n        const startYear = 2011;\n\n        for (let i = 1; i < 20; i++) {\n\n            const year = startYear + i;\n\n            // Employee Data\n            const name: string = this.getItem(this.firstNames) + \" \" + this.getItem(this.lastNames);\n            const company: string = this.getItem(this.companies);\n            const title: string = this.getItem(this.titles);\n            const age: number = this.getRandom(25, 60);\n            const country: string = this.getItem(this.countries);\n            const salary: string = this.getAmount(60000, 80000);\n\n            // Expense Data\n            const computerExpense: string = this.getAmount(50000, 60000);\n            const researchExpense: string = this.getAmount(120000, 160000);\n            const travelExpense: string = this.getAmount(15000, 25000);\n            const salaryExpense: string = this.getAmount(1000000, 2000000);\n            const softwareExpense: string = this.getAmount(100000, 150000);\n\n            // Income Data\n            const phoneIncome: string = this.getAmount(3500000, 6000000);\n            const computerIncome: string = this.getAmount(200000, 300000);\n            const softwareIncome: string = this.getAmount(700000, 800000);\n            const serviceIncome: string = this.getAmount(650000, 750000);\n            const royaltyIncome: string = this.getAmount(400000, 450000);\n\n            this.employeeData.push({\n                \"Name\": name,\n                \"Company\": company,\n                \"Title\": title,\n                \"Age\": age,\n                \"Country\": country,\n                \"Salary\": salary\n            });\n\n            this.expenseData.push({\n                \"Year\": year,\n                \"Computers\": computerExpense,\n                \"Research\": researchExpense,\n                \"Travel\": travelExpense,\n                \"Salary\": salaryExpense,\n                \"Software\": softwareExpense\n            });\n\n            this.incomeData.push({\n                \"Year\": year,\n                \"Phones\": phoneIncome,\n                \"Computers\": computerIncome,\n                \"Software\": softwareIncome,\n                \"Services\": serviceIncome,\n                \"Royalties\": royaltyIncome\n            });\n        }\n    }\n\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    public getAmount(min: number, max: number) {\n        const n = this.getRandom(min, max);\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        return \"$\" + s.replace(\".00\", \"\");\n    }\n\n    public onGridRef(grid: IgrDataGrid) {\n        if (!grid) { return; }\n\n        this.grid = grid;\n    }\n\n    public onTableChange = (e: any) => {\n        const newVal: string = e.target.value.toString();\n        this.setState({selected: newVal} as any);\n        this.switchDataSource(newVal);\n    }\n\n    public createWorkbook() {\n        this.initData();\n        this.switchDataSource((this.state as any).selected);\n    }\n\n    public saveWorkbook() {\n        const headers = Object.keys(this.grid.dataSource[0]);\n        headers.pop();\n\n        const wb = new Workbook(WorkbookFormat.Excel2007);\n        const ws = wb.worksheets().add(\"Sheet1\");\n\n        for(let i=0; i<headers.length; i++){\n            ws.rows(0).cells(i).value = headers[i];\n        }\n\n        for(let i=0; i<this.grid.dataSource.length; i++){\n            const dataRow = this.grid.dataSource[i];\n            const xlRow = ws.rows(i + 1);\n            for(let j=0; j<headers.length; j++){\n                xlRow.setCellValue(j, dataRow[headers[j]]);\n            }\n        }\n\n        ExcelUtility.save(wb, \"WorkbookSample\");\n    }\n\n    public switchDataSource(value: string){\n        if(value.includes(\"Employee\")){\n            // this.setState({data: this.employeeData} as any);\n            this.grid.dataSource = this.employeeData;\n        }\n        else if(value.includes(\"Expense\")){\n            // this.setState({data: this.expenseData} as any);\n            this.grid.dataSource = this.expenseData;\n        }\n        else{\n            // this.setState({data: this.incomeData} as any);\n            this.grid.dataSource = this.incomeData;\n        }\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<ExcelLibraryUsingWorkbooks />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/operations-on-workbooks/src/ExcelUtility.ts",
  "content": "import { saveAs } from \"file-saver\";\r\nimport { Workbook } from 'igniteui-react-excel';\r\nimport { WorkbookFormat } from 'igniteui-react-excel';\r\nimport { WorkbookSaveOptions } from 'igniteui-react-excel';\r\nimport { WorkbookLoadOptions } from 'igniteui-react-excel';\r\nimport { IgrExcelXlsxModule } from 'igniteui-react-excel';\r\nimport { IgrExcelCoreModule } from 'igniteui-react-excel';\r\nimport { IgrExcelModule } from 'igniteui-react-excel';\r\n\r\nIgrExcelCoreModule.register();\r\nIgrExcelModule.register();\r\nIgrExcelXlsxModule.register();\r\n\r\nexport class ExcelUtility {\r\n\r\n    public static getExtension(format: WorkbookFormat): string {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d): void => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e): void => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e): void => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e): void => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/operations-on-workbooks/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}