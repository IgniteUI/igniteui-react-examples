{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/operations-on-worksheets/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ExcelUtility } from './ExcelUtility';\nimport { IgrExcelModule } from 'igniteui-react-excel';\nimport { Workbook } from 'igniteui-react-excel';\nimport { Worksheet } from 'igniteui-react-excel';\nimport { WorkbookFormat } from 'igniteui-react-excel';\nimport { Color } from 'igniteui-react-core';\nimport {\n\n    CustomFilterCondition,\n    ExcelComparisonOperator,\n    FormatConditionTextOperator,\n    OrderedSortCondition,\n    RelativeIndex,\n    SortDirection,\n    WorkbookColorInfo\n} from 'igniteui-react-excel';\n\nIgrExcelModule.register();\n\nexport default class ExcelLibraryUsingWorksheets extends React.Component<any, any> {\n    public data: any;\n    public isSorted: boolean;\n    public isFiltered: boolean;\n    public isProtected: boolean;\n    public showGridlines: boolean;\n    public showHeaders: boolean;\n    public applyConditionalFormatting: boolean;\n    public workbook: Workbook;\n\n    constructor(props: any) {\n        super(props);\n\n        this.showGridlines = true;\n        this.showHeaders = true;\n    }\n\n    public exportData = (): void => {\n        this.initData();\n        const sheet = this.workbook.worksheets(0);\n        sheet.defaultColumnWidth = 220 * 20;\n\n        if (this.isSorted) {\n            sheet.sortSettings.setRegion(\"A1:A20\");\n            sheet.sortSettings.sortConditions().addItem(\n                new RelativeIndex(0), new OrderedSortCondition(SortDirection.Ascending));\n        }\n        if (this.isFiltered) {\n            sheet.filterSettings.setRegion(\"C1:C20\");\n            sheet.filterSettings.applyCustomFilter(0, new CustomFilterCondition(ExcelComparisonOperator.Equals, \"USA\"));\n        }\n        if (this.isProtected) {\n            sheet.protect();\n        }\n        if (!this.showHeaders) {\n            sheet.displayOptions.showRowAndColumnHeaders = false;\n        }\n        if (!this.showGridlines) {\n            sheet.displayOptions.showGridlines = false;\n        }\n        if (this.applyConditionalFormatting) {\n            const green = new Color();\n            green.colorString = \"Green\";\n\n            const blue = new Color();\n            blue.colorString = \"Blue\";\n\n            const orange = new Color();\n            orange.colorString = \"Orange\";\n\n            const format = sheet.conditionalFormats().addTextCondition(\n                \"A1:A20\", \"Amazon\", FormatConditionTextOperator.Contains);\n\n            const format2 = sheet.conditionalFormats().addTextCondition(\n                \"A1:A20\", \"IBM\", FormatConditionTextOperator.Contains);\n\n            const format3 = sheet.conditionalFormats().addTextCondition(\n                \"A1:A20\", \"Tesla\", FormatConditionTextOperator.Contains);\n\n            format.cellFormat.font.colorInfo = new WorkbookColorInfo(green);\n            format2.cellFormat.font.colorInfo = new WorkbookColorInfo(blue);\n            format3.cellFormat.font.colorInfo = new WorkbookColorInfo(orange);\n        }\n\n        ExcelUtility.save(this.workbook, \"worksheetsSample\");\n    }\n\n    public onChange = (e: any): void => {\n        switch (e.target.id)\n        {\n            case \"isSorted\":\n                this.isSorted = e.target.checked;\n            break;\n            case \"isFiltered\":\n                this.isFiltered = e.target.checked;\n            break;\n            case \"isProtected\":\n                this.isProtected = e.target.checked;\n            break;\n            case \"showGridlines\":\n                this.showGridlines = e.target.checked;\n            break;\n            case \"showHeaders\":\n                this.showHeaders = e.target.checked;\n            break;\n            case \"applyFormat\":\n                this.applyConditionalFormatting = e.target.checked;\n            break;\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <div className=\"options horizontal\">\n                    <button className=\"options-button\" onClick={this.exportData}>Save Workbook</button>\n                </div>\n                <div className=\"options vertical\">\n                    <label className=\"options-label\"><input id=\"isSorted\" defaultChecked={this.isSorted} onChange={this.onChange} type=\"checkbox\" />Apply Sort</label>\n                    <label className=\"options-label\"><input id=\"isFiltered\" defaultChecked={this.isFiltered} onChange={this.onChange} type=\"checkbox\" />Apply Filter</label>\n                    <label className=\"options-label\"><input id=\"isProtected\" defaultChecked={this.isProtected} onChange={this.onChange} type=\"checkbox\" />Protect Worksheet</label>\n                    <label className=\"options-label\"><input id=\"showGridlines\" defaultChecked={this.showGridlines} onChange={this.onChange} type=\"checkbox\" />Show Gridlines</label>\n                    <label className=\"options-label\"><input id=\"showHeaders\" defaultChecked={this.showHeaders} onChange={this.onChange} type=\"checkbox\" />Show Row and Column Headers</label>\n                    <label className=\"options-label\"><input id=\"applyFormat\" defaultChecked={this.applyConditionalFormatting} onChange={this.onChange} type=\"checkbox\" />Apply Conditional Formatting</label>\n                </div>\n            </div>\n        );\n    }\n\n    public initData() {\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\"];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\"];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\"];\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\"];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\"];\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\"];\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\"];\n        const headers = [\"Company Name\",\n            \"Contact Title\",\n            \"Country\",\n            \"City\",\n            \"Contact Name\",\n            \"Address\",\n            \"Postal Code\",\n            \"Customer ID\",\n            \"Salary\",\n            \"Age\"];\n        const dataSource = new Array<any>();\n        // generating excel data source\n        this.workbook = new Workbook(WorkbookFormat.Excel2007);\n        const sheet = this.workbook.worksheets().add(\"Sheet1\");\n\n        for (let i = 0; i < headers.length; i++) {\n            sheet.rows(0).cells(i).value = headers[i];\n        }\n\n        for (let i = 1; i < 20; i++) {\n            const companyName = this.getItem(companies);\n            const contactTitle = this.getItem(titles);\n            const country = this.getItem(countries);\n            const city = this.getItem(cities);\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\n            const customerID = \"CID-\" + this.getRandom(500, 900);\n            const salary = this.getSalary(85000, 200000);\n            const age = this.getRandom(20, 65);\n            const dataItem = [\n                companyName,\n                contactTitle,\n                country,\n                city,\n                contactName,\n                address,\n                postalCode,\n                customerID,\n                salary,\n                age\n            ];\n            for (let j = 0; j < dataItem.length; j++) {\n                sheet.rows(i).cells(j).value = dataItem[j];\n            }\n        }\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n\n    public getSalary(min: number, max: number) {\n        const n = this.getRandom(min, max);\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        return \"$\" + s.replace(\".00\", \"\");\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<ExcelLibraryUsingWorksheets />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/operations-on-worksheets/src/ExcelSharedData.ts",
  "content": "\r\n\r\nexport class ExcelSharedData {\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/operations-on-worksheets/src/ExcelUtility.ts",
  "content": "import { saveAs } from \"file-saver\";\r\nimport { Workbook } from 'igniteui-react-excel';\r\nimport { WorkbookFormat } from 'igniteui-react-excel';\r\nimport { WorkbookSaveOptions } from 'igniteui-react-excel';\r\nimport { WorkbookLoadOptions } from 'igniteui-react-excel';\r\nimport { IgrExcelXlsxModule } from 'igniteui-react-excel';\r\nimport { IgrExcelCoreModule } from 'igniteui-react-excel';\r\nimport { IgrExcelModule } from 'igniteui-react-excel';\r\n\r\nIgrExcelCoreModule.register();\r\nIgrExcelModule.register();\r\nIgrExcelXlsxModule.register();\r\n\r\nexport class ExcelUtility {\r\n\r\n    public static getExtension(format: WorkbookFormat): string {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d): void => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e): void => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e): void => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e): void => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/operations-on-worksheets/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}