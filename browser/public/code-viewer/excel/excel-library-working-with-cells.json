{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-cells/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ExcelUtility } from './ExcelUtility';\n// import { ExcelSharedData } from './ExcelSharedData';\nimport { IgrExcelModule } from 'igniteui-react-excel';\nimport { Workbook } from 'igniteui-react-excel';\nimport { Worksheet } from 'igniteui-react-excel';\nimport { WorkbookFormat } from 'igniteui-react-excel';\nimport { CellReferenceMode } from 'igniteui-react-excel';\nimport { WorksheetMergedCellsRegion } from 'igniteui-react-excel';\nimport { WorksheetCellComment } from 'igniteui-react-excel';\nimport { FormattedString } from 'igniteui-react-excel';\nimport { Formula } from 'igniteui-react-excel';\n\nIgrExcelModule.register();\n\nexport default class ExcelLibraryWorkingWithCells extends React.Component<any, any> {\n    public canSave = false;\n    public wb: Workbook;\n    public ws: Worksheet;\n    public worksheetRegion: string[] | null;\n    public selectedRegion: string | null;\n    public cellFeatures: string[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.init();\n    }\n\n    public workbookSave(): void {\n        if (this.canSave) {\n            ExcelUtility.save(this.wb, \"ExcelWorkbook\").then((f: any) => {\n                console.log(\"Saved:\" + f);\n            }, (e: any) => {\n                console.error(\"ExcelUtility.Save Error:\" + e);\n            });\n        }\n    }\n    public workbookParse(wb: Workbook): void {\n        if (wb === undefined) {\n            this.worksheetRegion = null;\n            this.selectedRegion = null;\n        } else {\n            const names = new Array<string>();\n            const worksheets = wb.worksheets();\n            const wsCount = worksheets.count;\n            for (let i = 0; i < wsCount; i ++) {\n                const tables = worksheets.item(i).tables();\n                const tCount = tables.count;\n                for (let j = 0; j < tCount; j++) {\n                    names.push(worksheets.item(i).name + \" - \" + tables.item(j).name);\n                }\n            }\n            this.worksheetRegion = names;\n            this.selectedRegion = names.length > 0 ? names[0] : null;\n        }\n        this.wb = wb;\n        this.canSave = wb != null;\n    }\n\n    public workbookCreate(): void {\n        const wb = new Workbook(WorkbookFormat.Excel2007);\n        const employeeSheet = wb.worksheets().add(\"Employees\");\n        const employeeHeader = employeeSheet.rows(0);\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" ];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" ];\n        const titles = [\"Sales Rep.\", \"Engineer\", \"Administrator\", \"Manager\" ];\n        const employeeColumns = [\"Name\", \"Company\", \"Title\", \"Age\", \"Country\"];\n        for (let col = 0; col < employeeColumns.length; col++) {\n            employeeSheet.columns(col).width = 5000;\n            employeeHeader.setCellValue(col, employeeColumns[col]);\n        }\n        for (let i = 1; i < 20; i++) {\n            const company = this.getItem(companies);\n            const title = this.getItem(titles);\n            const country = this.getItem(countries);\n            const name = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const salary = this.getRandom(45000, 95000);\n            const age = this.getRandom(20, 65);\n            const wr = employeeSheet.rows(i);\n            wr.setCellValue(0, name);\n            wr.setCellValue(1, company);\n            wr.setCellValue(2, title);\n            wr.setCellValue(3, age);\n            wr.setCellValue(4, country);\n            wr.setCellValue(5, salary);\n        }\n        const expanseSheet = wb.worksheets().add(\"Expanses\");\n        const expanseHeader = expanseSheet.rows(0);\n        const expanseNames = [\"Year\", \"Computers\", \"Research\", \"Travel\", \"Salary\", \"Software\" ];\n        let expanseCol = 0;\n        for (const key of expanseNames) {\n            expanseSheet.columns(expanseCol).width = 5000;\n            expanseHeader.setCellValue(expanseCol, key);\n            for (let i = 1; i < 20; i++) {\n                const wr = expanseSheet.rows(i);\n                if (key === \"Year\") {\n                    wr.setCellValue(expanseCol, 2010 + i);\n                } else if (key === \"Computers\") {\n                    wr.setCellValue(expanseCol, this.getAmount(50000, 65000));\n                } else if (key === \"Research\") {\n                    wr.setCellValue(expanseCol, this.getAmount(150000, 165000));\n                } else if (key === \"Travel\") {\n                    wr.setCellValue(expanseCol, this.getAmount(20000, 25000));\n                } else if (key === \"Salary\") {\n                    wr.setCellValue(expanseCol, this.getAmount(4000000, 450000));\n                } else if (key === \"Software\") {\n                    wr.setCellValue(expanseCol, this.getAmount(100000, 150000));\n                }\n            }\n            expanseCol++;\n        }\n        const incomeSheet = wb.worksheets().add(\"Income\");\n        const incomeHeader = incomeSheet.rows(0);\n        const incomeNames = [\"Year\", \"Phones\", \"Computers\", \"Software\", \"Services\", \"Royalties\" ];\n        let incomeCol = 0;\n        for (const key of incomeNames) {\n            incomeSheet.columns(incomeCol).width = 5000;\n            incomeHeader.setCellValue(incomeCol, key);\n            for (let i = 1; i < 20; i++) {\n                const wr = incomeSheet.rows(i);\n                if (key === \"Year\") {\n                    wr.setCellValue(incomeCol, 2010 + i);\n                } else if (key === \"Software\") {\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 850000));\n                } else if (key === \"Computers\") {\n                    wr.setCellValue(incomeCol, this.getAmount(250000, 265000));\n                } else if (key === \"Royalties\") {\n                    wr.setCellValue(incomeCol, this.getAmount(400000, 450000));\n                } else if (key === \"Phones\") {\n                    wr.setCellValue(incomeCol, this.getAmount(6000000, 650000));\n                } else if (key === \"Services\") {\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 750000));\n                }\n            }\n            incomeCol++;\n        }\n        this.workbookParse(wb);\n    }\n\n    public onCommentChanged = (event: any): void => {\n        const ws = this.wb.worksheets(0);\n        const wr = ws.rows(0);\n        const d = new WorksheetCellComment();\n        const formatted = new FormattedString(\"This cell has a reference name.\");\n        if (event.target.checked === true) {\n            // Cell Comment\n            d.text = formatted;\n            wr.cells(0).comment = d;\n        } else {\n            wr.cells(0).comment = new WorksheetCellComment();\n        }\n    }\n    public onFormulaChanged = (event: any): void => {\n        // Cell Formula\n        const ws = this.wb.worksheets(0);\n        let formula: Formula | null = null;\n        if (event.target.checked === true) {\n            // Using a Formula object to apply a formula\n            formula = Formula.parse(\"=AVERAGE(F2:F20)\", CellReferenceMode.A1);\n            formula.applyTo(ws.rows(21).cells(5));\n            ws.rows(20).cells(5).value = \"Average Salary\";\n        } else {\n            if (ws.rows(21).cells(5).formula != null) {\n                formula = ws.rows(21).cells(5).formula;\n            }\n            if (formula != null) {\n                ws.rows(21).cells(5).value = null;\n                ws.rows(20).cells(5).value = null;\n            }\n        }\n    }\n    public onMergeChanged = (event: any): void => {\n        let mergedRegion: WorksheetMergedCellsRegion | null = null;\n        if (event.target.checked === true) {\n            // Using merge cells\n             this.wb.worksheets(0).rows(2).cells(2).value = \"Engineer\";\n             this.wb.worksheets(0).rows(3).cells(2).value = \"Engineer\";\n             this.wb.worksheets(0).rows(4).cells(2).value = \"Engineer\";\n             this.wb.worksheets(0).mergedCellsRegions().add(2, 2, 4, 2);\n             mergedRegion = this.wb.worksheets(0).mergedCellsRegions(0);\n        } else {\n            if (this.wb.worksheets(0).mergedCellsRegions().count === 1) {\n                    mergedRegion = this.wb.worksheets(0).mergedCellsRegions(0);\n                }\n            if (mergedRegion != null) {\n                this.wb.worksheets(0).mergedCellsRegions().removeAt(0);\n                this.wb.worksheets(0).rows(2).cells(2).value = \"Engineer\";\n                this.wb.worksheets(0).rows(3).cells(2).value = \"Engineer\";\n                this.wb.worksheets(0).rows(4).cells(2).value = \"Engineer\";\n            }\n        }\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n    public getAmount(min: number, max: number) {\n        const n = this.getRandom(min, max);\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n        return s;\n    }\n\n    public onClick = () => {\n        this.workbookSave();\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <div className=\"options horizontal\">\n                    <button style={{width: \"auto\"}} onClick={this.onClick}>Save Workbook</button>\n                </div>\n                <div className=\"options vertical\">\n                    <label className=\"label\"><input type=\"checkbox\" id=\"addComment\" onChange={this.onCommentChanged}/>Add a Comment to cell A1: </label>\n                    <label className=\"label\"><input type=\"checkbox\" id=\"addFormula\" onChange={this.onFormulaChanged}/>Add a Formula for cells F2 to F20: </label>\n                    <label className=\"label\"><input type=\"checkbox\" id=\"mergeCells\" onChange={this.onMergeChanged}/>Merge Cells: </label>\n                </div>\n            </div>\n        );\n    }\n\n    public init() {\n        this.workbookCreate();\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<ExcelLibraryWorkingWithCells />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-cells/src/ExcelSharedData.ts",
  "content": "\r\n\r\nexport class ExcelSharedData {\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-cells/src/ExcelUtility.ts",
  "content": "import { saveAs } from \"file-saver\";\r\nimport { Workbook } from 'igniteui-react-excel';\r\nimport { WorkbookFormat } from 'igniteui-react-excel';\r\nimport { WorkbookSaveOptions } from 'igniteui-react-excel';\r\nimport { WorkbookLoadOptions } from 'igniteui-react-excel';\r\nimport { IgrExcelXlsxModule } from 'igniteui-react-excel';\r\nimport { IgrExcelCoreModule } from 'igniteui-react-excel';\r\nimport { IgrExcelModule } from 'igniteui-react-excel';\r\n\r\nIgrExcelCoreModule.register();\r\nIgrExcelModule.register();\r\nIgrExcelXlsxModule.register();\r\n\r\nexport class ExcelUtility {\r\n\r\n    public static getExtension(format: WorkbookFormat): string {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d): void => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e): void => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e): void => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e): void => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-cells/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}