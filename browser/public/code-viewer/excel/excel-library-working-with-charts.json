{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-charts/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Workbook } from 'igniteui-react-excel';\nimport { WorkbookFormat } from 'igniteui-react-excel';\nimport { WorksheetRegion } from 'igniteui-react-excel';\nimport { ChartType } from 'igniteui-react-excel';\nimport { AxisType } from 'igniteui-react-excel';\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrNumericColumn } from 'igniteui-react-grids';\nimport { IgrCategoryChart } from 'igniteui-react-charts';\nimport { IgrCategoryChartModule } from 'igniteui-react-charts';\nimport { IgrExcelXlsxModule } from 'igniteui-react-excel';\nimport { IgrExcelCoreModule } from 'igniteui-react-excel';\nimport { IgrExcelModule } from 'igniteui-react-excel';\nimport { ExcelUtility } from './ExcelUtility';\n\nIgrDataGridModule.register();\nIgrCategoryChartModule.register();\n\nIgrExcelCoreModule.register();\nIgrExcelModule.register();\nIgrExcelXlsxModule.register();\n\nexport default class ExcelLibraryWorkingWithCharts extends React.Component<any, any> {\n\n    public excelData: any[];\n    public chartData: any[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.exportData = this.exportData.bind(this);\n\n        this.initData();\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <div className=\"options horizontal\">\n                    <button className=\"options-button\" onClick={this.exportData}>Export</button>\n                </div>\n                <div className=\"container\">\n                    <IgrCategoryChart\n                        height=\"50%\" width=\"100%\"\n                        yAxisMinimumValue={0}\n                        xAxisInterval={1}\n                        chartType=\"column\"\n                        brushes=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\n                        outlines=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\n                        thickness={0}\n                        dataSource={this.chartData} />\n                    <IgrDataGrid\n                        height=\"50%\"\n                        width=\"100%\"\n                        autoGenerateColumns=\"false\"\n                        dataSource={this.excelData}>\n                        <IgrTextColumn field=\"Expense\" width=\"*>100\" />\n                        <IgrNumericColumn field=\"Jan\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Feb\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Mar\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Apr\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"May\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Jun\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Jul\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Aug\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Sep\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Oct\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Nov\" width=\"*>75\" />\n                        <IgrNumericColumn field=\"Dec\" width=\"*>75\" />\n                    </IgrDataGrid>\n                </div>\n            </div>\n        );\n    }\n\n    public initData() {\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        const groups = [\"Heating\", \"Electricity\", \"Water\", \"Taxes\"];\n\n        const expanseKey = \"Expense\";\n        const monthKey = \"Month\";\n        const data = new Array<any>();\n        // generating excel data source\n        for (const group of groups) {\n            const r = {};\n            r[expanseKey] = group;\n            let index = 0;\n            for (const month of months) {\n                const x = index * 15 * Math.PI / 180;\n                const rand = this.getRandom(50, 100);\n                const heat = Math.abs(Math.cos(x)) * 300 + rand;\n                const ac = Math.abs(Math.sin(x)) * 500 + rand;\n                if (group === \"Heating\") {\n                    r[month] = Math.round(heat);\n                } else if (group === \"Electricity\") {\n                    r[month] = Math.round(ac);\n                } else if (group === \"Water\") {\n                    r[month] = this.getRandom(100, 150);\n                } else if (group === \"Taxes\") {\n                    r[month] = this.getRandom(700, 800);\n                }\n                index = index + 1;\n            }\n            data.push(r);\n        }\n        this.excelData = data;\n        // since we will export the data transposed (plotByRows will be true)\n        // if we want to show the data that way in the ui then we need a transposed\n        // version of the data for the category chart to bind to\n        const chartData = new Array<any>();\n        for (const month of months) {\n            const r = {};\n            r[monthKey] = month;\n            for (const item of data) {\n                r[item[expanseKey]] = item[month];\n            }\n            chartData.push(r);\n        }\n        this.chartData = chartData;\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    public exportData() {\n        const headers = Object.keys(this.excelData[0]);\n        headers.pop();\n\n        const wb = new Workbook(WorkbookFormat.Excel2007);\n        const ws = wb.worksheets().add(\"Sheet1\");\n        ws.defaultColumnWidth = 200 * 20;\n\n        // reserving the [0] row where we will place the chart shape\n        // the [1] will be the headers. so data will start on [2]\n        const firstDataRow = 2;\n        const headerRow = ws.rows(firstDataRow - 1);\n        for (let c = 0; c < headers.length; c++) {\n            headerRow.setCellValue(c, headers[c]);\n        }\n\n        for (let r = 0; r < this.excelData.length; r++) {\n            const xlRow = ws.rows(r + firstDataRow);\n            const dataRow = this.excelData[r];\n            for (let c = 0; c < headers.length; c++) {\n                xlRow.setCellValue(c, dataRow[headers[c]]);\n            }\n        }\n        const indexRow = firstDataRow - 1;\n        const indexData = firstDataRow + this.excelData.length - 1;\n        const indexHeader = headers.length - 1;\n\n        const tableRegion = new WorksheetRegion(ws, indexRow, 0, indexData, indexHeader);\n        const table = ws.tables().add(tableRegion.toString(), true);\n\n        // set some extra height for the row where the chart will be\n        ws.rows(0).height = 5000;\n        const chart = ws.shapes().addChart(ChartType.ColumnClustered,\n            ws.rows(0).cells(0), { x: 0, y: 0 },\n            ws.rows(0).cells(headers.length - 1), { x: 100, y: 100 });\n        chart.setSourceData(table.wholeTableRegion.toString(), true);\n\n        chart.axisCollection(AxisType.Category).axisBetweenCategories = true;\n\n        ExcelUtility.save(wb, \"chartSample\");\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<ExcelLibraryWorkingWithCharts />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-charts/src/ExcelUtility.ts",
  "content": "import { saveAs } from \"file-saver\";\r\nimport { Workbook } from 'igniteui-react-excel';\r\nimport { WorkbookFormat } from 'igniteui-react-excel';\r\nimport { WorkbookSaveOptions } from 'igniteui-react-excel';\r\nimport { WorkbookLoadOptions } from 'igniteui-react-excel';\r\nimport { IgrExcelXlsxModule } from 'igniteui-react-excel';\r\nimport { IgrExcelCoreModule } from 'igniteui-react-excel';\r\nimport { IgrExcelModule } from 'igniteui-react-excel';\r\n\r\nIgrExcelCoreModule.register();\r\nIgrExcelModule.register();\r\nIgrExcelXlsxModule.register();\r\n\r\nexport class ExcelUtility {\r\n\r\n    public static getExtension(format: WorkbookFormat): string {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d): void => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e): void => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e): void => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e): void => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-charts/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}