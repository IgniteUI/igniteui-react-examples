{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-sparklines/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ExcelUtility } from './ExcelUtility';\n// import { ExcelSharedData } from './ExcelSharedData';\nimport { Workbook } from 'igniteui-react-excel';\nimport { WorkbookFormat } from 'igniteui-react-excel';\nimport { WorksheetRegion } from 'igniteui-react-excel';\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrTemplateColumn, IIgrCellTemplateProps } from 'igniteui-react-grids';\nimport { IgrTemplateCellUpdatingEventArgs } from 'igniteui-react-grids';\nimport { IgrTemplateCellInfo } from 'igniteui-react-grids';\n// data chart's elements for category series:\nimport { IgrNumericYAxis } from 'igniteui-react-charts';\nimport { IgrCategoryXAxis } from 'igniteui-react-charts';\nimport { IgrColumnSeries } from 'igniteui-react-charts';\n// data chart's modules:\nimport { IgrDataChart } from 'igniteui-react-charts';\nimport { IgrDataChartCoreModule } from 'igniteui-react-charts';\nimport { IgrDataChartCategoryModule } from 'igniteui-react-charts';\nimport { IgrExcelXlsxModule } from 'igniteui-react-excel';\nimport { IgrExcelCoreModule } from 'igniteui-react-excel';\nimport { IgrExcelModule } from 'igniteui-react-excel';\nimport { Visibility } from 'igniteui-react-core';\nimport { WorkbookFontProxy, SparklineType } from 'igniteui-react-excel';\n\nIgrDataGridModule.register();\n\nIgrDataChartCoreModule.register();\nIgrDataChartCategoryModule.register();\n\nIgrExcelCoreModule.register();\nIgrExcelModule.register();\nIgrExcelXlsxModule.register();\n\nexport default class ExcelLibraryWorkingWithSparklines extends React.Component<any, any> {\n\n    public data: any[];\n\n    constructor(props: any) {\n        super(props);\n\n        this.exportGrid = this.exportGrid.bind(this);\n\n        this.initData();\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <div className=\"options horizontal\">\n                    <button className=\"options-button\" onClick={this.exportGrid}>Export</button>\n                </div>\n                <IgrDataGrid autoGenerateColumns={false} dataSource={this.data} height=\"calc(100% - 30px)\" width=\"100%\">\n                    <IgrTemplateColumn width=\"*>90\" field=\"Orders\" template={this.templateColTestMethod} />\n                    <IgrTextColumn width=\"*>130\" field=\"CompanyName\"  headerText=\"Company\" />\n                    <IgrTextColumn width=\"*>90\"  field=\"ContactName\" headerText=\"Name\" />\n                    <IgrTextColumn width=\"*>70\"  field=\"ContactTitle\" headerText=\"Title\" />\n                    <IgrTextColumn width=\"*>90\"  field=\"Country\" headerText=\"Country\" />\n                </IgrDataGrid>\n            </div>\n        );\n    }\n\n    public templateColTestMethod(props: IIgrCellTemplateProps) {\n        const tmpl = props.dataContext as IgrTemplateCellInfo;\n\n        return (\n            <IgrDataChart dataSource={tmpl.rowItem.Orders} height=\"40px\" width=\"200px\">\n                <IgrCategoryXAxis name=\"xAxis\" labelVisibility=\"Collapsed\" gap={0.5} overlap={0}/>\n                <IgrNumericYAxis name=\"yAxis\" minValue={0} labelVisibility=\"Collapsed\" />\n\n                <IgrColumnSeries name=\"series\" xAxisName=\"xAxis\" yAxisName=\"yAxis\" valueMemberPath=\"Freight\" />\n            </IgrDataChart>\n        );\n    }\n\n    public exportGrid() {\n        const headers = [\"Orders\", \"Company Name\", \"Contact Name\", \"Contact Title\", \"Country\"];\n        const keys = [\"Orders\", \"CompanyName\", \"ContactName\", \"ContactTitle\", \"Country\"];\n        const orderHeaders = [\"Customer ID\", \"Order ID\", \"Freight\"];\n\n        const wb = new Workbook(WorkbookFormat.Excel2007);\n        const exportSheet = wb.worksheets().add(\"Sheet1\");\n        const ordersSheet = wb.worksheets().add(\"Orders\");\n\n        exportSheet.defaultColumnWidth = 300 * 20;\n        exportSheet.defaultRowHeight = 50 * 20;\n\n        for (let i = 0; i < headers.length; i++) {\n            exportSheet.rows(0).cells(i).value = headers[i];\n        }\n\n        for (let i = 0; i < this.data.length; i++) {\n            const item = this.data[i];\n            const orders = item.Orders;\n\n            for (let j = 0; j < orders.length; j++) {\n                ordersSheet.rows(i).cells(j).value = orders[j].Freight;\n            }\n        }\n\n        for (let i = 0; i < this.data.length; i++) {\n\n            const index = (i + 1).toString();\n            const dataItem = this.data[i];\n\n            for (let j = 0; j < headers.length; j++) {\n                if (j === 0) {\n                    exportSheet.sparklineGroups().add(SparklineType.Column, \"A\" + (i + 2).toString(), \"Orders!A\" + index + \":F\" + index);\n                }\n                else {\n                    exportSheet.rows(i + 1).cells(j).value = dataItem[keys[j]];\n                }\n            }\n        }\n\n        ExcelUtility.save(wb, \"myWorksheet\");\n    }\n\n    public initData() {\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\"];\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\"];\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\", \"Novak\"];\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\"];\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\"];\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\"];\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\"];\n        const shippings = [\"Federal Ex\", \"UPS Air\", \"UPS Ground\"];\n\n        const data = new Array<any>();\n        // generating excel data source\n        for (let i = 0; i < 20; i++) {\n            const companyName = this.getItem(companies);\n            const contactTitle = this.getItem(titles);\n            const country = this.getItem(countries);\n            const city = this.getItem(cities);\n            const shipping = this.getItem(shippings);\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const employeeName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\n            const customerID = \"CID-\" + this.getRandom(500, 900);\n            const phone = this.getRandom(500, 900) + \"-\" + this.getRandom(200, 900) + \"-\" + this.getRandom(2000, 9000);\n            const fax = this.getRandom(500, 900) + \"-\" + this.getRandom(200, 900) + \"-\" + this.getRandom(2000, 9000);\n\n            const companyOrders = new Array<any>();\n            for (let o = 0; o < 6; o++) {\n                const reqDate = \"2020-06-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\n                const shipDate = \"2020-06-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\n                const orderDate = \"2020-05-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\n                const order = {\n                    ContactName: contactName,\n                    CustomerID: customerID,\n                    EmployeeID: this.getRandom(1000, 8000),\n                    EmployeeName: employeeName,\n                    Freight: this.getRandom(3, 10),\n                    OrderDate: orderDate,\n                    OrderID: this.getRandom(3000, 5000),\n                    RequiredDate: reqDate,\n                    ShipAddress: address,\n                    ShipCity: city,\n                    ShipCountry: country,\n                    ShipName: companyName,\n                    ShipPostalCode: postalCode,\n                    ShipRegion: \"\",\n                    ShipVia: this.getRandom(1, 10),\n                    ShippedDate: shipDate,\n                    ShipperID: this.getRandom(1, 10),\n                    ShipperName: shipping,\n                    TotalItems: this.getRandom(10, 20),\n                    TotalPrice: this.getRandom(400, 600)\n                };\n                companyOrders.push(order);\n            }\n            const dataItem = {\n                Address: address,\n                City: city,\n                CompanyName: companyName,\n                ContactName: contactName,\n                ContactTitle: contactTitle,\n                Country: country,\n                Fax: fax,\n                ID: customerID,\n                Orders: companyOrders,\n                Phone: phone,\n                PostalCode: postalCode,\n                Region: \"\"\n            };\n            data.push(dataItem);\n        }\n        this.data = data;\n    }\n\n    public getRandom(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    public getItem(array: string[]): string {\n        const i = this.getRandom(0, array.length - 1);\n        return array[i];\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<ExcelLibraryWorkingWithSparklines />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-sparklines/src/ExcelSharedData.ts",
  "content": "\r\n\r\nexport class ExcelSharedData {\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-sparklines/src/ExcelUtility.ts",
  "content": "import { saveAs } from \"file-saver\";\r\nimport { Workbook } from 'igniteui-react-excel';\r\nimport { WorkbookFormat } from 'igniteui-react-excel';\r\nimport { WorkbookSaveOptions } from 'igniteui-react-excel';\r\nimport { WorkbookLoadOptions } from 'igniteui-react-excel';\r\nimport { IgrExcelXlsxModule } from 'igniteui-react-excel';\r\nimport { IgrExcelCoreModule } from 'igniteui-react-excel';\r\nimport { IgrExcelModule } from 'igniteui-react-excel';\r\n\r\nIgrExcelCoreModule.register();\r\nIgrExcelModule.register();\r\nIgrExcelXlsxModule.register();\r\n\r\nexport class ExcelUtility {\r\n\r\n    public static getExtension(format: WorkbookFormat): string {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d): void => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, new WorkbookLoadOptions(), (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e): void => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e): void => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e): void => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/excel/excel-library/working-with-sparklines/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}