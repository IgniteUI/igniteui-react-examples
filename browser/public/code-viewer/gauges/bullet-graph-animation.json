{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/gauges/bullet-graph/animation/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { IgrBulletGraph } from 'igniteui-react-gauges';\nimport { IgrBulletGraphModule } from 'igniteui-react-gauges';\nimport { IgrLinearGraphRange } from 'igniteui-react-gauges';\n\nIgrBulletGraphModule.register();\n\nexport default class BulletGraphAnimation extends React.Component {\n    public gauge: IgrBulletGraph;\n\n    constructor(props: any) {\n        super(props);\n\n        this.onGaugeRef = this.onGaugeRef.bind(this);\n        this.onAnimateToGauge1 = this.onAnimateToGauge1.bind(this);\n        this.onAnimateToGauge2 = this.onAnimateToGauge2.bind(this);\n        this.onAnimateToGauge3 = this.onAnimateToGauge3.bind(this);\n    }\n\n    public onGaugeRef(component: IgrBulletGraph) {\n        if (!component) { return; }\n\n        this.gauge = component;\n        this.onAnimateToGauge3(null);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\" >\n\n                <div className=\"options horizontal\">\n                    <button onClick={this.onAnimateToGauge1} className=\"options-button\">Gauge Animation #1</button>\n                    <button onClick={this.onAnimateToGauge2} className=\"options-button\">Gauge Animation #2</button>\n                    <button onClick={this.onAnimateToGauge3} className=\"options-button\">Gauge Animation #3</button>\n                </div>\n\n                <IgrBulletGraph\n                    ref={this.onGaugeRef}\n                    transitionDuration={1000}\n                    height=\"80px\"\n                    width=\"100%\"\n                    minimumValue={0}\n                    maximumValue={120}\n                    valueBrush=\"#4286f4\"\n                    value={70}\n                    targetValueBrush=\"#4286f4\"\n                    targetValue={90}\n                    targetValueBreadth={10}\n                    interval={10}\n                    labelInterval={10}\n                    labelExtent={0.02}\n                    rangeBrushes =\"#FF9800, #F96232, #C62828\"\n                    rangeOutlines=\"#FF9800, #F96232, #C62828\"\n                    scaleBackgroundThickness={0}\n                    scaleBackgroundBrush=\"#dbdbdb\"\n                    scaleBackgroundOutline=\"gray\"/>\n            </div>\n        );\n    }\n\n    public onAnimateToGauge3 = (e: any) => {\n\n        // if (!this.gauge) { return; }\n\n        this.gauge.minimumValue = 0;\n        this.gauge.maximumValue = 120;\n        this.gauge.value = 70;\n        this.gauge.interval = 10;\n\n        // setting appearance of labels\n        this.gauge.labelInterval = 10;\n        this.gauge.labelExtent = 0.02;\n\n        // setting custom appearance of performance bar\n        this.gauge.valueInnerExtent = 0.5;\n        this.gauge.valueOuterExtent = 0.7;\n        this.gauge.valueBrush = \"#000000\";\n\n        // setting custom appearance of target bar\n        this.gauge.targetValueBrush = \"#000000\";\n        this.gauge.targetValueBreadth = 10;\n        this.gauge.targetValue = 90;\n\n        // setting appearance of major/minor ticks\n        this.gauge.minorTickCount = 5;\n        this.gauge.minorTickEndExtent = 0.10;\n        this.gauge.minorTickStartExtent = 0.20;\n        this.gauge.tickStartExtent = 0.20;\n        this.gauge.tickEndExtent = 0.05;\n        this.gauge.tickStrokeThickness = 2;\n\n        // setting custom gauge ranges\n        const range1 = new IgrLinearGraphRange({});\n        range1.startValue = 0;\n        range1.endValue = 40;\n        const range2 = new IgrLinearGraphRange({});\n        range2.startValue = 40;\n        range2.endValue = 80;\n        const range3 = new IgrLinearGraphRange({});\n        range3.startValue = 80;\n        range3.endValue = 120;\n\n        this.gauge.rangeBrushes  = [ \"#FF9800\", \"#F96232\", \"#C62828\"];\n        this.gauge.rangeOutlines = [ \"#FF9800\", \"#F96232\", \"#C62828\"];\n        this.gauge.ranges.clear();\n        this.gauge.ranges.add(range1);\n        this.gauge.ranges.add(range2);\n        this.gauge.ranges.add(range3);\n\n        // setting extent of all gauge ranges\n        for (let i = 0; i < this.gauge.ranges.count; i++) {\n            const range = this.gauge.ranges.item(i);\n            range.innerStartExtent = 0.2;\n            range.innerEndExtent = 0.2;\n            range.outerStartExtent = 0.95;\n            range.outerEndExtent = 0.95;\n        }\n\n        // setting extent of gauge scale\n        this.gauge.scaleBackgroundThickness = 0.5;\n        this.gauge.scaleBackgroundBrush = \"#dbdbdb\";\n        this.gauge.scaleBackgroundOutline = \"gray\";\n        this.gauge.scaleStartExtent = 0.05;\n        this.gauge.scaleEndExtent = 0.95;\n        this.gauge.scaleBackgroundThickness = 0;\n\n        // setting appearance of backing fill and outline\n        this.gauge.backingBrush = \"#f7f7f7\";\n        this.gauge.backingOutline = \"#d1d1d1\";\n        this.gauge.backingStrokeThickness = 0;\n    }\n\n    public onAnimateToGauge2 = (e: any) => {\n\n        if (!this.gauge) { return; }\n\n        this.gauge.minimumValue = 100;\n        this.gauge.maximumValue = 200;\n        this.gauge.value = 120;\n        this.gauge.interval = 10;\n\n        // setting appearance of labels\n        this.gauge.labelInterval = 10;\n        this.gauge.labelExtent = 0.02;\n\n        // setting custom appearance of performance bar\n        this.gauge.valueInnerExtent = 0.5;\n        this.gauge.valueOuterExtent = 0.7;\n        this.gauge.valueBrush = \"#000000\";\n\n        // setting custom appearance of target bar\n        this.gauge.targetValueBrush = \"#000000\";\n        this.gauge.targetValueBreadth = 10;\n        this.gauge.targetValue = 180;\n\n        // setting appearance of major/minor ticks\n        this.gauge.minorTickCount = 5;\n        this.gauge.minorTickEndExtent = 0.10;\n        this.gauge.minorTickStartExtent = 0.20;\n        this.gauge.tickStartExtent = 0.20;\n        this.gauge.tickEndExtent = 0.05;\n        this.gauge.tickStrokeThickness = 2;\n\n        // setting custom gauge ranges\n        const range1 = new IgrLinearGraphRange({});\n        range1.startValue = 100;\n        range1.endValue = 125;\n        const range2 = new IgrLinearGraphRange({});\n        range2.startValue = 125;\n        range2.endValue = 150;\n        const range3 = new IgrLinearGraphRange({});\n        range3.startValue = 150;\n        range3.endValue = 175;\n        const range4 = new IgrLinearGraphRange({});\n        range4.startValue = 175;\n        range4.endValue = 200;\n\n        this.gauge.rangeBrushes  = [ \"#0078C8\", \"#0099FF\", \"#21A7FF\", \"#4FB9FF\"];\n        this.gauge.rangeOutlines = [ \"#0078C8\", \"#0099FF\", \"#21A7FF\", \"#4FB9FF\"];\n        this.gauge.ranges.clear();\n        this.gauge.ranges.add(range1);\n        this.gauge.ranges.add(range2);\n        this.gauge.ranges.add(range3);\n        this.gauge.ranges.add(range4);\n\n        // setting extent of all gauge ranges\n        for (let i = 0; i < this.gauge.ranges.count; i++) {\n            const range = this.gauge.ranges.item(i);\n            range.innerStartExtent = 0.2;\n            range.innerEndExtent = 0.2;\n            range.outerStartExtent = 0.95;\n            range.outerEndExtent = 0.95;\n        }\n\n        // setting extent of gauge scale\n        this.gauge.scaleBackgroundThickness = 0.5;\n        this.gauge.scaleBackgroundBrush = \"#dbdbdb\";\n        this.gauge.scaleBackgroundOutline = \"gray\";\n        this.gauge.scaleStartExtent = 0.05;\n        this.gauge.scaleEndExtent = 0.95;\n        this.gauge.scaleBackgroundThickness = 0;\n\n        // setting appearance of backing fill and outline\n        this.gauge.backingBrush = \"#f7f7f7\";\n        this.gauge.backingOutline = \"#d1d1d1\";\n        this.gauge.backingStrokeThickness = 0;\n    }\n\n    public onAnimateToGauge1 = (e: any) => {\n\n        if (!this.gauge) { return; }\n\n        this.gauge.minimumValue = 0;\n        this.gauge.maximumValue = 80;\n        this.gauge.value = 70;\n        this.gauge.interval = 20;\n\n        // setting appearance of labels\n        this.gauge.labelInterval = 20;\n        this.gauge.labelExtent = 0.02;\n\n        // setting custom appearance of performance bar\n        this.gauge.valueInnerExtent = 0.5;\n        this.gauge.valueOuterExtent = 0.7;\n        this.gauge.valueBrush = \"#000000\";\n\n        // setting custom appearance of target bar\n        this.gauge.targetValueBrush = \"#000000\";\n        this.gauge.targetValueBreadth = 10;\n        this.gauge.targetValue = 60;\n\n        // setting appearance of major/minor ticks\n        this.gauge.minorTickCount = 5;\n        this.gauge.minorTickEndExtent = 0.10;\n        this.gauge.minorTickStartExtent = 0.20;\n        this.gauge.tickStartExtent = 0.20;\n        this.gauge.tickEndExtent = 0.05;\n        this.gauge.tickStrokeThickness = 2;\n\n        // setting custom gauge ranges\n        const range1 = new IgrLinearGraphRange({});\n        range1.startValue = 0;\n        range1.endValue = 40;\n        const range2 = new IgrLinearGraphRange({});\n        range2.startValue = 40;\n        range2.endValue = 80;\n\n        this.gauge.rangeBrushes  = [ \"#a4bd29\", \"#F86232\" ];\n        this.gauge.rangeOutlines = [ \"#a4bd29\", \"#F86232\" ];\n        this.gauge.ranges.clear();\n        this.gauge.ranges.add(range1);\n        this.gauge.ranges.add(range2);\n\n        // setting extent of all gauge ranges\n        for (let i = 0; i < this.gauge.ranges.count; i++) {\n            const range = this.gauge.ranges.item(i);\n            range.innerStartExtent = 0.2;\n            range.innerEndExtent = 0.2;\n            range.outerStartExtent = 0.95;\n            range.outerEndExtent = 0.95;\n        }\n\n        // setting extent of gauge scale\n        this.gauge.scaleBackgroundThickness = 0.5;\n        this.gauge.scaleBackgroundBrush = \"#dbdbdb\";\n        this.gauge.scaleBackgroundOutline = \"gray\";\n        this.gauge.scaleStartExtent = 0.05;\n        this.gauge.scaleEndExtent = 0.95;\n        this.gauge.scaleBackgroundThickness = 0;\n\n        // setting appearance of backing fill and outline\n        this.gauge.backingBrush = \"#f7f7f7\";\n        this.gauge.backingOutline = \"#d1d1d1\";\n        this.gauge.backingStrokeThickness = 0;\n\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<BulletGraphAnimation />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/gauges/bullet-graph/animation/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}