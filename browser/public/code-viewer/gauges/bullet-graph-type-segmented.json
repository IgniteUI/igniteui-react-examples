{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/gauges/bullet-graph/type-segmented/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { IgrBulletGraph } from 'igniteui-react-gauges';\nimport { IgrLinearGraphRange } from 'igniteui-react-gauges';\nimport { IgrBulletGraphModule } from 'igniteui-react-gauges';\nimport { LinearScaleOrientation } from 'igniteui-react-gauges';\n\nIgrBulletGraphModule.register();\n\nexport default class BulletGraphTypeSegmented extends React.Component {\n\n    constructor(props: any) {\n        super(props);\n\n        this.onCreateGaugeGreen = this.onCreateGaugeGreen.bind(this);\n        this.onCreateGaugeOrange = this.onCreateGaugeOrange.bind(this);\n        this.onCreateGaugeRed = this.onCreateGaugeRed.bind(this);\n    }\n\n    public onCreateGaugeGreen(component: IgrBulletGraph) {\n        this.renderGauge(component, 90, 80, \"#10b401\");\n    }\n    public onCreateGaugeOrange(component: IgrBulletGraph) {\n        this.renderGauge(component, 70, 80, \"#fdb417\");\n    }\n    public onCreateGaugeRed(component: IgrBulletGraph) {\n        this.renderGauge(component, 50, 80, \"#ff0000\");\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\"  >\n                <IgrBulletGraph\n                    ref={this.onCreateGaugeGreen}\n                    height=\"120px\"\n                    width=\"100%\"  />\n                <IgrBulletGraph\n                    ref={this.onCreateGaugeOrange}\n                    height=\"120px\"\n                    width=\"100%\" />\n                <IgrBulletGraph\n                    ref={this.onCreateGaugeRed}\n                    height=\"120px\"\n                    width=\"100%\"  />\n            </div>\n        );\n    }\n\n    public renderGauge(gauge: IgrBulletGraph, value: number, target: number, color: string) {\n\n        if (!gauge) { return; }\n\n        gauge.orientation = LinearScaleOrientation.Horizontal;\n        gauge.backingBrush = \"transparent\";\n        gauge.backingOutline = \"transparent\";\n        gauge.transitionDuration = 500;\n        gauge.minimumValue = 0;\n        gauge.maximumValue = 100;\n        gauge.interval = (gauge.maximumValue - gauge.minimumValue) / 10;\n        gauge.labelInterval = gauge.interval;\n        gauge.labelExtent = 0.15;\n        gauge.formatLabel = (s: any, e: any) => {\n            e.label = e.value + \"%\"\n        };\n\n        gauge.scaleBackgroundBrush   = \"transparent\";\n        gauge.scaleBackgroundOutline = \"transparent\";\n        gauge.scaleStartExtent = 0.05;\n        gauge.scaleEndExtent   = 0.96;\n\n        gauge.value = value;\n        gauge.valueBrush = \"transparent\";\n        gauge.valueOutline = \"transparent\";\n        gauge.valueInnerExtent = 0.3;\n        gauge.valueOuterExtent = 0.85;\n\n        gauge.targetValue = target;\n        gauge.targetValueInnerExtent = gauge.valueInnerExtent - 0.1;\n        gauge.targetValueOuterExtent = gauge.valueOuterExtent + 0.1;\n\n        gauge.ranges.clear();\n        const rangeBG = new IgrLinearGraphRange({});\n        rangeBG.startValue = gauge.minimumValue;\n        rangeBG.endValue   = gauge.maximumValue;\n        rangeBG.brush   = \"#e0dfdf\";\n        rangeBG.outline = \"#e0dfdf\";\n        rangeBG.innerStartExtent  = gauge.valueInnerExtent;\n        rangeBG.innerEndExtent    = gauge.valueInnerExtent;\n        rangeBG.outerStartExtent  = gauge.valueOuterExtent;\n        rangeBG.outerEndExtent    = gauge.valueOuterExtent;\n        gauge.ranges.add(rangeBG);\n\n        const rangeVal = new IgrLinearGraphRange({});\n        rangeVal.startValue = gauge.minimumValue;\n        rangeVal.endValue   = gauge.value;\n        rangeVal.brush   = color;\n        rangeVal.outline = color;\n        rangeVal.innerStartExtent  = gauge.valueInnerExtent;\n        rangeVal.innerEndExtent    = gauge.valueInnerExtent;\n        rangeVal.outerStartExtent  = gauge.valueOuterExtent;\n        rangeVal.outerEndExtent    = gauge.valueOuterExtent;\n        gauge.ranges.add(rangeVal);\n\n        // using major ticks as segment bounds\n        gauge.tickBrush = \"white\";\n        gauge.tickStrokeThickness = 2;\n        gauge.tickStartExtent = gauge.valueInnerExtent;\n        gauge.tickEndExtent   = gauge.valueOuterExtent;\n\n        // using minor ticks as segment bounds\n        gauge.minorTickBrush = \"white\";\n        gauge.minorTickStrokeThickness = 2;\n        gauge.minorTickStartExtent = gauge.valueInnerExtent;\n        gauge.minorTickEndExtent   = gauge.valueOuterExtent;\n        gauge.minorTickCount = (gauge.interval / 2) - 1;\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<BulletGraphTypeSegmented />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/gauges/bullet-graph/type-segmented/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}