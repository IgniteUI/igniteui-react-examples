{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/column-types/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./DataGridStyles.css\";\nimport { DataGridSharedData } from './DataGridSharedData';\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrGridColumnOptionsModule } from 'igniteui-react-grids';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrNumericColumn } from 'igniteui-react-grids';\nimport { IgrDateTimeColumn } from 'igniteui-react-grids';\nimport { IgrImageColumn } from 'igniteui-react-grids';\nimport { IgrTemplateColumn } from 'igniteui-react-grids';\nimport { IgrComboBoxColumn } from 'igniteui-react-grids';\nimport { IgrTemplateCellUpdatingEventArgs,\n\n    IgrGridCellValueChangingEventArgs } from 'igniteui-react-grids';\nimport { IgrTemplateCellInfo } from 'igniteui-react-grids';\nimport { IIgrCellTemplateProps } from 'igniteui-react-grids';\n\nimport { IgrSparkline } from 'igniteui-react-charts';\nimport { IgrSparklineModule } from 'igniteui-react-charts';\n\nIgrDataGridModule.register();\nIgrGridColumnOptionsModule.register();\nIgrSparklineModule.register();\n\nexport default class DataGridColumnTypes extends React.Component<any, any> {\n\n    public data: any[];\n    public grid: IgrDataGrid;\n    public cityList: any[];\n    public cityLookup = new Map<string, any>();\n\n    constructor(props: any) {\n        super(props);\n\n        this.onAddressCellUpdating = this.onAddressCellUpdating.bind(this);\n        this.onSalesCellUpdating = this.onSalesCellUpdating.bind(this);\n        this.onEmailCellUpdating = this.onEmailCellUpdating.bind(this);\n        this.onCellValueChanging = this.onCellValueChanging.bind(this);\n\n        this.data = DataGridSharedData.getEmployees(100);\n        this.cityList = [];\n\n        // iterate all employees and generate a list of cities\n        this.data.forEach(employee => {\n            if(!this.cityLookup.has(employee.City)) {\n                this.cityLookup.set(employee.City, employee);\n                this.cityList.push(employee);\n            }\n        });\n\n        this.onGridRef = this.onGridRef.bind(this);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <IgrDataGrid\n                    ref={this.onGridRef}\n                    height=\"100%\"\n                    width=\"100%\"\n                    rowHeight=\"50\"\n                    autoGenerateColumns=\"false\"\n                    dataSource={this.data}\n                    defaultColumnMinWidth={100}\n                    isColumnOptionsEnabled=\"true\"\n                    cellValueChanging={this.onCellValueChanging}\n                    >\n                    <IgrImageColumn field=\"Photo\" headerText=\"Photo\" contentOpacity=\"1\"\n                    horizontalAlignment=\"stretch\" width=\"130\" paddingTop=\"5\" paddingBottom=\"5\"  paddingRight=\"10\"/>\n                    <IgrTextColumn field=\"Name\" width=\"*>160\"/>\n\n                    <IgrTemplateColumn field=\"Sales\" headerText=\"Sales\" horizontalAlignment=\"center\"\n                    paddingLeft=\"10\" paddingRight=\"0\"\n                        cellUpdating={this.onSalesCellUpdating} width=\"*>180\"/>\n\n                    {/* TODO un-comment this column and getProductivityChart function when editing templated columns is corrected\n                    <IgrTemplateColumn field=\"Productivity\" headerText=\"Productivity\"\n                    horizontalAlignment=\"center\" width=\"*>170\" isEditable=\"false\"\n                    template={this.getProductivityChart} /> */}\n\n                    <IgrNumericColumn field=\"Salary\" positivePrefix=\"$\"\n                    showGroupingSeparator=\"true\" width=\"*>180\"/>\n\n                    <IgrDateTimeColumn field=\"Birthday\" headerText=\"Date of Birth\"\n                    horizontalAlignment=\"stretch\" width=\"*>180\" paddingRight=\"10\"/>\n\n                    <IgrComboBoxColumn field=\"City\" headerText=\"City\" dataSource={this.cityList} textField=\"City\" valueField={[\"City\"]} width=\"*>130\"/>\n\n                    <IgrImageColumn field=\"CountryFlag\" headerText=\"Country Flag\" contentOpacity=\"1\"\n                    horizontalAlignment=\"stretch\" width=\"150\" paddingTop=\"5\" paddingBottom=\"5\" />\n\n                    <IgrTemplateColumn field=\"Address\" headerText=\"Address\" horizontalAlignment=\"left\"\n                        cellUpdating={this.onAddressCellUpdating} width=\"*>180\" />\n\n                    <IgrTemplateColumn field=\"Phone\" horizontalAlignment=\"center\"\n                        cellUpdating={this.onPhoneCellUpdating} width=\"160\" />\n\n                    <IgrTextColumn field=\"Income\" width=\"*>150\" horizontalAlignment=\"center\"/>\n                    <IgrTextColumn field=\"Age\" width=\"*>130\" horizontalAlignment=\"center\"/>\n               </IgrDataGrid>\n            </div>\n        );\n    }\n\n    public onGridRef(grid: IgrDataGrid) {\n        if (!grid) { return; }\n\n        this.grid = grid;\n    }\n\n    // TODO un-comment when editing templated columns is corrected\n\n    // public getProductivityChart(props: IIgrCellTemplateProps) {\n    //     const info = props.dataContext as IgrTemplateCellInfo;\n    //     return (\n    //         <div className=\"container\">\n    //            <IgrSparkline\n    //                height=\"30px\" width=\"100%\"\n    //                displayType=\"Column\"\n    //                dataSource={info.rowItem.Productivity}\n    //                valueMemberPath=\"Value\"\n    //                labelMemberPath=\"Week\"\n    //                lineThickness={2}\n    //                brush=\"rgb(21, 190, 6)\"\n    //                negativeBrush=\"rgb(211, 17, 3)\" />\n    //         </div>\n    //     );\n    // }\n\n    public onAddressCellUpdating(s: IgrTemplateColumn, e: IgrTemplateCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n        let span1: HTMLSpanElement | null = null;\n        let span2: HTMLSpanElement | null = null;\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        const item = info.rowItem;\n\n        if (content.childElementCount === 0) {\n\n            span1 = document.createElement(\"span\");\n            span2 = document.createElement(\"span\");\n\n            content.style.fontFamily = \"Verdana\";\n            content.style.fontSize = \"13px\";\n            content.style.verticalAlign = \"center\";\n            content.style.lineHeight = \"normal\";\n            content.style.display = \"flex\";\n            content.style.flexDirection = \"column\";\n            content.style.justifyContent = \"center\";\n            content.style.height = \"100%\";\n            content.style.width = \"100%\";\n            content.appendChild(span1);\n            content.appendChild(span2);\n        }\n        else {\n            span1 = content.children[0] as HTMLSpanElement;\n            span2 = content.children[1] as HTMLSpanElement;\n        }\n\n        if (span1 && span2) {\n            span1.textContent = item.Street;\n            span2.textContent = item.City + \", \" + item.Country;\n        }\n    }\n\n    public onSalesCellUpdating(s: IgrTemplateColumn, e: IgrTemplateCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        const sales = info.rowItem.Sales;\n        let gaugeValue: HTMLSpanElement | null = null;\n        let gaugeBar: HTMLDivElement | null = null;\n        let gaugeWidth = (sales / 950000) * 100;\n        gaugeWidth = Math.min(100, gaugeWidth);\n\n        if (content.childElementCount === 0) {\n            gaugeValue = document.createElement(\"span\");\n            gaugeValue.style.margin = \"0px\";\n            gaugeValue.style.marginTop = \"2px\";\n            gaugeValue.style.padding = \"0px\";\n            gaugeValue.style.fontFamily = \"Verdana\";\n            gaugeValue.style.fontSize = \"13px\";\n            gaugeValue.style.textAlign = \"center\";\n\n            gaugeBar = document.createElement(\"div\");\n            gaugeBar.style.background = \"#7f7f7f\";\n            gaugeBar.style.padding = \"0px\";\n            gaugeBar.style.margin = \"0px\";\n            gaugeBar.style.height = \"6px\";\n            gaugeBar.style.left = \"0px\";\n            gaugeBar.style.top = \"0px\";\n            gaugeBar.style.position = \"relative\";\n\n            const gauge = document.createElement(\"div\");\n            gauge.style.background = \"#dddddd\";\n            gauge.style.padding = \"0px\";\n            gauge.style.margin = \"0px\";\n            gauge.style.height = \"6px\";\n            gauge.style.marginTop = \"8px\";\n            gauge.style.width = \"100%\";\n            gauge.appendChild(gaugeBar);\n\n            content.style.verticalAlign = \"center\";\n            content.style.lineHeight = \"normal\";\n            content.style.display = \"flex\";\n            content.style.flexDirection = \"column\";\n            content.style.justifyContent = \"center\";\n            content.style.height = \"100%\";\n            content.style.width = \"calc(100% - 2rem)\";\n            content.style.marginRight = \"1rem\";\n            content.style.marginLeft = \"1rem\";\n\n            content.appendChild(gauge);\n            content.appendChild(gaugeValue);\n        } else {\n            const gauge = content.children[0];\n            gaugeBar = gauge.children[0] as HTMLDivElement;\n            gaugeValue = content.children[1] as HTMLSpanElement;\n        }\n\n        // conditional formatting:\n        if (sales < 400000) {\n            gaugeValue.style.color = \"rgb(211, 17, 3)\";\n            gaugeBar.style.background = \"rgb(211, 17, 3)\";\n        }\n        else if (sales < 650000) {\n            gaugeValue.style.color = \"Orange\";\n            gaugeBar.style.background = \"Orange\";\n        }\n        else {\n            gaugeValue.style.color = \"rgb(21, 190, 6)\";\n            gaugeBar.style.background = \"rgb(21, 190, 6)\";\n        }\n        gaugeValue.textContent = \"$\" + sales / 1000 + \",000\";\n        gaugeBar.id = sales + \"_\" + gaugeWidth.toFixed(1);\n        gaugeBar.style.width = gaugeWidth + \"%\";\n    }\n\n    public onEmailCellUpdating(s: IgrTemplateColumn, e: IgrTemplateCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        const item = info.rowItem;\n        let link: HTMLAnchorElement;\n\n        if (content.childElementCount === 0) {\n            link = document.createElement(\"a\");\n\n            content.style.verticalAlign = \"center\";\n            content.style.marginTop = \"15px\";\n            content.style.lineHeight = \"normal\";\n            content.style.display = \"inline-grid\";\n            content.style.fontFamily = \"Verdana\";\n            content.style.fontSize = \"13px\";\n            content.style.color = \"#4286f4\";\n            content.style.width = \"100%\";\n\n            content.appendChild(link);\n        } else {\n            link = content.children[0] as HTMLAnchorElement;\n        }\n\n        link.href = \"mailto:\" + item.Email + \"?Subject=Hello%20Friend\";\n        link.textContent = item.Email;\n    }\n\n    public onPhoneCellUpdating(s: IgrTemplateColumn, e: IgrTemplateCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        const item = info.rowItem;\n        let link: HTMLAnchorElement;\n\n        if (content.childElementCount === 0) {\n\n            link = document.createElement(\"a\");\n\n            content.style.verticalAlign = \"center\";\n            content.style.marginTop = \"15px\";\n            content.style.lineHeight = \"normal\";\n            content.style.display = \"inline-block\";\n            // content.style.display = \"inline-grid\";\n            content.style.fontFamily = \"Verdana\";\n            content.style.fontSize = \"13px\";\n            content.style.color = \"#4286f4\";\n            content.style.width = \"100%\";\n\n            content.appendChild(link);\n        } else {\n            link = content.children[0] as HTMLAnchorElement;\n        }\n\n        link.href = \"tel:\" + item.Phone;\n        link.textContent = item.Phone;\n    }\n\n    public onCellValueChanging(s: IgrDataGrid, e: IgrGridCellValueChangingEventArgs) {\n\n        let row = e.cellInfo.rowItem;\n        if (e.column.field === \"City\")\n        {\n            let employee = this.cityLookup.get(e.newValue);\n\n            if(employee !== undefined) {\n                row.City = employee.City;\n                row.Country = employee.Country;\n                row.Street = employee.Street;\n                row.CountryFlag = employee.CountryFlag;\n                row.Address = employee.Address;\n\n                //required for pushing changes to the grid\n                s.notifySetItem(e.cellInfo.dataRow, row, row);\n            }\n\n        }\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<DataGridColumnTypes />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/column-types/src/DataGridSharedData.ts",
  "content": "\r\n\r\nexport class DataGridSharedData {\r\n\r\n    public static getEmployees(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const employees: any[] = [];\r\n        let maleCount: number = 0;\r\n        let femaleCount: number = 0;\r\n        for (let i = 0; i < count; i++) {\r\n            const age: number = Math.round(this.getRandomNumber(20, 40));\r\n            const gender: string = this.getRandomGender();\r\n            const firstName: string = this.getRandomNameFirst(gender);\r\n            const lastName: string = this.getRandomNameLast();\r\n            const street: string = this.getRandomStreet();\r\n            const country: string = this.getRandomItem(this.countries);\r\n            const city: string = this.getRandomCity(country);\r\n            const generation = Math.floor(age / 10) * 10 + \"s\";\r\n            const email: string = firstName.toLowerCase() + \"@\" + this.getRandomItem(this.emails);\r\n            const website: string = firstName.toLowerCase() + \"-\" + this.getRandomItem(this.websites);\r\n            let photoPath: any;\r\n\r\n            if (gender === \"male\") {\r\n                maleCount++;\r\n                if (maleCount > 26) {\r\n                    maleCount = 1;\r\n                }\r\n                photoPath = this.getPhotoMale(maleCount);\r\n            }\r\n            else {\r\n                femaleCount++;\r\n                if (femaleCount > 24) {\r\n                    femaleCount = 1;\r\n                }\r\n                photoPath = this.getPhotoFemale(femaleCount);\r\n            }\r\n\r\n            let person: any = {};\r\n            person.Address = street + \",\" + city;\r\n            person.Age = age;\r\n            person.Birthday = this.getBirthday(age);\r\n            person.City = city;\r\n            person.Country = country;\r\n            person.CountryFlag = this.getCountryFlag(country);\r\n            person.Email = email;\r\n            person.FirstName = firstName;\r\n            person.Gender = this.getGenderPhoto(gender);\r\n            person.Generation = generation;\r\n            person.ID = this.pad(i + 1, 5);\r\n            person.LastName = lastName;\r\n            person.Name = firstName + \" \" + lastName;\r\n            person.Phone = this.getRandomPhone();\r\n            person.Photo = photoPath;\r\n            person.Street = street;\r\n            person.Salary = this.getRandomNumber(40, 200) * 1000;\r\n            person.Sales = this.getRandomNumber(200, 980) * 1000;\r\n            person.Website = website;\r\n            person.Productivity = this.getProductivity();\r\n\r\n            if (person.Salary < 50000) {\r\n                person.Income = \"Low\";\r\n            } else if (person.Salary < 100000) {\r\n                person.Income = \"Average\";\r\n            } else {\r\n                person.Income = \"High\";\r\n            }\r\n\r\n            employees.push(person);\r\n        }\r\n        return employees;\r\n    }\r\n\r\n    public static getProductivity(weekCount?: number): any[] {\r\n        if (weekCount === undefined) {\r\n            weekCount = 52;\r\n        }\r\n        const productivity: any[] = [];\r\n        for (let w = 0; w < weekCount; w++) {\r\n            const value = this.getRandomNumber(-50, 50);\r\n            productivity.push({Value: value, Week: w});\r\n        }\r\n        return productivity;\r\n    }\r\n\r\n    public static getSales(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const names: string[] = [\r\n            \"Intel CPU\", \"AMD CPU\",\r\n            \"Intel Motherboard\", \"AMD Motherboard\", \"NVIDIA Motherboard\",\r\n            \"NVIDIA GPU\", \"GIGABYTE GPU\", \"Asus GPU\", \"AMD GPU\", \"MSI GPU\",\r\n            \"Corsair Memory\", \"Patriot Memory\", \"Skill Memory\",\r\n            \"Samsung HDD\", \"WD HDD\", \"Seagate HDD\", \"Intel HDD\",\r\n            \"Samsung SSD\", \"WD SSD\", \"Seagate SSD\", \"Intel SSD\",\r\n            \"Samsung Monitor\", \"Asus Monitor\", \"LG Monitor\", \"HP Monitor\" ];\r\n        const countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\"];\r\n        const status: string[] = [\"Packing\", \"Shipped\", \"Delivered\"];\r\n        const sales: any[] = [];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const price = this.getRandomNumber(100, 900);\r\n            const items = this.getRandomNumber(10, 80);\r\n            const value = price * items;\r\n            const margin = this.getRandomNumber(3, 10);\r\n            const profit = Math.round((price * margin / 100) * items);\r\n            const country = this.getRandomItem(countries);\r\n            sales.push({\r\n                BundlePrice: price,\r\n                ProductPrice: price,\r\n                Margin: margin,\r\n                OrderDate: this.getRandomDate(new Date(2012, 0, 1), new Date()),\r\n                OrderItems: items,\r\n                OrderValue: value, //  Math.round(value / 1000) + \",\" + Math.round(value % 1000),\r\n                ProductID: 1001 + i,\r\n                ProductName: this.getRandomItem(names),\r\n                Profit: profit,\r\n                Countries: country,\r\n                CountryFlag: this.getCountryFlag(country),\r\n                Status: this.getRandomItem(status)\r\n            });\r\n        }\r\n        return sales;\r\n    }\r\n\r\n    public static getHouses(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const houses: any[] = [];\r\n        const property: string[] = [ \"Townhouse\", \"Single\", \"Condo\", \"Villa\"];\r\n        const emails: string[] = [ \"estates.com\", \"remax.com\", \"zillow.com\", \"realtor.com\", \"coldwell.com\"];\r\n        const countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\"];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const year: number = this.getRandomNumber(1950, 2015);\r\n            const age: number = 2020 - year;\r\n\r\n            const gender: string = this.getRandomGender();\r\n            const firstName: string = this.getRandomNameFirst(gender);\r\n            const lastName: string = this.getRandomNameLast();\r\n            const initials = firstName.substr(0, 1).toLowerCase();\r\n            const email: string = initials + lastName.toLowerCase() + \"@\" + this.getRandomItem(emails);\r\n\r\n            const street: string = this.getRandomStreet();\r\n            const country: string = this.getRandomItem(countries);\r\n            const city: string = this.getRandomCity(country);\r\n\r\n            houses.push({\r\n                Address: street + \",\" + city,\r\n                Age: age,\r\n                Agent: firstName + \" \" + lastName,\r\n                Area: this.getRandomNumber(50, 300),\r\n                Baths: this.getRandomNumber(1, 3),\r\n                Built: year,\r\n                City: city,\r\n                Country: country,\r\n                CountryFlag: this.getCountryFlag(country),\r\n                Email: email,\r\n                ID: this.pad(i + 1, 5),\r\n                Phone: this.getRandomPhone(),\r\n                Price: this.getRandomNumber(210, 900) * 1000,\r\n                Property: this.getRandomItem(property),\r\n                Rooms: this.getRandomNumber(2, 5),\r\n                SaleDate: this.getRandomDate(new Date(2015, 0, 1), new Date()),\r\n                Street: street,\r\n            });\r\n        }\r\n        return houses;\r\n    }\r\n\r\n    private static websites: string[] = [ \".com\", \".gov\", \".edu\", \".org\"];\r\n    private static emails: string[] = [ \"gmail.com\", \"yahoo.com\", \"twitter.com\"];\r\n    private static genders: string[] = [\"male\", \"female\"];\r\n    private static maleNames: string[] = [\"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\"];\r\n    private static femaleNames: string[] = [\"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\"];\r\n    private static lastNames: string[] = [\"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\"];\r\n    private static countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\"];\r\n    private static citiesUS: string[] = [\"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\"];\r\n    private static citiesUK: string[] = [\"London\", \"Liverpool\", \"Manchester\"];\r\n    private static citiesFR: string[] = [\"Paris\", \"Marseille\", \"Lyon\"];\r\n    private static citiesCA: string[] = [\"Toronto\", \"Vancouver\", \"Montreal\"];\r\n    private static citiesPL: string[] = [\"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\"];\r\n    private static citiesJP: string[] = [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\"];\r\n    private static citiesGR: string[] = [\"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\"];\r\n    private static roadSuffixes: string[] = [\"Road\", \"Street\", \"Way\"];\r\n    private static roadNames: string[] = [\"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\"];\r\n\r\n    private static getRandomNumber(min: number, max: number): number {\r\n        return Math.round(min + Math.random() * (max - min));\r\n    }\r\n\r\n    private static getRandomItem(array: any[]): any {\r\n        const index = Math.round(this.getRandomNumber(0, array.length - 1));\r\n        return array[index];\r\n    }\r\n\r\n    private static getRandomDate(start: Date, end: Date): Date {\r\n        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r\n    }\r\n\r\n    private static getRandomPhone(): string {\r\n        const phoneCode = this.getRandomNumber(100, 900);\r\n        const phoneNum1 = this.getRandomNumber(100, 900);\r\n        const phoneNum2 = this.getRandomNumber(1000, 9000);\r\n        const phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\r\n        return phone;\r\n    }\r\n\r\n    private static getRandomGender(): string {\r\n        return this.getRandomItem(this.genders);\r\n    }\r\n\r\n    private static getRandomNameLast(): string {\r\n        return this.getRandomItem(this.lastNames);\r\n    }\r\n\r\n    private static getRandomNameFirst(gender: string): string {\r\n        if (gender === \"male\") {\r\n            return this.getRandomItem(this.maleNames);\r\n        }\r\n        else {\r\n            return this.getRandomItem(this.femaleNames);\r\n        }\r\n    }\r\n\r\n    private static getRandomCity(country: string): string {\r\n        if (country === \"Canada\") {\r\n            return this.getRandomItem(this.citiesCA);\r\n        } else if (country === \"France\") {\r\n            return this.getRandomItem(this.citiesFR);\r\n        } else if (country === \"Poland\") {\r\n            return this.getRandomItem(this.citiesPL);\r\n        } else if (country === \"USA\") {\r\n            return this.getRandomItem(this.citiesUS);\r\n        } else if (country === \"Japan\") {\r\n            return this.getRandomItem(this.citiesJP);\r\n        } else if (country === \"Germany\") {\r\n            return this.getRandomItem(this.citiesGR);\r\n        } else { // if (country === \"United Kingdom\") {\r\n            return this.getRandomItem(this.citiesUK);\r\n        }\r\n    }\r\n\r\n    private static getRandomStreet(): string {\r\n        const num = Math.round(this.getRandomNumber(100, 300)).toString();\r\n        const road = this.getRandomItem(this.roadNames);\r\n        const suffix = this.getRandomItem(this.roadSuffixes);\r\n        return num + \" \" + road + \" \" + suffix;\r\n    }\r\n\r\n    private static getBirthday(age: number): Date {\r\n        const today: Date = new Date();\r\n        const year: number = today.getFullYear() - age;\r\n        const month: number = this.getRandomNumber(0, 8);\r\n        const day: number = this.getRandomNumber(10, 27);\r\n        return new Date(year, month, day);\r\n    }\r\n\r\n    private static getPhotoMale(id: number): string {\r\n        return 'https://static.infragistics.com/xplatform/images/people//GUY' + this.pad(id, 2) + '.png';\r\n    }\r\n\r\n    private static getPhotoFemale(id: number): string {\r\n        return 'https://static.infragistics.com/xplatform/images/people/GIRL' + this.pad(id, 2) + '.png';\r\n    }\r\n\r\n    private static getGenderPhoto(gender: string): string {\r\n        return 'https://static.infragistics.com/xplatform/images/genders/' + gender + '.png';\r\n    }\r\n\r\n    private static getCountryFlag(country: string): string {\r\n        return 'https://static.infragistics.com/xplatform/images/flags/' + country + '.png';\r\n    }\r\n\r\n    private static pad(num: number, size: number): string{\r\n        let s = num + \"\";\r\n        while (s.length < size) {\r\n            s = \"0\" + s;\r\n        }\r\n        return s;\r\n    }\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/column-types/src/DataGridStyles.css",
  "content": "\r\n.gridSparklineContainer {\r\n    background: White;\r\n    height: 100%;\r\n    width: 100%;\r\n    margin-top: 10px;\r\n    margin-bottom: 0px;\r\n    padding: 0px;\r\n    vertical-align: middle;\r\n}\r\n",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/column-types/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}