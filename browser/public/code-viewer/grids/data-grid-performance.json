{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/performance/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrColumn } from 'igniteui-react-grids';\nimport { IgrCellStyleRequestedEventArgs } from 'igniteui-react-grids';\nimport { IgrDataBindingEventArgs } from 'igniteui-react-grids';\nimport { HeaderClickAction } from 'igniteui-react-grids';\nimport { GridSelectionMode } from 'igniteui-react-grids';\nimport { IgrColumnGroupDescription } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrNumericColumn } from 'igniteui-react-grids';\nimport { IgrTemplateColumn, IIgrCellTemplateProps } from 'igniteui-react-grids';\nimport { IgrTemplateCellUpdatingEventArgs } from 'igniteui-react-grids';\nimport { IgrTemplateCellInfo } from 'igniteui-react-grids';\nimport { IgrDateTimeColumn } from 'igniteui-react-grids';\n\nIgrDataGridModule.register();\n\nexport default class DataGridPerformance extends React.Component<any, any> {\n\n    public constructor(props: any) {\n        super(props);\n\n        this.data = this.generateSalesPeople(8000);\n        this.tick = this.tick.bind(this);\n\n        this.onPriceStyleKey = this.onPriceStyleKey.bind(this);\n        this.onPriceCellUpdating = this.onPriceCellUpdating.bind(this);\n        this.onChartStyleKey = this.onChartStyleKey.bind(this);\n        this.onChartCellUpdating = this.onChartCellUpdating.bind(this);\n        this.onGridStyleKey = this.onGridStyleKey.bind(this);\n        this.onGridCellUpdating = this.onGridCellUpdating.bind(this);\n        this.onGridRef = this.onGridRef.bind(this);\n        this.onPricePercentStyleKey = this.onPricePercentStyleKey.bind(this);\n        this.onPricePercentCellUpdating = this.onPricePercentCellUpdating.bind(this);\n        this.onPriceAmountStyleKey = this.onPriceAmountStyleKey.bind(this);\n        this.onPriceAmountCellUpdating = this.onPriceAmountCellUpdating.bind(this);\n\n        for (let i = 0; i < 43; i++) {\n            this.kpiColumns.push(\"KPI_\" + i);\n        }\n    }\n\n    public onGridRef(grid: IgrDataGrid) {\n        if (!grid) { return; }\n\n        this.grid = grid;\n    }\n\n    public kpiColumns: string[] = [];\n    public data: SalesPerson[];\n    public colorIncreasing = \"#4EB862\";\n    public colorDecreasing = \"#FF134A\";\n\n    public onPriceStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        let row: SalesPerson;\n        if (this.grid) {\n            row = this.grid.actualDataSource.getItemAtIndex(args.rowNumber);\n        } else {\n            row = this.data[args.rowNumber];\n        }\n        if (row.Change >= 0) {\n            args.styleKey = \"priceShiftUp\";\n        } else {\n            args.styleKey = \"priceShiftDown\";\n        }\n    }\n\n    public onPriceCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let row = args.cellInfo.rowItem;\n        let priceShiftUp = row.Change >= 0;\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n\n        let content = args.content as HTMLDivElement;\n        let sp: HTMLSpanElement | null = null;\n        let icon: HTMLSpanElement | null = null;\n\n        if (content.childElementCount > 0) {\n            sp = content.children[0] as HTMLSpanElement;\n            icon = content.children[1] as HTMLSpanElement;\n        } else {\n            content.style.textAlign = \"right\";\n            sp = document.createElement(\"span\");\n            icon = document.createElement(\"span\");\n            sp.style.font = \"13px Verdana\";\n            sp.style.verticalAlign = \"center\";\n            content.appendChild(sp);\n            content.appendChild(icon);\n            icon.style.fontFamily = \"Material Icons\";\n            icon.style.fontSize = \"13px\";\n            icon.style.fontFeatureSettings = \"liga\";\n            icon.style.verticalAlign = \"center\";\n        }\n\n        sp.textContent = \"$\" + (+templ.value).toFixed(2);\n\n        if ((sp as any).__isUp === undefined ||\n            (sp as any).__isUp !== priceShiftUp) {\n            (sp as any).__isUp = priceShiftUp;\n            if (priceShiftUp) {\n                // icon.textContent = \"trending_up\";\n                icon.style.color = this.colorIncreasing;\n                sp.style.color = this.colorIncreasing;\n            } else {\n            // icon.textContent = \"trending_down\";\n                icon.style.color = this.colorDecreasing;\n                sp.style.color = this.colorDecreasing;\n            }\n        }\n    }\n\n    public onPricePercentStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        if (args.resolvedValue >= 0) {\n            args.styleKey = \"pricePercentUp\";\n        } else {\n            args.styleKey = \"pricePercentDown\";\n        }\n    }\n\n    public borderDecreasing = \"4px solid #FF134A\";\n    public borderIncreasing = \"4px solid #4EB862\";\n\n    public onPricePercentCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n        let priceShiftUp = templ.value >= 0;\n\n        let content = args.content as HTMLDivElement;\n        let sp: HTMLSpanElement | null = null;\n\n        if (content.childElementCount > 0) {\n            sp = content.children[0] as HTMLSpanElement;\n        } else {\n            content.style.textAlign = \"right\";\n            sp = document.createElement(\"span\");\n            sp.style.font = \"13px Verdana\";\n            sp.style.verticalAlign = \"center\";\n            content.appendChild(sp);\n        }\n\n        sp.textContent = (+templ.value).toFixed(2) + \"%\";\n        if ((sp as any).__isUp === undefined ||\n            (sp as any).__isUp !== priceShiftUp) {\n            (sp as any).__isUp = priceShiftUp;\n            if (priceShiftUp) {\n            sp.style.paddingRight = \"5px\";\n            sp.style.borderRight = this.borderIncreasing;\n            // sp.style.color = this.colorIncreasing;\n            } else {\n            sp.style.paddingRight = \"5px\";\n            sp.style.borderRight = this.borderDecreasing;\n            // sp.style.color = this.colorDecreasing;\n            }\n        }\n    }\n\n    public onPriceAmountStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        if (args.resolvedValue >= 0) {\n            args.styleKey = \"priceAmountUp\";\n        } else {\n            args.styleKey = \"priceAmountDown\";\n        }\n    }\n\n    public onPriceAmountCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n        let priceShiftUp = templ.value >= 0;\n\n        let content = args.content as HTMLDivElement;\n        let sp: HTMLSpanElement | null = null;\n\n        if (content.childElementCount > 0) {\n            sp = content.children[0] as HTMLSpanElement;\n        } else {\n            content.style.textAlign = \"right\";\n            sp = document.createElement(\"span\");\n            sp.style.font = \"13px Verdana\";\n            sp.style.verticalAlign = \"center\";\n            content.appendChild(sp);\n        }\n\n        sp.textContent = (+templ.value).toFixed(2);\n\n        if ((sp as any).__isUp === undefined ||\n            (sp as any).__isUp !== priceShiftUp) {\n            (sp as any).__isUp = priceShiftUp;\n            if (priceShiftUp) {\n            sp.style.paddingRight = \"5px\";\n            sp.style.borderRight = this.borderIncreasing;\n            // sp.style.color = this.colorIncreasing;\n            } else {\n            sp.style.paddingRight = \"5px\";\n            sp.style.borderRight = this.borderDecreasing;\n            // sp.style.color = this.colorDecreasing;\n            }\n        }\n    }\n\n    public onChartStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        args.styleKey = \"container\";\n    }\n\n    public onChartCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n\n        let content = args.content as HTMLDivElement;\n        let icon: HTMLSpanElement | null = null;\n\n        if (content.childElementCount > 0) {\n            icon = content.children[0] as HTMLSpanElement;\n            icon.onclick = (e) => {\n                // console.log(\"chart clicked!!\")\n                e.stopPropagation();\n            }\n        } else {\n            icon = document.createElement(\"span\");\n            content.appendChild(icon);\n            icon.style.fontFamily = \"Material Icons\";\n            icon.style.fontSize = \"13px\";\n            icon.style.fontFeatureSettings = \"liga\";\n            icon.style.verticalAlign = \"center\";\n            icon.textContent = \"insert_chart_outlined\";\n        }\n    }\n\n    public onGridStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        args.styleKey = \"grid\";\n    }\n\n    public onGridCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n\n        let content = args.content as HTMLDivElement;\n        let icon: HTMLSpanElement | null = null;\n\n        if (content.childElementCount > 0) {\n            icon = content.children[0] as HTMLSpanElement;\n            icon.onclick = (e) => {\n                // console.log(\"grid clicked!!\")\n                e.stopPropagation();\n            }\n        } else {\n            icon = document.createElement(\"span\");\n            content.appendChild(icon);\n            icon.style.fontFamily = \"Material Icons\";\n            icon.style.fontSize = \"13px\";\n            icon.style.fontFeatureSettings = \"liga\";\n            icon.style.verticalAlign = \"center\";\n            icon.textContent = \"table_chart\";\n        }\n    }\n\n    public TestTemplateContent(props: IIgrCellTemplateProps) {\n        let tmpl = props.dataContext as IgrTemplateCellInfo;\n        let font = tmpl.font;\n        return (\n            <div style={{\n            textAlign: tmpl.resolvedTextAlign,\n            font: font,\n            opacity: tmpl.resolvedContentOpacity }}>\n            <label>{tmpl.value}</label>\n            </div>\n        );\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <IgrDataGrid\n                width=\"100%\"\n                height=\"100%\"\n                autoGenerateColumns=\"false\"\n                headerClickAction={HeaderClickAction.SortByMultipleColumnsTriState}\n                rowHeight=\"40\"\n                selectionMode={GridSelectionMode.MultipleRow}\n                defaultColumnMinWidth=\"80\"\n                columnShowingAnimationMode=\"auto\"\n                columnHidingAnimationMode=\"auto\"\n                isRowHoverEnabled=\"false\"\n                dataSource={this.data}\n                ref={this.onGridRef}>\n\n                <IgrTextColumn field=\"FirstName\" headerText=\"First Name\" width=\"*>130\"></IgrTextColumn>\n                <IgrTextColumn field=\"LastName\" headerText=\"Last Name\" width=\"*>130\"></IgrTextColumn>\n                <IgrTextColumn field=\"Territory\" width=\"*>130\"></IgrTextColumn>\n                <IgrNumericColumn field=\"YearToDateSales\"\n                    headerText=\"YTD Sales\" width=\"*>130\" positivePrefix=\"$\"\n                    showGroupingSeparator=\"true\">\n                </IgrNumericColumn>\n\n                <IgrTemplateColumn field=\"AvgSale\"\n                    headerText=\"Avg. Sale\"\n                    width=\"*>120\"\n                    horizontalAlignment=\"right\"\n                    cellStyleKeyRequested={this.onPriceStyleKey}\n                    cellUpdating={this.onPriceCellUpdating} >\n                </IgrTemplateColumn>\n\n                <IgrTemplateColumn field=\"Change\" width=\"*>120\"\n                    horizontalAlignment=\"right\"\n                    cellStyleKeyRequested={this.onPriceAmountStyleKey}\n                    cellUpdating={this.onPriceAmountCellUpdating}>\n                </IgrTemplateColumn>\n\n                <IgrTemplateColumn field=\"PercentChange\" width=\"*>140\"\n                    horizontalAlignment=\"right\" headerText=\"Change (%)\"\n                    cellStyleKeyRequested={this.onPricePercentStyleKey}\n                    cellUpdating={this.onPricePercentCellUpdating}>\n                </IgrTemplateColumn>\n\n                <IgrDateTimeColumn field=\"DateValue\" headerText=\"Date\" width=\"*>120\" >\n                </IgrDateTimeColumn>\n\n                {\n                    this.kpiColumns.map(function (i) {\n                    return ( <IgrNumericColumn width=\"*>150\" key={i} field={i} /> )\n                    })\n                }\n\n                </IgrDataGrid>\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        let g = new IgrColumnGroupDescription();\n        g.field = \"Territory\";\n        this.grid.groupDescriptions.add(g);\n\n        for (let i = 0; i < 43; i++) {\n            (() => {\n                let currVal = i;\n                this.grid.forColumnsWithPropertyPath(\"KPI_\" + currVal, (col: IgrColumn) => {\n                    col.cellStyleKeyRequested = (sender: any, args: IgrCellStyleRequestedEventArgs) => {\n                    let value = args.resolvedValue;\n                    if (value < 20.0) {\n                        args.styleKey = \"kpi_red\";\n                    } else if (value > 80.0) {\n                        args.styleKey = \"kpi_green\";\n                    }\n                    };\n\n                    col.dataBound = (sender: any, args: IgrDataBindingEventArgs) => {\n                        let value = args.resolvedValue;\n                        if (value < 20.0) {\n                            if (args.cellInfo.background !== \"red\") {\n                                args.cellInfo.background = this.colorDecreasing;\n                            }\n                        }\n\n                        if (value > 80.0) {\n                            if (args.cellInfo.background !== \"green\") {\n                                args.cellInfo.background = this.colorIncreasing;\n                            }\n                        }\n                    };\n                });\n            })();\n    }\n\n    this.grid.forColumnsWithPropertyPath(\"AvgSale\", (col: IgrColumn) => {\n        col.dataBound = (sender: any, args: IgrDataBindingEventArgs) => {\n                    let item: any = args.cellInfo.rowItem;\n                    if (item !== null)\n                    {\n                        if (item.AvgSaleHeat > 0)\n                        {\n                            let p = +item.AvgSaleHeat;\n                            let toA = 1.0;\n                            let fromA = 1.0;\n                            let toR = 0.0;\n                            let fromR = 1.0;\n                            let toG = 1.0;\n                            let fromG = 1.0;\n                            let toB = 0.0;\n                            let fromB = 1.0;\n\n                            let aByte = fromA + (toA - fromA) * p;\n                            let rByte = Math.round((fromR + (toR - fromR) * p) * 255.0);\n                            let gByte = Math.round((fromG + (toG - fromG) * p) * 255.0);\n                            let bByte = Math.round((fromB + (toB - fromB) * p) * 255.0);\n\n                            let colorString = \"rgba(\" + rByte + \",\" + gByte + \",\" + bByte + \",\" + aByte + \")\";\n\n                            args.cellInfo.background = colorString;\n            }\n            else if (item.AvgSaleHeat < 0) {\n                let p = +item.AvgSaleHeat * -1.0;\n                            let toA = 1.0;\n                            let fromA = 1.0;\n                            let toR = 1.0;\n                            let fromR = 1.0;\n                            let toG = 0.0;\n                            let fromG = 1.0;\n                            let toB = 0.0;\n                            let fromB = 1.0;\n\n                            let aByte = fromA + (toA - fromA) * p;\n                            let rByte = Math.round((fromR + (toR - fromR) * p) * 255.0);\n                            let gByte = Math.round((fromG + (toG - fromG) * p) * 255.0);\n                            let bByte = Math.round((fromB + (toB - fromB) * p) * 255.0);\n\n                            let colorString = \"rgba(\" + rByte + \",\" + gByte + \",\" + bByte + \",\" + aByte + \")\";\n\n                            args.cellInfo.background = colorString;\n            }\n                        else\n                        {\n                            let colorString = \"white\";\n                            args.cellInfo.background = colorString;\n                        }\n                    }\n                };\n        });\n\n    window.setTimeout(this.tick, 16);\n    }\n\n    public lastDataUpdate: Date = new Date();\n    public interval: number = 100;\n\n    private randomizeItem(item: SalesPerson) {\n        item.Change = Math.random() * 40.0 - 20.0;\n        let prevSale = item.AvgSale;\n\n        item.AvgSale += item.Change;\n        item.PercentChange = ((item.AvgSale / prevSale) * 100.0);\n    }\n\n    private tick()\n    {\n        let sortedBySales = false;\n        // foreach (let item in grid.SortDescriptions)\n        // {\n        // \tif (item.PropertyName === \"YearToDateSales\")\n        // \t{\n        // \t\tsortedBySales = true;\n        // \t}\n        // }\n\n        let toChange = 200;\n        let toChangeIndexes = {};\n        let stillAnimating = false;\n        for (let i = 0; i < this.data.length; i++)\n        {\n            let item = this.data[i];\n            if (item.AvgSaleHeat !== 0)\n            {\n                stillAnimating = true;\n            }\n        }\n\n        let now = new Date();\n        let intervalElapsed = false;\n        if ((+now - +this.lastDataUpdate) > this.interval) {\n            intervalElapsed = true;\n        }\n\n        let useClear = false;\n        let sortingByAvgSale = false;\n        for (let i = 0; i < this.grid.sortDescriptions.count; i++) {\n            if (this.grid.sortDescriptions.item(i).field === \"AvgSale\" ||\n                this.grid.sortDescriptions.item(i).field.indexOf(\"Change\") >= 0) {\n                sortingByAvgSale = true;\n            }\n        }\n\n        let changing = false;\n        if (intervalElapsed)\n        {\n            this.lastDataUpdate = new Date();\n            for (let i = 0; i < toChange; i++)\n            {\n                let index = Math.round(Math.random() * this.data.length - 1);\n                while (toChangeIndexes[index.toString()] !== undefined)\n                {\n                    index = Math.round(Math.random() * this.data.length - 1);\n                }\n                toChangeIndexes[index.toString()] = true;\n                changing = true;\n            }\n        }\n\n        for (let i = 0; i < this.data.length; i++)\n        {\n            let item = this.data[i];\n            if (toChangeIndexes[i.toString()] !== undefined)\n            {\n                if (sortingByAvgSale && !useClear) {\n\n                this.grid.notifyRemoveItem(i, item);\n                this.randomizeItem(item);\n                this.grid.notifyInsertItem(i, item);\n                } else {\n                    this.randomizeItem(item);\n                }\n\n                if (item.Change > 0) {\n                    // item.YearToDateSales += Math.round(Math.random() * 4.0);\n                    item.AvgSaleHeat = 1;\n                } else {\n                    item.AvgSaleHeat = -1;\n                }\n            }\n            else\n            {\n                if (item.AvgSaleHeat > 0)\n                {\n                    item.AvgSaleHeat -= .06;\n                    if (item.AvgSaleHeat < 0)\n                    {\n                        item.AvgSaleHeat = 0;\n                    }\n                }\n                if (item.AvgSaleHeat < 0) {\n                    item.AvgSaleHeat += .06;\n                    if (item.AvgSaleHeat > 0) {\n                        item.AvgSaleHeat = 0;\n                    }\n                }\n            }\n        }\n\n        if (sortingByAvgSale && useClear) {\n            this.grid.actualDataSource.queueAutoRefresh();\n        }\n\n        // if (!sortingByPrice) {\n            // if (!useClear) {\n        if (!sortingByAvgSale || !intervalElapsed) {\n            this.grid.invalidateVisibleRows();\n        }\n            // }\n        // }\n        // this.grid.invalidateVisibleRows();\n        // actualDataSource.queueAutoRefresh();\n\n        window.setTimeout(() => this.tick(), 16);\n\n    }\n\n    private generateSalesPeople(num: number) {\n        let firstNames = [\n            \"Kyle\",\n            \"Gina\",\n            \"Irene\",\n            \"Katie\",\n            \"Michael\",\n            \"Oscar\",\n            \"Ralph\",\n            \"Torrey\",\n            \"William\",\n            \"Bill\",\n            \"Daniel\",\n            \"Frank\",\n            \"Brenda\",\n            \"Danielle\",\n            \"Fiona\",\n            \"Howard\",\n            \"Jack\",\n            \"Larry\",\n            \"Holly\",\n            \"Jennifer\",\n            \"Liz\",\n            \"Pete\",\n            \"Steve\",\n            \"Vince\",\n            \"Zeke\"\n        ];\n\n        let lastNames = [\n            \"Adams\",\n        \"Crowley\",\n        \"Ellis\",\n        \"Gable\",\n        \"Irvine\",\n        \"Keefe\",\n        \"Mendoza\",\n        \"Owens\",\n        \"Rooney\",\n        \"Waddell\",\n        \"Thomas\",\n        \"Betts\",\n        \"Doran\",\n        \"Fitzgerald\",\n        \"Holmes\",\n        \"Jefferson\",\n        \"Landry\",\n        \"Newberry\",\n        \"Perez\",\n        \"Spencer\",\n        \"Vargas\",\n        \"Grimes\",\n        \"Edwards\",\n        \"Stark\",\n        \"Cruise\",\n        \"Fitz\",\n        \"Chief\",\n        \"Blanc\",\n        \"Perry\",\n        \"Stone\",\n        \"Williams\",\n        \"Lane\",\n        \"Jobs\"\n        ];\n\n        let genders = [\n            \"GUY\",\n            \"GIRL\",\n            \"GIRL\",\n            \"GIRL\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GIRL\",\n            \"GIRL\",\n            \"GIRL\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GIRL\",\n            \"GIRL\",\n            \"GIRL\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\",\n            \"GUY\"\n        ];\n\n        let territories = [\n            \"Australia\",\n            \"Canada\",\n            \"Egypt\",\n            \"Greece\",\n            \"Italy\",\n            \"Kenya\",\n            \"Mexico\",\n            \"Oman\",\n            \"Qatar\",\n            \"Sweden\",\n            \"Uruguay\",\n            \"Yemen\",\n            \"Bulgaria\",\n            \"Denmark\",\n            \"France\",\n            \"Hungary\",\n            \"Japan\",\n            \"Latvia\",\n            \"Netherlands\",\n            \"Portugal\",\n            \"Russia\",\n            \"Turkey\",\n            \"Venezuela\",\n            \"Zimbabwe\"\n        ];\n\n        // let min = 10;\n        // let max = 35;\n\n        let items = [];\n        for (let i = 0; i < num; i++)\n        {\n            let item = new SalesPerson();\n            let firstIndex = Math.round(Math.random() * (firstNames.length - 1));\n            item.Index = i;\n            item.FirstName = firstNames[firstIndex];\n            item.LastName = lastNames[Math.round(Math.random() * (lastNames.length - 1))];\n            item.Name = item.FirstName + item.LastName;\n\n            let randomIndex = Math.round(Math.random() * (firstNames.length - 1));\n            if (randomIndex === 0)\n                randomIndex = 1;\n\n            let value = randomIndex.toString();\n            if (randomIndex < 10)\n                value = \"0\" + value;\n            item.ImageName = this.createUri(genders[firstIndex] + value + \".png\");\n            item.Territory = territories[Math.round(Math.random() * (territories.length - 1))];\n            item.AvgSale = Math.round(Math.random() * 800) + 200.0;\n            item.Change = Math.random() * 40.0 - 20.0;\n            item.PercentChange = 0;\n            item.YearToDateSales = Math.round(Math.random() * 50000);\n\n            item.DateValue = new Date();\n            item.DateValue.setDate(item.DateValue.getDate() + Math.round(Math.random() * 500))\n\n            for (let j = 0; j < 43; j++) {\n                item[\"KPI_\" + j] = Math.round(Math.random() * 100.0);\n            }\n\n            items.push(item);\n        }\n\n        return items;\n    }\n\n    private createUri(val: string): string {\n        return \"https://static.infragistics.com/xplatform/images/people/\" + val;\n    }\n\n    // private title = 'app';\n    // @ViewChild(IgxDataChartComponent)\n    // chart: IgxDataChartComponent;\n    // private bigData: any[];\n    // private data: any[];\n\n    // private financialData: any[];\n    // private context = {\n    //     name: \"name\",\n    //     value: \"value-0\"\n    // };\n    // private finData: any[];\n    private grid: IgrDataGrid;\n\n}\n\nexport class SalesPerson {\n    public FirstName: string;\n    public LastName: string;\n    public Name: string;\n    public ImageName: string;\n    public Territory: string;\n    public Index: number;\n    public AvgSale: number;\n    public AvgSaleHeat: number;\n    public Change: number;\n    public PercentChange: number;\n    public YearToDateSales: number;\n    public DateValue: Date;\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<DataGridPerformance />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/performance/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}