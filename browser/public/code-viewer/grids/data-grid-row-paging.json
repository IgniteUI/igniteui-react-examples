{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/row-paging/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { DataGridSharedData } from './DataGridSharedData';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrNumericColumn } from 'igniteui-react-grids';\nimport { IgrDateTimeColumn } from 'igniteui-react-grids';\nimport { IgrColumnGroupDescription } from 'igniteui-react-grids';\nimport { ListSortDirection } from 'igniteui-react-core';\nimport { DataGridPager } from './DataGridPager';\nimport { IgrGridColumnOptionsModule } from 'igniteui-react-grids';\n\nIgrDataGridModule.register();\nIgrGridColumnOptionsModule.register();\n\nexport default class DataGridRowPaging extends React.Component<any, any> {\n\n    private data: any[];\n    private grid: IgrDataGrid;\n    private pager: DataGridPager;\n\n    constructor(props: any) {\n        super(props);\n\n        this.onGridRef = this.onGridRef.bind(this);\n        this.onPagerRef = this.onPagerRef.bind(this);\n        this.data = DataGridSharedData.getEmployees();\n    }\n\n    public onGridRef(grid: IgrDataGrid) {\n        if (!grid) { return; }\n\n        this.grid = grid;\n\n        const desc = new IgrColumnGroupDescription();\n        desc.field = \"Country\";\n        desc.displayName = \"Country\";\n        desc.sortDirection = ListSortDirection.Descending;\n        this.grid.groupDescriptions.add(desc);\n    }\n    public onPagerRef(pager: DataGridPager) {\n        if (!pager) { return; }\n\n        this.pager = pager;\n\n        if (this.grid) {\n            if (this.grid.sortDescriptions.count > 0) {\n                this.onSortChanged();\n            }\n            if (this.grid.groupDescriptions.count > 0) {\n                this.onGroupChanged();\n            }\n            if (this.grid.filterExpressions.size() > 0) {\n                this.onFilterChanged();\n            }\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <IgrDataGrid\n                    ref={this.onGridRef}\n                    width=\"100%\"\n                    height=\"calc(100% - 65px)\"\n                    autoGenerateColumns={false}\n                    sortDescriptionsChanged={this.onSortChanged}\n                    groupDescriptionsChanged={this.onGroupChanged}\n                    filterExpressionsChanged={this.onFilterChanged}\n                    isColumnOptionsEnabled=\"true\">\n                    <IgrTextColumn field=\"FirstName\" headerText=\"First Name\" width=\"*>150\" />\n                    <IgrTextColumn field=\"LastName\" headerText=\"Last Name\" width=\"*>150\" />\n                    <IgrTextColumn field=\"Street\" headerText=\"Street\" width=\"*>160\" />\n                    <IgrTextColumn field=\"City\" headerText=\"City\" width=\"*>120\"/>\n                    <IgrNumericColumn field=\"Salary\" width=\"*>120\" headerText=\"Salary\" positivePrefix=\"$\" showGroupingSeparator=\"true\" />\n                    <IgrNumericColumn field=\"Sales\" width=\"*>120\" headerText=\"Sales\" positivePrefix=\"$\" showGroupingSeparator=\"true\" />\n                    <IgrDateTimeColumn field=\"Birthday\" width=\"*>170\" headerText=\"Date of Birth\" />\n                    <IgrNumericColumn field=\"Age\" width=\"*>120\" headerText=\"Age\" />\n                </IgrDataGrid>\n\n                <DataGridPager\n                    ref={this.onPagerRef}\n                    dataSource={this.data}\n                    pageSize={20}\n                    pagedChanged={this.onPageChanged}/>\n            </div>\n        );\n    }\n\n    private onSortChanged = () => {\n        if (this.pager) {\n            this.pager.applySorts(this.grid.sortDescriptions);\n        }\n    }\n    private onGroupChanged = () => {\n        if (this.pager) {\n            this.pager.applyGroups(this.grid.groupDescriptions);\n        }\n    }\n    private onFilterChanged = () => {\n        if (this.pager) {\n            this.pager.applyFilters(this.grid.filterExpressions);\n        }\n    }\n    private onPageChanged = (pageNumber: number, data: any[]) => {\n        this.grid.dataSource = data;\n        this.grid.flush();\n        this.grid.scrollToRowByIndex(0);\n    };\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<DataGridRowPaging />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/row-paging/src/DataGridPager.css",
  "content": ".pager-root {\r\n    height: 50px;\r\n    padding: 5px 0px;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.26);\r\n    background: #f4f4f4;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.pager-root > * {\r\n    margin: 0px 5px;\r\n}\r\n.pager-text {\r\n    width: 80px;\r\n    text-align: center;\r\n}\r\n\r\n.icon-button {\r\n    display: flex;\r\n    user-select: none;\r\n    cursor: pointer;\r\n}\r\n\r\n.icon-button-disable {\r\n    cursor: default;\r\n    pointer-events: none;\r\n    color: rgba(0, 0, 0, 0.26);\r\n}",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/row-paging/src/DataGridPager.tsx",
  "content": "import * as React from 'react';\r\nimport { LocalDataSource } from 'igniteui-react-core';\r\nimport { SortDescription } from 'igniteui-react-core';\r\nimport { IgrColumnSortDescriptionCollection } from 'igniteui-react-grids';\r\nimport { IgrColumnGroupDescriptionCollection } from 'igniteui-react-grids';\r\nimport { IgrFilterExpressionCollection } from 'igniteui-react-core';\r\nimport './DataGridPager.css';\r\n\r\n/**\r\n * Interface for the Pager component's properties.\r\n */\r\nexport interface DataGridPagerProps {\r\n    /**\r\n     * The data to page through.\r\n     */\r\n    dataSource: any[];\r\n    /**\r\n     * The number of records per page.\r\n     */\r\n    pageSize: number;\r\n    /**\r\n     * Notifies when the page has changed and what data is on that page.\r\n     */\r\n    pagedChanged?: (pageNumber: number, data: any[]) => void;\r\n}\r\n\r\n/**\r\n * Interface for the Pager component's state.\r\n */\r\ninterface DataGridPagerState {\r\n    /**\r\n     * The internal data source the pager will use. This lets it easily handle sorting,\r\n     * grouping and filtering the data.\r\n     */\r\n    dataSource: LocalDataSource;\r\n    /**\r\n     * How many pages there are for the current data source.\r\n     */\r\n    pageCount: number;\r\n    /**\r\n     * The current page of data the pager is on.\r\n     */\r\n    pageNumber: number;\r\n    /**\r\n     * How many sort descriptions are present in the data source.\r\n     */\r\n    sortCount: number;\r\n    /**\r\n     * How many group descriptions are present in the data source.\r\n     */\r\n    groupCount: number;\r\n    /**\r\n     * How many filter expressions are present in the data source.\r\n     */\r\n    filterCount: number;\r\n}\r\n\r\n/**\r\n * This component is designed to be used in conjunction with the IgrDataGrid component\r\n * to provide a small paged view of available data.\r\n */\r\nexport class DataGridPager extends React.Component<DataGridPagerProps> {\r\n\r\n    /**\r\n     * Defining a version of the component's state property with the\r\n     * DataGridPagerState interface.\r\n     */\r\n    public readonly state: DataGridPagerState = {\r\n        dataSource: new LocalDataSource(),\r\n        pageCount: 0,\r\n        pageNumber: 1,\r\n        sortCount: 0,\r\n        groupCount: 0,\r\n        filterCount: 0\r\n    }\r\n\r\n    /**\r\n     * Constructs a new Pager component.\r\n     * @param props The properties for the Pager.\r\n     */\r\n    constructor(props: DataGridPagerProps) {\r\n        super(props);\r\n\r\n        // Don't want to emit these in our internal data source.\r\n        this.state.dataSource.shouldEmitSectionFooters = false;\r\n        this.state.dataSource.shouldEmitSectionHeaders = false;\r\n        this.state.dataSource.shouldEmitShiftedRows = false;\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // data was provided initially so update the pager state\r\n        if (this.props.dataSource.length > 0) {\r\n            // this.state.dataSource.itemsSource = this.props.dataSource;\r\n            let ds = this.state.dataSource;\r\n            ds.dataSource = this.props.dataSource;\r\n\r\n            const count = Math.round(this.props.dataSource.length / this.props.pageSize);\r\n            this.setState({ pageCount: count, pageNumber: 1, dataSource: ds});\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(previousProps: DataGridPagerProps, previousState: DataGridPagerState) {\r\n        // property changes\r\n        if (previousProps.dataSource !== this.props.dataSource) {\r\n            // this.state.dataSource.itemsSource = this.props.dataSource;\r\n            let ds = this.state.dataSource;\r\n            ds.dataSource = this.props.dataSource;\r\n\r\n            // new data so calculate a new page count and update the state.\r\n            const count = Math.round(this.state.dataSource.actualCount / this.props.pageSize);\r\n            this.setState({ pageCount: count, pageNumber: 1, dataSource: ds });\r\n        }\r\n\r\n        // if any of these state properties changed then we need to provide new data.\r\n        if (previousState.pageNumber !== this.state.pageNumber ||\r\n            previousState.pageCount !== this.state.pageCount ||\r\n            previousState.sortCount !== this.state.sortCount ||\r\n            previousState.groupCount !== this.state.groupCount ||\r\n            previousState.filterCount !== this.state.filterCount) {\r\n            const pageData = this.getPage(this.state.pageNumber);\r\n            if (pageData.length > 0) {\r\n                this.notifyPageChanged(this.state.pageNumber, pageData);\r\n            }\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const leftSideBtnClasses = \"icon-button \" + (this.isButtonDisabled(\"left\") ? \"icon-button-disable\" : \"\");\r\n        const rightSideBtnClasses = \"icon-button \" + (this.isButtonDisabled(\"right\") ? \"icon-button-disable\" : \"\");\r\n        return (\r\n            <div className=\"pager-root\">\r\n                <div className={leftSideBtnClasses} onClick={this.firstPage}>\r\n                    <i className=\"material-icons\">first_page</i>\r\n                </div>\r\n                <div className={leftSideBtnClasses} onClick={this.previousPage}>\r\n                    <i className=\"material-icons\">chevron_left</i>\r\n                </div>\r\n                <div className=\"pager-text\">\r\n                    {this.state.pageNumber} of {this.state.pageCount}\r\n                </div>\r\n                <div className={rightSideBtnClasses} onClick={this.nextPage}>\r\n                    <i className=\"material-icons\">chevron_right</i>\r\n                </div>\r\n                <div className={rightSideBtnClasses} onClick={this.lastPage}>\r\n                    <i className=\"material-icons\">last_page</i>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the pager's internal data source with sorting.\r\n     * @param sortDescriptions The latest sort descriptions to apply.\r\n     */\r\n    public applySorts(sortDescriptions: IgrColumnSortDescriptionCollection) {\r\n        this.state.dataSource.sortDescriptions.clear();\r\n        for (let i = 0; i < sortDescriptions.count; i++) {\r\n            const sd = sortDescriptions.item(i);\r\n            this.state.dataSource.sortDescriptions.add(SortDescription.create(sd.field, sd.sortDirection));\r\n        }\r\n        this.update(true);\r\n    }\r\n    /**\r\n     * Update the pager's internal data source with grouping.\r\n     * @param groupDescriptions The latest group descriptions to apply.\r\n     */\r\n    public applyGroups(groupDescriptions: IgrColumnGroupDescriptionCollection) {\r\n        this.state.dataSource.groupDescriptions.clear();\r\n        for (let i = 0; i < groupDescriptions.count; i++) {\r\n            const gd = groupDescriptions.item(i);\r\n            this.state.dataSource.groupDescriptions.add(SortDescription.create(gd.field, gd.sortDirection));\r\n        }\r\n        this.update(true);\r\n    }\r\n    /**\r\n     * Update the pager's internal data source with filtering.\r\n     * @param filterExpressions The latest filters to apply.\r\n     */\r\n    public applyFilters(filterExpressions: IgrFilterExpressionCollection) {\r\n        this.state.dataSource.filterExpressions.clear();\r\n        for (let i = 0; i < filterExpressions.size(); i++) {\r\n            const fe = filterExpressions.get(i);\r\n            this.state.dataSource.filterExpressions.add(fe);\r\n        }\r\n        this.update(true);\r\n    }\r\n\r\n    /**\r\n     * Click handler for the first page button.\r\n     */\r\n    private firstPage = () => {\r\n        this.setState({ pageNumber: 1 });\r\n    }\r\n    /**\r\n     * Click handler for the previous page button.\r\n     */\r\n    private previousPage = () => {\r\n        this.setState({ pageNumber: Math.max(this.state.pageNumber - 1, 1) });\r\n    }\r\n    /**\r\n     * Click handler for the next page button.\r\n     */\r\n    private nextPage = () => {\r\n        this.setState({ pageNumber: Math.min(this.state.pageNumber + 1, this.state.pageCount) });\r\n    }\r\n    /**\r\n     * Click handler for the last page button.\r\n     */\r\n    private lastPage = () => {\r\n        this.setState({ pageNumber: this.state.pageCount });\r\n    }\r\n    /**\r\n     * Quick helper to determine if one of the paging buttons is disabled or not.\r\n     */\r\n    private isButtonDisabled = (which: string): boolean => {\r\n        switch (which) {\r\n            case \"left\": return this.state.pageNumber <= 1;\r\n            case \"right\": return this.state.pageNumber === this.state.pageCount;\r\n            default: return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies about what the data is for the current page.\r\n     * @param pageNumber The page number to report.\r\n     * @param data The data for the current page.\r\n     */\r\n    private notifyPageChanged(pageNumber: number, data: any[]) {\r\n        if (this.props.pagedChanged) {\r\n            this.props.pagedChanged(pageNumber, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to get data for a specific page.\r\n     * @param pageNumber The page to get data for.\r\n     */\r\n    private getPage(pageNumber: number): any[] {\r\n        const data = [];\r\n\r\n        if (this.state.dataSource) {\r\n            const pageStart = (pageNumber - 1) * this.props.pageSize;\r\n            for (let i = pageStart; i < pageStart + this.props.pageSize; i++) {\r\n                if (i > this.state.dataSource.actualCount - 1) {\r\n                    break;\r\n                }\r\n                const item = this.state.dataSource.getItemAtIndex(i);\r\n                data.push(item);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n    /**\r\n     * Updates the pager and notifies about the data for the current page.\r\n     * @param flush Whether to flush the internal LocalDataSource or not.\r\n     * @param notify Whether this update needs to notify or not.\r\n     */\r\n    private update(flush?: boolean) {\r\n        if (flush) {\r\n            // flushing the data source is required when adding filter, sort and group objects to it\r\n            // so they immediately get processed.  Otherwise we'll continue working with old data.\r\n            this.state.dataSource.flushAutoRefresh();\r\n        }\r\n\r\n        const count = Math.round(this.state.dataSource.actualCount / this.props.pageSize);\r\n        const page = Math.max(Math.min(this.state.pageNumber, count), 1);\r\n\r\n        this.setState({\r\n            pageCount: count,\r\n            pageNumber: page,\r\n            sortCount: this.state.dataSource.sortDescriptions.size(),\r\n            groupCount: this.state.dataSource.groupDescriptions.size(),\r\n            filterCount: this.state.dataSource.filterExpressions.size()\r\n        });\r\n    }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/row-paging/src/DataGridSharedData.ts",
  "content": "\r\n\r\nexport class DataGridSharedData {\r\n\r\n    public static getEmployees(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const employees: any[] = [];\r\n        let maleCount: number = 0;\r\n        let femaleCount: number = 0;\r\n        for (let i = 0; i < count; i++) {\r\n            const age: number = Math.round(this.getRandomNumber(20, 40));\r\n            const gender: string = this.getRandomGender();\r\n            const firstName: string = this.getRandomNameFirst(gender);\r\n            const lastName: string = this.getRandomNameLast();\r\n            const street: string = this.getRandomStreet();\r\n            const country: string = this.getRandomItem(this.countries);\r\n            const city: string = this.getRandomCity(country);\r\n            const generation = Math.floor(age / 10) * 10 + \"s\";\r\n            const email: string = firstName.toLowerCase() + \"@\" + this.getRandomItem(this.emails);\r\n            const website: string = firstName.toLowerCase() + \"-\" + this.getRandomItem(this.websites);\r\n            let photoPath: any;\r\n\r\n            if (gender === \"male\") {\r\n                maleCount++;\r\n                if (maleCount > 26) {\r\n                    maleCount = 1;\r\n                }\r\n                photoPath = this.getPhotoMale(maleCount);\r\n            }\r\n            else {\r\n                femaleCount++;\r\n                if (femaleCount > 24) {\r\n                    femaleCount = 1;\r\n                }\r\n                photoPath = this.getPhotoFemale(femaleCount);\r\n            }\r\n\r\n            let person: any = {};\r\n            person.Address = street + \",\" + city;\r\n            person.Age = age;\r\n            person.Birthday = this.getBirthday(age);\r\n            person.City = city;\r\n            person.Country = country;\r\n            person.CountryFlag = this.getCountryFlag(country);\r\n            person.Email = email;\r\n            person.FirstName = firstName;\r\n            person.Gender = this.getGenderPhoto(gender);\r\n            person.Generation = generation;\r\n            person.ID = this.pad(i + 1, 5);\r\n            person.LastName = lastName;\r\n            person.Name = firstName + \" \" + lastName;\r\n            person.Phone = this.getRandomPhone();\r\n            person.Photo = photoPath;\r\n            person.Street = street;\r\n            person.Salary = this.getRandomNumber(40, 200) * 1000;\r\n            person.Sales = this.getRandomNumber(200, 980) * 1000;\r\n            person.Website = website;\r\n            person.Productivity = this.getProductivity();\r\n\r\n            if (person.Salary < 50000) {\r\n                person.Income = \"Low\";\r\n            } else if (person.Salary < 100000) {\r\n                person.Income = \"Average\";\r\n            } else {\r\n                person.Income = \"High\";\r\n            }\r\n\r\n            employees.push(person);\r\n        }\r\n        return employees;\r\n    }\r\n\r\n    public static getProductivity(weekCount?: number): any[] {\r\n        if (weekCount === undefined) {\r\n            weekCount = 52;\r\n        }\r\n        const productivity: any[] = [];\r\n        for (let w = 0; w < weekCount; w++) {\r\n            const value = this.getRandomNumber(-50, 50);\r\n            productivity.push({Value: value, Week: w});\r\n        }\r\n        return productivity;\r\n    }\r\n\r\n    public static getSales(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const names: string[] = [\r\n            \"Intel CPU\", \"AMD CPU\",\r\n            \"Intel Motherboard\", \"AMD Motherboard\", \"NVIDIA Motherboard\",\r\n            \"NVIDIA GPU\", \"GIGABYTE GPU\", \"Asus GPU\", \"AMD GPU\", \"MSI GPU\",\r\n            \"Corsair Memory\", \"Patriot Memory\", \"Skill Memory\",\r\n            \"Samsung HDD\", \"WD HDD\", \"Seagate HDD\", \"Intel HDD\",\r\n            \"Samsung SSD\", \"WD SSD\", \"Seagate SSD\", \"Intel SSD\",\r\n            \"Samsung Monitor\", \"Asus Monitor\", \"LG Monitor\", \"HP Monitor\" ];\r\n        const countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\"];\r\n        const status: string[] = [\"Packing\", \"Shipped\", \"Delivered\"];\r\n        const sales: any[] = [];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const price = this.getRandomNumber(100, 900);\r\n            const items = this.getRandomNumber(10, 80);\r\n            const value = price * items;\r\n            const margin = this.getRandomNumber(3, 10);\r\n            const profit = Math.round((price * margin / 100) * items);\r\n            const country = this.getRandomItem(countries);\r\n            sales.push({\r\n                BundlePrice: price,\r\n                ProductPrice: price,\r\n                Margin: margin,\r\n                OrderDate: this.getRandomDate(new Date(2012, 0, 1), new Date()),\r\n                OrderItems: items,\r\n                OrderValue: value, //  Math.round(value / 1000) + \",\" + Math.round(value % 1000),\r\n                ProductID: 1001 + i,\r\n                ProductName: this.getRandomItem(names),\r\n                Profit: profit,\r\n                Countries: country,\r\n                CountryFlag: this.getCountryFlag(country),\r\n                Status: this.getRandomItem(status)\r\n            });\r\n        }\r\n        return sales;\r\n    }\r\n\r\n    public static getHouses(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const houses: any[] = [];\r\n        const property: string[] = [ \"Townhouse\", \"Single\", \"Condo\", \"Villa\"];\r\n        const emails: string[] = [ \"estates.com\", \"remax.com\", \"zillow.com\", \"realtor.com\", \"coldwell.com\"];\r\n        const countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\"];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const year: number = this.getRandomNumber(1950, 2015);\r\n            const age: number = 2020 - year;\r\n\r\n            const gender: string = this.getRandomGender();\r\n            const firstName: string = this.getRandomNameFirst(gender);\r\n            const lastName: string = this.getRandomNameLast();\r\n            const initials = firstName.substr(0, 1).toLowerCase();\r\n            const email: string = initials + lastName.toLowerCase() + \"@\" + this.getRandomItem(emails);\r\n\r\n            const street: string = this.getRandomStreet();\r\n            const country: string = this.getRandomItem(countries);\r\n            const city: string = this.getRandomCity(country);\r\n\r\n            houses.push({\r\n                Address: street + \",\" + city,\r\n                Age: age,\r\n                Agent: firstName + \" \" + lastName,\r\n                Area: this.getRandomNumber(50, 300),\r\n                Baths: this.getRandomNumber(1, 3),\r\n                Built: year,\r\n                City: city,\r\n                Country: country,\r\n                CountryFlag: this.getCountryFlag(country),\r\n                Email: email,\r\n                ID: this.pad(i + 1, 5),\r\n                Phone: this.getRandomPhone(),\r\n                Price: this.getRandomNumber(210, 900) * 1000,\r\n                Property: this.getRandomItem(property),\r\n                Rooms: this.getRandomNumber(2, 5),\r\n                SaleDate: this.getRandomDate(new Date(2015, 0, 1), new Date()),\r\n                Street: street,\r\n            });\r\n        }\r\n        return houses;\r\n    }\r\n\r\n    private static websites: string[] = [ \".com\", \".gov\", \".edu\", \".org\"];\r\n    private static emails: string[] = [ \"gmail.com\", \"yahoo.com\", \"twitter.com\"];\r\n    private static genders: string[] = [\"male\", \"female\"];\r\n    private static maleNames: string[] = [\"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\"];\r\n    private static femaleNames: string[] = [\"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\"];\r\n    private static lastNames: string[] = [\"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"MOrgan\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Berry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adams\", \"Power\", \"Tesla\"];\r\n    private static countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\"];\r\n    private static citiesUS: string[] = [\"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\"];\r\n    private static citiesUK: string[] = [\"London\", \"Liverpool\", \"Manchester\"];\r\n    private static citiesFR: string[] = [\"Paris\", \"Marseille\", \"Lyon\"];\r\n    private static citiesCA: string[] = [\"Toronto\", \"Vancouver\", \"Montreal\"];\r\n    private static citiesPL: string[] = [\"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\"];\r\n    private static citiesJP: string[] = [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\"];\r\n    private static citiesGR: string[] = [\"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\"];\r\n    private static roadSuffixes: string[] = [\"Road\", \"Street\", \"Way\"];\r\n    private static roadNames: string[] = [\"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\"];\r\n\r\n    private static getRandomNumber(min: number, max: number): number {\r\n        return Math.round(min + Math.random() * (max - min));\r\n    }\r\n\r\n    private static getRandomItem(array: any[]): any {\r\n        const index = Math.round(this.getRandomNumber(0, array.length - 1));\r\n        return array[index];\r\n    }\r\n\r\n    private static getRandomDate(start: Date, end: Date): Date {\r\n        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r\n    }\r\n\r\n    private static getRandomPhone(): string {\r\n        const phoneCode = this.getRandomNumber(100, 900);\r\n        const phoneNum1 = this.getRandomNumber(100, 900);\r\n        const phoneNum2 = this.getRandomNumber(1000, 9000);\r\n        const phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\r\n        return phone;\r\n    }\r\n\r\n    private static getRandomGender(): string {\r\n        return this.getRandomItem(this.genders);\r\n    }\r\n\r\n    private static getRandomNameLast(): string {\r\n        return this.getRandomItem(this.lastNames);\r\n    }\r\n\r\n    private static getRandomNameFirst(gender: string): string {\r\n        if (gender === \"male\") {\r\n            return this.getRandomItem(this.maleNames);\r\n        }\r\n        else {\r\n            return this.getRandomItem(this.femaleNames);\r\n        }\r\n    }\r\n\r\n    private static getRandomCity(country: string): string {\r\n        if (country === \"Canada\") {\r\n            return this.getRandomItem(this.citiesCA);\r\n        } else if (country === \"France\") {\r\n            return this.getRandomItem(this.citiesFR);\r\n        } else if (country === \"Poland\") {\r\n            return this.getRandomItem(this.citiesPL);\r\n        } else if (country === \"USA\") {\r\n            return this.getRandomItem(this.citiesUS);\r\n        } else if (country === \"Japan\") {\r\n            return this.getRandomItem(this.citiesJP);\r\n        } else if (country === \"Germany\") {\r\n            return this.getRandomItem(this.citiesGR);\r\n        } else { // if (country === \"United Kingdom\") {\r\n            return this.getRandomItem(this.citiesUK);\r\n        }\r\n    }\r\n\r\n    private static getRandomStreet(): string {\r\n        const num = Math.round(this.getRandomNumber(100, 300)).toString();\r\n        const road = this.getRandomItem(this.roadNames);\r\n        const suffix = this.getRandomItem(this.roadSuffixes);\r\n        return num + \" \" + road + \" \" + suffix;\r\n    }\r\n\r\n    private static getBirthday(age: number): Date {\r\n        const today: Date = new Date();\r\n        const year: number = today.getFullYear() - age;\r\n        const month: number = this.getRandomNumber(0, 8);\r\n        const day: number = this.getRandomNumber(10, 27);\r\n        return new Date(year, month, day);\r\n    }\r\n\r\n    private static getPhotoMale(id: number): string {\r\n        return 'https://static.infragistics.com/xplatform/images/people//GUY' + this.pad(id, 2) + '.png';\r\n    }\r\n\r\n    private static getPhotoFemale(id: number): string {\r\n        return 'https://static.infragistics.com/xplatform/images/people/GIRL' + this.pad(id, 2) + '.png';\r\n    }\r\n\r\n    private static getGenderPhoto(gender: string): string {\r\n        return 'https://static.infragistics.com/xplatform/images/genders/' + gender + '.png';\r\n    }\r\n\r\n    private static getCountryFlag(country: string): string {\r\n        return 'https://static.infragistics.com/xplatform/images/flags/' + country + '.png';\r\n    }\r\n\r\n    private static pad(num: number, size: number): string{\r\n        let s = num + \"\";\r\n        while (s.length < size) {\r\n            s = \"0\" + s;\r\n        }\r\n        return s;\r\n    }\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/row-paging/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}