{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-heatmap-table/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// grid modules:\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrTemplateColumn } from 'igniteui-react-grids';\nimport { IgrTemplateCellInfo } from 'igniteui-react-grids';\nimport { IgrTemplateHeader } from 'igniteui-react-grids';\nimport { IgrTemplateCellUpdatingEventArgs } from 'igniteui-react-grids';\nimport { IgrTemplateHeaderCellUpdatingEventArgs } from 'igniteui-react-grids';\n\nIgrDataGridModule.register();\n\nexport default class DataGridTypeHeatmapTable extends React.Component<any, any> {\n\n    public data: any[];\n    public VerticalHeader: IgrTemplateHeader;\n    public HorizontalRightHeader: IgrTemplateHeader;\n    public HorizontalLeftHeader: IgrTemplateHeader;\n    public HeatScale: HeatScale;\n    public cellSize: number = 50;\n\n    public genders: string[] = [\"male\", \"female\"];\n    public maleNames: string[] = [\"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\"];\n    public femaleNames: string[] = [\"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\"];\n    public lastNames: string[] = [\"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"Betts\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Newberry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adama\", \"Power\", \"Tesla\"];\n    public monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    constructor(props: any) {\n        super(props);\n\n        this.onVerticalHeaderUpdating = this.onVerticalHeaderUpdating.bind(this);\n        this.onHeatCellUpdating = this.onHeatCellUpdating.bind(this);\n\n        this.createData();\n\n        this.HeatScale = new HeatScale(0, 1);\n        this.HeatScale.isInverted = true;\n        this.HeatScale.colors = ['#009f00', '#3eb342', '#62c768', '#86db83', '#b2ef8e', '#fcd741', '#ffae4b', '#ff824d', '#f95048', '#e9002c'];\n\n        this.VerticalHeader = new IgrTemplateHeader({});\n        this.VerticalHeader.cellUpdating = (s, e) => this.onVerticalHeaderUpdating(s, e);\n\n        this.HorizontalRightHeader = new IgrTemplateHeader({});\n        this.HorizontalRightHeader.cellUpdating = (s, e) => this.onHorizontalHeaderUpdating(s, e, \"right\");\n\n        this.HorizontalLeftHeader = new IgrTemplateHeader({});\n        this.HorizontalLeftHeader.cellUpdating = (s, e) => this.onHorizontalHeaderUpdating(s, e, \"left\");\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <IgrDataGrid\n                    height=\"100%\"\n                    width=\"100%\"\n                    rowHeight={this.cellSize}\n                    rowSeparatorHeight=\"1\"\n                    rowSeparatorBackground=\"white\"\n                    headerHeight=\"110\"\n\n                    columnResizingMode=\"None\"\n                    autoGenerateColumns=\"false\"\n                    dataSource={this.data}>\n\n                    <IgrTextColumn field=\"Name\"\n                    headerText=\"Productivity\"\n                    header={this.HorizontalRightHeader}\n                    width=\"*>110\" horizontalAlignment=\"right\" />\n\n                    {this.renderHeatColumns()}\n\n                    <IgrTextColumn field=\"Average\"\n                    header={this.HorizontalLeftHeader}\n                    width=\"*>110\" horizontalAlignment=\"left\"    />\n\n               </IgrDataGrid>\n            </div>\n        );\n    }\n\n    public renderHeatColumns(): JSX.Element[] {\n        const columns: JSX.Element[] = [];\n\n        for (let i = 0; i < this.monthNames.length; i++) {\n            const name = this.monthNames[i];\n            columns.push(this.renderColumn(name));\n        }\n        return columns;\n    }\n\n    public renderColumn(columnPath: string, columnName?: string) {\n        if (columnName === undefined) {\n            columnName = columnPath;\n        }\n        return <IgrTemplateColumn\n        key={columnPath}\n        field={columnPath}\n        headerText={columnName}\n        header={this.VerticalHeader}\n        width={this.cellSize.toString()}\n        paddingBottom=\"0\" paddingLeft=\"0\"\n        paddingRight=\"0\" paddingTop=\"0\"\n        cellUpdating={this.onHeatCellUpdating}\n        horizontalAlignment=\"center\"\n        verticalAlignment=\"bottom\"\n        border=\"white\"\n        borderLeftWidth=\"0.5\"\n        borderRightWidth=\"0.5\"\n        borderTopWidth=\"0\"\n        borderBottomWidth=\"0\" />;\n    }\n\n    public onVerticalHeaderUpdating(s: IgrTemplateHeader, e: IgrTemplateHeaderCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n        let label: HTMLSpanElement | null = null;\n        if (content.childElementCount === 0) {\n            content.style.lineHeight = \"140px\";\n            label = document.createElement(\"div\");\n            label.style.background = \"transparent\";\n            label.style.color = \"rgb(24, 29, 31)\";\n            label.style.fontSize = \"13px\";\n            label.style.fontFamily = \"Verdana\";\n            label.style.transform = \"rotate(270deg)\";\n            label.style.transformOrigin = \"center\";\n            content.appendChild(label);\n        } else {\n            label = content.children[0] as HTMLDivElement;\n        }\n\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        label.textContent = info.value;\n    }\n\n    public onHorizontalHeaderUpdating(s: IgrTemplateHeader, e: IgrTemplateHeaderCellUpdatingEventArgs, align: string) {\n        const content = e.content as HTMLDivElement;\n        let label: HTMLSpanElement | null = null;\n        if (content.childElementCount === 0) {\n            content.style.lineHeight = \"140px\";\n            label = document.createElement(\"div\");\n            label.style.background = \"transparent\";\n            label.style.color = \"rgb(24, 29, 31)\";\n            label.style.fontSize = \"13px\";\n            label.style.fontFamily = \"Verdana\";\n            label.style.verticalAlign = \"bottom\";\n            label.style.textAlign = align;\n            content.appendChild(label);\n        } else {\n            label = content.children[0] as HTMLDivElement;\n        }\n\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        label.textContent = info.value;\n    }\n\n    public onHeatCellUpdating(s: IgrTemplateColumn, e: IgrTemplateCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        let heatCell: HTMLDivElement | null = null;\n\n        if (content.childElementCount !== 0) {\n            heatCell = content.children[0] as HTMLDivElement;\n        } else {\n            heatCell = document.createElement(\"div\");\n            heatCell.style.margin = \"0px\";\n            heatCell.style.padding = \"0px\";\n            heatCell.style.fontFamily = \"Verdana\";\n            heatCell.style.fontSize = \"small\";\n            heatCell.style.textAlign = \"center\";\n            heatCell.style.color = \"black\"\n\n            content.style.margin = \"0px\";\n            content.style.padding = \"0px\";\n            content.appendChild(heatCell);\n        }\n\n        const productivity = (info.value * 100).toFixed(0) + \"%\";\n        heatCell.style.background = this.HeatScale.getColor(info.value);\n        heatCell.textContent = productivity;\n    }\n\n    public createData() {\n\n        this.data = [];\n        for (let row = 0; row < 30; row++) {\n\n            const person: any = {};\n            person.ID = row;\n            person.Gender = this.getRandomGender();\n            person.FirstName = this.getRandomNameFirst(person.Gender);\n            person.LastName = this.getRandomNameLast();\n            person.Name = person.FirstName + \" \" + person.LastName;\n\n            person.Average = 0;\n            // generating productivity per month\n            for (let c = 0; c < this.monthNames.length; c++) {\n                const month = this.monthNames[c];\n                const rand = Math.random();\n                person[month] = rand;\n                person.Average += rand;\n            }\n\n            person.Average = person.Average / this.monthNames.length * 100;\n            person.Average = person.Average.toFixed(0) + \"%\";\n\n            this.data.push(person);\n        }\n\n        this.data.sort(this.compareData);\n    }\n\n    public compareData(a: any, b: any): number {\n        if (a.Name < b.Name) {\n            return 1;\n        }\n        if (a.Name > b.Name) {\n            return -1;\n        }\n        return 0;\n    }\n\n    public getRandomGender(): string {\n        return this.getRandomItem(this.genders);\n    }\n    public getRandomNameLast(): string {\n        return this.getRandomItem(this.lastNames);\n    }\n\n    public getRandomNameFirst(gender: string): string {\n        if (gender === \"male\") {\n            return this.getRandomItem(this.maleNames);\n        }\n        else {\n            return this.getRandomItem(this.femaleNames);\n        }\n    }\n\n    public getRandomNumber(min: number, max: number): number {\n        return Math.round(min + Math.random() * (max - min));\n    }\n\n    public getRandomItem(array: any[]): any {\n        const index = Math.round(this.getRandomNumber(0, array.length - 1));\n        return array[index];\n    }\n}\n\nclass HeatScale {\n\n    public minimum: number = 0;\n    public maximum: number = 1;\n    public colors: string[] = [\"white\", \"yellow\", \"orange\", \"red\"];\n    public isInverted: boolean = false;\n\n    constructor(min: number, max: number) {\n        this.minimum = min;\n        this.maximum = max;\n    }\n\n    public getRange(): number {\n        return this.maximum - this.minimum;\n    }\n\n    public getUnscaled(v: number): number {\n        return this.Clamp(this.minimum + v * this.getRange(), this.minimum, this.maximum);\n    }\n\n    public getScaled(v: number): number\n    {\n        return this.Clamp((v - this.minimum) / this.getRange(), this.minimum, this.maximum);\n    }\n\n    public Clamp(value: number, min: number, max: number): number {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    public getColor(v: number): string\n    {\n        let scale =  this.getScaled(v);\n        let index = Math.round(scale * (this.colors.length - 1));\n        if (this.isInverted) {\n            index = this.colors.length - index - 1;\n        }\n        // console.log(\"\" +  index + \" \" + scale + \" \" + v)\n        if (index < 0 || index > this.colors.length) {\n            return \"white\";\n        } else {\n            return this.colors[index];\n        }\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<DataGridTypeHeatmapTable />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-heatmap-table/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}