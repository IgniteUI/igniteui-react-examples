{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-marketing-table/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './DataGridTypeMarketingTable.css';\nimport { LiveFinancialData } from './LiveFinancialData';\n// IgrDataGrid modules\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrNumericColumn } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrTemplateColumn } from 'igniteui-react-grids';\nimport { IgrColumnGroupDescription } from 'igniteui-react-grids';\nimport { IgrDataBindingEventArgs } from 'igniteui-react-grids';\nimport { IgrCellStyleRequestedEventArgs } from 'igniteui-react-grids';\nimport { IgrTemplateCellUpdatingEventArgs } from 'igniteui-react-grids';\nimport { IgrTemplateCellInfo } from 'igniteui-react-grids';\nimport { ListSortDirection } from 'igniteui-react-core';\nimport { HeaderClickAction } from 'igniteui-react-grids';\n\nIgrDataGridModule.register();\n\ninterface AppState {\n    name: string;\n    data: any[];\n    frequency: number;\n    volume: number;\n    hiddenColumns: string[];\n    allColumns: string[];\n}\n\nexport default class DataGridTypeMarketingTable extends React.Component<any, AppState> {\n\n    public grid: IgrDataGrid;\n    public lastUpdateTime: Date = new Date();\n    public isTimerTicking: boolean = false;\n    public isUpdatingAllPrices = false;\n    public isUpdatingSomePrices = false;\n    public valuesIncreasedColor = \"#4EB862\";\n    public valuesDecreasedColor = \"#FF134A\";\n    public valuesDecreasedBorder = \"4px solid #FF134A\";\n    public valuesIncreasedBorder = \"4px solid #4EB862\";\n\n    constructor(props: any) {\n        super(props);\n\n        this.onGridRef = this.onGridRef.bind(this);\n        this.onGridStyleKey = this.onGridStyleKey.bind(this);\n        this.onGridCellUpdating = this.onGridCellUpdating.bind(this);\n        this.onPricePercentStyleKey = this.onPricePercentStyleKey.bind(this);\n        this.onPricePercentCellUpdating = this.onPricePercentCellUpdating.bind(this);\n        this.onPriceAmountStyleKey = this.onPriceAmountStyleKey.bind(this);\n        this.onPriceAmountCellUpdating = this.onPriceAmountCellUpdating.bind(this);\n\n        this.onPriceDataBound = this.onPriceDataBound.bind(this);\n        this.onPriceStyleKey = this.onPriceStyleKey.bind(this);\n        this.onPriceCellUpdating = this.onPriceCellUpdating.bind(this);\n\n        this.state = {\n            name: 'React',\n            data: LiveFinancialData.generateData(3000),\n            frequency: 1000,\n            volume: 3000,\n            hiddenColumns: [\"ID\"],\n            allColumns: []\n        };\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <IgrDataGrid\n                ref={this.onGridRef}\n                width=\"100%\"\n                height=\"100%\"\n                rowHeight=\"32\"\n                selectionMode=\"MultipleRow\"\n                autoGenerateColumns=\"false\"\n                isGroupCollapsable=\"true\"\n                headerClickAction={HeaderClickAction.SortByMultipleColumnsTriState}\n                columnShowingAnimationMode=\"slideFromRightAndFadeIn\"\n                columnHidingAnimationMode=\"slideToRightAndFadeOut\"\n                defaultColumnMinWidth=\"100\"\n                dataSource={this.state.data} >\n\n                    <IgrTextColumn field=\"ID\" width=\"*>90\" isHidden=\"true\"/>\n                    <IgrTextColumn field=\"Category\" width=\"*>120\" />\n                    <IgrTextColumn field=\"Type\" width=\"*>90\"    />\n                    <IgrTextColumn field=\"Risk\" width=\"*>100\" />\n                    <IgrNumericColumn field=\"Open Price\" width=\"*>130\"/>\n                    <IgrTemplateColumn field=\"Price\" width=\"*>100\"\n                        horizontalAlignment=\"right\"\n                        cellStyleKeyRequested={this.onPriceStyleKey}\n                        cellUpdating={this.onPriceCellUpdating}\n                        dataBound={this.onPriceDataBound}/>\n\n                    <IgrTemplateColumn field=\"Change\" width=\">*100\"\n                        horizontalAlignment=\"right\"\n                        cellStyleKeyRequested={this.onPriceAmountStyleKey}\n                        cellUpdating={this.onPriceAmountCellUpdating}/>\n\n                    <IgrTemplateColumn name=\"ChangePer\" field=\"Change(%)\" width=\"*>130\"\n                        horizontalAlignment=\"right\"\n                        cellStyleKeyRequested={this.onPricePercentStyleKey}\n                        cellUpdating={this.onPricePercentCellUpdating}/>\n\n                    <IgrTextColumn field=\"Contract\" width=\"*>120\" />\n                    <IgrTextColumn field=\"Settlement\" width=\"*>130\" />\n                    <IgrTextColumn field=\"Region\" width=\"*>130\" />\n                    <IgrTextColumn field=\"Country\" width=\"*>120\" />\n                    <IgrTextColumn field=\"IndGroup\" headerText=\"Group\" width=\"*>100\" />\n                    <IgrTextColumn field=\"IndSector\" headerText=\"Industry\" width=\"*>120\"/>\n                    <IgrTextColumn field=\"IndCategory\" headerText=\"Category\" width=\"*>100\" />\n                    <IgrTextColumn field=\"Sector\" width=\"*>90\" />\n                    <IgrTextColumn field=\"Issuer\" width=\"*>170\"/>\n                    <IgrTextColumn field=\"Rating\" width=\"*>90\" />\n                    <IgrTextColumn field=\"Currency\" width=\"*>90\" />\n                    <IgrTextColumn field=\"Security\" width=\"*>120\" />\n                    <IgrNumericColumn field=\"Transactions\" width=\"*>150\" />\n                    <IgrNumericColumn field=\"CPN\" width=\"*>90\" />\n                    <IgrTextColumn field=\"Maturity\" width=\"*>120\" />\n                    <IgrTextColumn field=\"Collateral\" width=\"*>120\" />\n                    <IgrNumericColumn field=\"Buy\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"Sell\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"Spread\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"Volume\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"High(D)\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"Low(D)\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"High(Y)\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"Low(Y)\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"Start(Y)\" width=\"*>110\"/>\n                    <IgrNumericColumn field=\"KRD_3YR\" width=\"*>120\" />\n                    <IgrNumericColumn field=\"KRD_5YR\" width=\"*>120\" />\n                    <IgrNumericColumn field=\"KRD_1YR\" width=\"*>120\" />\n                </IgrDataGrid>\n            </div>\n        );\n    }\n\n    public onGridRef(grid: IgrDataGrid) {\n        if (!grid) { return; }\n\n        let oldRef = this.grid;\n        if (oldRef) {\n            oldRef.flush();\n        }\n        this.grid = grid;\n        if (!this.grid) {\n            return;\n        }\n\n        this.onGridGroupingAdd();\n\n        let columns = [];\n        for (let i = 0; i < this.grid.actualColumns.count; i++) {\n            let col = this.grid.actualColumns.item(i);\n\n            let name = col.name || col.field;\n            columns.push(name);\n        }\n        this.setState({ allColumns: columns });\n        this.startTicking();\n    }\n\n    public onTimerTick()\n    {\n        if (!this.isTimerTicking) {\n            return;\n        }\n        if (!this.grid) {\n            window.setTimeout(() => this.onTimerTick(), 16);\n            return;\n        }\n\n        let toChangeIndexes = {};\n        let toChange = Math.round(this.state.volume / 10);\n\n        let now = new Date();\n        let intervalElapsed = false;\n        if ((+now - +this.lastUpdateTime) > this.state.frequency) {\n            intervalElapsed = true;\n        }\n\n        let useClear = this.isUpdatingAllPrices;\n        let updateAll = this.isUpdatingAllPrices;\n\n        if (updateAll) {\n            toChange = this.state.data.length;\n        }\n\n        let sortingByPrice = false;\n        for (let i = 0; i < this.grid.sortDescriptions.count; i++) {\n            if (this.grid.sortDescriptions.item(i).field === \"Price\" ||\n            this.grid.sortDescriptions.item(i).field.indexOf(\"Change\") >= 0) {\n                sortingByPrice = true;\n            }\n        }\n\n        if (intervalElapsed)\n        {\n            this.lastUpdateTime = new Date();\n            for (let i = 0; i < toChange; i++)\n            {\n                let index = Math.round(Math.random() * this.state.data.length - 1);\n                while (toChangeIndexes[index.toString()] !== undefined)\n                {\n                    index = Math.round(Math.random() * this.state.data.length - 1);\n                }\n                toChangeIndexes[index.toString()] = true;\n            }\n        }\n\n        for (let i = 0; i < this.state.data.length; i++)\n        {\n            let item = this.state.data[i];\n            if (toChangeIndexes[i.toString()] !== undefined)\n            {\n                if (sortingByPrice && !useClear) {\n\n                this.grid.notifyRemoveItem(i, item);\n                LiveFinancialData.randomizeDataValues(item);\n                this.grid.notifyInsertItem(i, item);\n                } else {\n                    LiveFinancialData.randomizeDataValues(item);\n                }\n\n                if (item.Change > 0) {\n                    // item.YearToDateSales += Math.round(Math.random() * 4.0);\n                    item.PriceHeat = 1;\n                } else {\n                    item.PriceHeat = -1;\n                }\n            }\n            else\n            {\n                if (item.PriceHeat > 0)\n                {\n                    item.PriceHeat -= .06;\n                    if (item.PriceHeat < 0)\n                    {\n                        item.PriceHeat = 0;\n                    }\n                }\n                if (item.PriceHeat < 0) {\n                    item.PriceHeat += .06;\n                    if (item.PriceHeat > 0) {\n                        item.PriceHeat = 0;\n                    }\n                }\n            }\n        }\n\n        if (sortingByPrice && useClear && intervalElapsed) {\n            this.grid.actualDataSource.queueAutoRefresh();\n        }\n\n        // if (!useClear) {\n        if (!sortingByPrice || !intervalElapsed) {\n            this.grid.invalidateVisibleRows();\n        }\n        // }\n        // this.grid.invalidateVisibleRows();\n\n        window.setTimeout(() => this.onTimerTick(), 16);\n    }\n\n    // cellStyleKeyRequested?: (s: IgrDefinitionBase, e: IgrCellStyleRequestedEventArgs) => void;\n    public onPriceStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        let row: any | null = null;\n        if (this.grid) {\n            row = this.grid.actualDataSource.getItemAtIndex(args.rowNumber);\n        } else {\n            row = this.state.data[args.rowNumber];\n        }\n        if (row.Change >= 0) {\n            args.styleKey = \"priceShiftUp\";\n        } else {\n            args.styleKey = \"priceShiftDown\";\n        }\n    }\n\n    public onPriceCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let item = args.cellInfo.rowItem;\n        let priceShiftUp = item.Change >= 0;\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n\n        if (args.isCanvasBased) {\n            let resized = args.ensureCorrectSize();\n            if (resized || args.cellInfo.isContentDirty) {\n                args.renderStandardBackground();\n\n                let context: CanvasRenderingContext2D = args.context;\n\n                let iconText = \"trending_up\";\n                let iconColor = this.valuesIncreasedColor;\n\n                let scale = window.devicePixelRatio;\n                if (scale !== 1.0) {\n                    context.save();\n                    context.scale(scale, scale);\n                }\n\n                if (priceShiftUp) {\n                    iconText = \"trending_up\";\n                    iconColor = this.valuesIncreasedColor;\n                } else {\n                    iconText = \"trending_down\";\n                    iconColor = this.valuesDecreasedColor;\n                }\n\n                // context.fillStyle = \"blue\";\n                // context.fillRect(0,0,args.cellInfo.width,args.cellInfo.height);\n                let txt = \"$\" + (+templ.value).toFixed(2);\n                context.font = \"13px Verdana\";\n                let width = context.measureText(txt).width;\n\n                context.font = \"13px 'Material Icons'\";\n                let iconWidth = context.measureText(iconText).width;\n\n                let totalWidth = width + iconWidth;\n                context.font = \"13px Verdana\";\n                context.fillStyle = iconColor;\n                context.textBaseline = \"top\";\n                context.fillText(txt, templ.width - (totalWidth + 5), (templ.height / 2.0) - 7);\n\n                context.font = \"13px 'Material Icons'\";\n                context.fillStyle = iconColor;\n                context.textBaseline = \"top\";\n                context.fillText(iconText, templ.width - (iconWidth + 5), (templ.height / 2.0) - 7);\n\n                if (scale !== 1.0) {\n                    context.restore();\n                }\n            }\n\n            return;\n        }\n\n        let content = args.content as HTMLDivElement;\n        let sp: HTMLSpanElement;\n        let icon: HTMLSpanElement;\n\n        if (content.childElementCount > 0) {\n            sp = content.children[0] as HTMLSpanElement;\n            icon = content.children[1] as HTMLSpanElement;\n        } else {\n            content.style.textAlign = \"right\";\n            sp = document.createElement(\"span\");\n            icon = document.createElement(\"span\");\n            sp.style.font = \"13px Verdana\";\n            sp.style.verticalAlign = \"center\";\n            content.appendChild(sp);\n            content.appendChild(icon);\n            icon.style.fontFamily = \"Material Icons\";\n            icon.style.fontSize = \"13px\";\n            icon.style.fontFeatureSettings = \"liga\";\n            icon.style.verticalAlign = \"center\";\n        }\n\n        sp.textContent = \"$\" + (+templ.value).toFixed(2);\n\n        if ((sp as any).__isUp === undefined ||\n            (sp as any).__isUp !== priceShiftUp) {\n            (sp as any).__isUp = priceShiftUp;\n            if (priceShiftUp) {\n                icon.textContent = \"trending_up\";\n                icon.style.color = this.valuesIncreasedColor;\n                sp.style.color = this.valuesIncreasedColor;\n            } else {\n                icon.textContent = \"trending_down\";\n                icon.style.color = this.valuesDecreasedColor;\n                sp.style.color = this.valuesDecreasedColor;\n            }\n        }\n    }\n\n    public onPricePercentStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        if (args.resolvedValue >= 0) {\n            args.styleKey = \"pricePercentUp\";\n        } else {\n            args.styleKey = \"pricePercentDown\";\n        }\n    }\n\n    public onPricePercentCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n        let priceShiftUp = templ.value >= 0;\n\n        if (args.isCanvasBased) {\n            let resized = args.ensureCorrectSize();\n            if (resized || args.cellInfo.isContentDirty) {\n                args.renderStandardBackground();\n\n                let context: CanvasRenderingContext2D = args.context;\n\n                let iconColor = this.valuesIncreasedColor;\n\n                let scale = window.devicePixelRatio;\n                if (scale !== 1.0) {\n                    context.save();\n                    context.scale(scale, scale);\n                }\n\n                if (priceShiftUp) {\n                    iconColor = this.valuesIncreasedColor;\n                } else {\n                    iconColor = this.valuesDecreasedColor;\n                }\n\n                // context.fillStyle = \"blue\";\n                // context.fillRect(0,0,args.cellInfo.width,args.cellInfo.height);\n                let txt = (+templ.value).toFixed(2) + \"%\";\n                context.font = \"13px Verdana\";\n                let width = context.measureText(txt).width;\n\n                let totalWidth = width + 4;\n\n                context.font = \"13px Verdana\";\n                context.fillStyle = templ.textColor;\n                context.textBaseline = \"top\";\n                context.fillText(txt, templ.width - (totalWidth + 10), (templ.height / 2.0) - 7);\n\n                context.font = \"13px 'Material Icons'\";\n                context.fillStyle = iconColor;\n                context.fillRect(templ.width - (5 + 4), (templ.height / 2.0) - 8, 4, 16);\n\n                 if (scale !== 1.0) {\n                    context.restore();\n                }\n            }\n\n            return;\n        }\n\n        let content = args.content as HTMLDivElement;\n        let sp: HTMLSpanElement;\n\n        if (content.childElementCount > 0) {\n            sp = content.children[0] as HTMLSpanElement;\n        } else {\n            content.style.textAlign = \"right\";\n            sp = document.createElement(\"span\");\n            sp.style.font = \"13px Verdana\";\n            sp.style.verticalAlign = \"center\";\n            content.appendChild(sp);\n        }\n\n        sp.textContent = (+templ.value).toFixed(2) + \"%\";\n        if ((sp as any).__isUp === undefined ||\n            (sp as any).__isUp !== priceShiftUp) {\n            (sp as any).__isUp = priceShiftUp;\n            if (priceShiftUp) {\n                sp.style.paddingRight = \"5px\";\n                sp.style.borderRight = this.valuesIncreasedBorder;\n                // sp.style.color = this.valuesIncreasedColor;\n            } else {\n                sp.style.paddingRight = \"5px\";\n                sp.style.borderRight = this.valuesDecreasedBorder;\n                // sp.style.color = this.valuesDecreasedColor;\n            }\n        }\n    }\n\n    public onPriceAmountStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        if (args.resolvedValue >= 0) {\n            args.styleKey = \"priceAmountUp\";\n        } else {\n            args.styleKey = \"priceAmountDown\";\n        }\n    }\n\n    public onPriceAmountCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        let templ = args.cellInfo as IgrTemplateCellInfo;\n        let priceShiftUp = templ.value >= 0;\n\n        if (args.isCanvasBased) {\n            let resized = args.ensureCorrectSize();\n            if (resized || args.cellInfo.isContentDirty) {\n                args.renderStandardBackground();\n\n                let context: CanvasRenderingContext2D = args.context;\n                let iconColor = this.valuesIncreasedColor;\n                let scale = window.devicePixelRatio;\n                if (scale !== 1.0) {\n                    context.save();\n                    context.scale(scale, scale);\n                }\n\n                if (priceShiftUp) {\n                    iconColor = this.valuesIncreasedColor;\n                } else {\n                    iconColor = this.valuesDecreasedColor;\n                }\n\n                // context.fillStyle = \"blue\";\n                // context.fillRect(0,0,args.cellInfo.width,args.cellInfo.height);\n                let txt = (+templ.value).toFixed(2);\n                context.font = \"13px Verdana\";\n                let width = context.measureText(txt).width;\n\n                let totalWidth = width + 4;\n                context.font = \"13px Verdana\";\n                context.fillStyle = templ.textColor;\n                context.textBaseline = \"top\";\n                context.fillText(txt, templ.width - (totalWidth + 10), (templ.height / 2.0) - 7);\n\n                context.font = \"13px 'Material Icons'\";\n                context.fillStyle = iconColor;\n                context.fillRect(templ.width - (5 + 4), (templ.height / 2.0) - 8, 4, 16);\n\n                 if (scale !== 1.0) {\n                    context.restore();\n                }\n            }\n\n            return;\n        }\n\n        let content = args.content as HTMLDivElement;\n        let sp: HTMLSpanElement;\n\n        if (content.childElementCount > 0) {\n            sp = content.children[0] as HTMLSpanElement;\n        } else {\n            content.style.textAlign = \"right\";\n            sp = document.createElement(\"span\");\n            sp.style.font = \"13px Verdana\";\n            sp.style.verticalAlign = \"center\";\n            content.appendChild(sp);\n        }\n\n        sp.textContent = (+templ.value).toFixed(2);\n\n        if ((sp as any).__isUp === undefined ||\n            (sp as any).__isUp !== priceShiftUp) {\n            (sp as any).__isUp = priceShiftUp;\n            if (priceShiftUp) {\n                sp.style.paddingRight = \"5px\";\n                sp.style.borderRight = this.valuesIncreasedBorder;\n                // sp.style.color = this.valuesIncreasedColor;\n            } else {\n                sp.style.paddingRight = \"5px\";\n                sp.style.borderRight = this.valuesDecreasedBorder;\n                // sp.style.color = this.valuesDecreasedColor;\n            }\n        }\n    }\n\n    public onGridStyleKey(grid: any, args: IgrCellStyleRequestedEventArgs) {\n        args.styleKey = \"grid\";\n    }\n\n    public onGridCellUpdating(grid: any, args: IgrTemplateCellUpdatingEventArgs) {\n        if (args.isCanvasBased) {\n            return;\n        }\n\n        let content = args.content as HTMLDivElement;\n        let icon: HTMLSpanElement;\n\n        if (content.childElementCount > 0) {\n            icon = content.children[0] as HTMLSpanElement;\n            icon.onclick = (e) => {\n                // console.log(\"grid clicked!!\")\n                e.stopPropagation();\n            }\n        } else {\n            icon = document.createElement(\"span\");\n            content.appendChild(icon);\n            icon.style.fontFamily = \"Material Icons\";\n            icon.style.fontSize = \"13px\";\n            icon.style.fontFeatureSettings = \"liga\";\n            icon.style.verticalAlign = \"center\";\n            icon.textContent = \"tablechart\";\n        }\n    }\n\n    public startTicking() {\n        if (!this.isTimerTicking) {\n            this.isTimerTicking = true;\n            window.setTimeout(() => this.onTimerTick(), 16);\n        }\n    }\n\n    public onGridGroupingAdd() {\n        let g = new IgrColumnGroupDescription();\n        g.field = \"Category\";\n        g.sortDirection = ListSortDirection.Descending;\n        this.grid.groupDescriptions.add(g);\n\n        g = new IgrColumnGroupDescription();\n        g.field = \"Type\";\n        g.sortDirection = ListSortDirection.Descending;\n        this.grid.groupDescriptions.add(g);\n\n        g = new IgrColumnGroupDescription();\n        g.field = \"Contract\";\n        g.sortDirection = ListSortDirection.Descending;\n        this.grid.groupDescriptions.add(g);\n    }\n\n    public onPriceDataBound(sender: any, args: IgrDataBindingEventArgs) {\n            let item: any = args.cellInfo.rowItem;\n            if (item === null) { return; }\n\n            if (item.PriceHeat > 0)\n            {\n                let p = +item.PriceHeat;\n                let minA = 1.0;\n                let maxA = 0.25;\n\n                let maxR = 0.0;\n                let minR = 1.0;\n                let minG = 1.0;\n                let maxG = 1.0;\n                let minB = 1.0;\n                let maxB = 0.0;\n\n                let a = minA + (maxA - minA) * p;\n                let r = minR + (maxR - minR) * p;\n                let g = minG + (maxG - minG) * p;\n                let b = minB + (maxB - minB) * p;\n                r = Math.round(r * 255.0);\n                g = Math.round(g * 255.0);\n                b = Math.round(b * 255.0);\n\n                let colorString = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n                args.cellInfo.background = colorString;\n            }\n            else if (item.PriceHeat < 0) {\n                let p = +item.PriceHeat * -1.0;\n                let minA = 1.0;\n                let maxA = 0.25;\n\n                let minR = 1.0;\n                let maxR = 1.0;\n                let minG = 1.0;\n                let maxG = 0.0;\n                let minB = 1.0;\n                let maxB = 0.0;\n\n                let a = minA + (maxA - minA) * p;\n                let r = minR + (maxR - minR) * p;\n                let g = minG + (maxG - minG) * p;\n                let b = minB + (maxB - minB) * p;\n                r = Math.round(r * 255.0);\n                g = Math.round(g * 255.0);\n                b = Math.round(b * 255.0);\n\n                let colorString = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n                args.cellInfo.background = colorString;\n            }\n            else\n            {\n                args.cellInfo.background = \"white\";\n            }\n    }\n}\n// rendering above class to the React DOM\nReactDOM.render(<DataGridTypeMarketingTable />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-marketing-table/src/DataGridTypeMarketingTable.css",
  "content": "@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\r\n\r\n/* .igContainer {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 100%;\r\n    min-width: 300px;\r\n} */\r\n\r\n.flex {\r\n    flex: 1;\r\n}\r\n\r\n.toolArea {\r\n  height: 120px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.toolAreaColumn {\r\n  /* line-height: 55px; */\r\n  /* height: 120px; */\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-right: 1rem;\r\n}\r\n\r\n.toolAreaRow {\r\n  /* height: 55px; */\r\n  /* line-height: 45px; */\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.toolAreaRow1 {\r\n  height: 55px;\r\n  line-height: 45px;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.toolAreaRow2 {\r\n  line-height: 55px;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.frequencySlider {\r\n  display: inline-block;\r\n  width: 120px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.volumeSlider {\r\n  display: inline-block;\r\n  width: 120px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.toolAreaLabel {\r\n  font-size: 1rem;\r\n    font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\r\n    font-weight: 400;\r\n    line-height: 1.5;\r\n    letter-spacing: 0.00938em;\r\n    white-space: nowrap;\r\n}\r\n\r\n.hiddenIcon {\r\n  font-family: Material Icons;\r\n  font-size: 20px;\r\n  font-feature-settings: \"liga\";\r\n  padding-right: 10px;\r\n  padding-left: 10px;\r\n  padding-top: 16px;\r\n\r\n\r\n  display: inline-block;\r\n  vertical-align: bottom;\r\n}\r\n\r\n.chartDialog div {\r\n  overflow: visible !important;\r\n  padding: 0px;\r\n  max-width: 100%;\r\n}\r\n\r\n.searchField {\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  width: 120px;\r\n  vertical-align: bottom;\r\n}\r\n\r\n.hiddenDrop {\r\n  vertical-align: bottom;\r\n  width: 120px;\r\n  margin-bottom: 6px;\r\n  margin-right: 10px;\r\n  margin-left: 10px;\r\n}",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-marketing-table/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-marketing-table/src/LiveFinancialData.ts",
  "content": "\r\n\r\n/* tslint:disable */\r\nexport const Regions: any[] = [\r\n  {\r\n      \"Name\": \"North America\",\r\n      \"Countries\": [ \"Canada\", \"United States\", \"Mexico\" ]\r\n  },\r\n  {\r\n      \"Name\": \"Middle East\",\r\n      \"Countries\": [ \"Turkey\", \"Iraq\", \"Saudi Arabia\", \"Syria\", \"UAE\", \"Israel\", \"Jordan\", \"Lebanon\", \"Oman\", \"Kuwait\", \"Qatar\", \"Bahrain\", \"Iran\" ]\r\n  },\r\n  {\r\n      \"Name\": \"Europe\",\r\n      \"Countries\": [ \"Russia\", \"Germany\", \"France\", \"United Kingdom\", \"Italy\", \"Spain\", \"Poland\", \"Romania\", \"Netherlands\", \"Belgium\", \"Greece\",\r\n          \"Portugal\", \"Czech Republic\", \"Hungary\", \"Sweden\", \"Austria\", \"Switzerland\", \"Bulgaria\", \"Denmark\", \"Finland\", \"Slovakia\", \"Norway\",\r\n          \"Ireland\", \"Croatia\", \"Slovenia\", \"Estonia\", \"Iceland\",]\r\n  },\r\n  {\r\n      \"Name\": \"Africa\",\r\n      \"Countries\": [ \"Nigeria\", \"Ethiopia\", \"Egypt\", \"South Africa\", \"Algeria\", \"Morocco\", \"Cameroon\", \"Niger\", \"Senegal\", \"Tunisia\", \"Libya\"]\r\n  },\r\n  {\r\n      \"Name\": \"Asia Pacific\",\r\n      \"Countries\": [ \"Afghanistan\", \"Australia\", \"Azerbaijan\", \"China\", \"Hong Kong\", \"India\", \"Indonesia\",\r\n          \"Japan\", \"Malaysia\", \"New Zealand\", \"Pakistan\", \"Philippines\", \"Korea\", \"Singapore\", \"Taiwan\", \"Thailand\"]\r\n  },\r\n  {\r\n      \"Name\": \"South America\",\r\n      \"Countries\": [ \"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\", \"Colombia\", \"Ecuador\", \"Guyana\", \"Paraguay\", \"Peru\", \"Suriname\", \"Uruguay\", \"Venezuela\" ]\r\n  }\r\n]\r\n\r\nexport const DealType: any[] = [\r\n  \"Buy\", \"Sell\"\r\n]\r\n\r\nexport const Contracts: any[] = [\r\n  \"Forwards\", \"Futures\", \"Options\", \"Swap\", \"CFD\"\r\n]\r\n\r\nexport const Settlements: any[] = [\r\n  \"Credit\", \"Cash\", \"Loan\"\r\n]\r\n\r\nexport const SectorTypes: any[] = [\r\n  \"Public\", \"Private\", \"Government\"\r\n]\r\n\r\nexport const CurrencyTypes: any[] = [\r\n  \"USD\", \"EUR\", \"PLN\", \"GBP\", \"YEN\"\r\n]\r\n\r\nexport const CountryRisks: any[] = [\r\n  \"Low\", \"High\",\r\n]\r\n\r\nexport const SecurityTypes: any[] = [\r\n  \"Poor\", \"Good\", \"High\",\r\n]\r\n\r\nexport const IssuerNames: any[] = [\r\n  \"American Airlines\", \"Delta Airlines\", \"Southwest\", \"FedEx\",\r\n]\r\n\r\nexport const RatingTypes: any[] = [\r\n  \"AAA\", \"BBB\", \"CCC\",\r\n]\r\n\r\nexport const DefaultData: any[] = [\r\n{\r\n  \"IndGroup\": \"Airlines\",\r\n  \"IndSector\": \"Consumer, Cyclical\",\r\n  \"IndCategory\": \"Airlines\",\r\n  // \"Sector\": \"Public\",\r\n  // \"Sector\": \"Pfd\",\r\n  // tslint:disable-next-line:object-literal-sort-keys\r\n  // \"Contract\": \"Complete\",\r\n  // \"Issuer\": \"AMERICAN AIRLINES GROUP\",\r\n  // \"Rating\": \"WR\",\r\n  \"Fitch\": \"N.A.\",\r\n  \"Collateral\": \"Assets\",\r\n  // \"Currency\": \"USD\",\r\n  // \"Security\": \"001765866 Pfd\",\r\n  \"Transactions\": \"1765866\",\r\n  // \"Ticker\": \"AAL\",\r\n  \"CPN\": \"7.875\",\r\n  \"Maturity\": \"7/13/2022\",\r\n  \"Spread\": 28.302,\r\n  \"KRD_3YR\": 0.00006,\r\n  // \"RISK_COUNTRY\": \"\",\r\n  \"KRD_5YR\": 0,\r\n  \"KRD_1YR\": -0.00187,\r\n}];\r\n\r\nexport const DataItems: any[] = [\r\n{\r\n \"Category\": \"Metal\",\r\n \"Type\": \"Gold\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 1281.10,\r\n \"Price\": 1280.7317,\r\n \"Buy\": 1280.7267,\r\n \"Sell\": 1280.7367,\r\n \"Change\": -0.3683,\r\n \"Change(%)\": -0.0287,\r\n \"Volume\": 48387,\r\n \"High(D)\": 1289.50,\r\n \"Low(D)\": 1279.10,\r\n \"High(Y)\": 1306,\r\n \"Low(Y)\": 1047.20,\r\n \"Start(Y)\": 1176.60,\r\n \"Change On Year(%)\": 8.8502\r\n},\r\n{\r\n \"Category\": \"Metal\",\r\n \"Type\": \"Silver\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 17.43,\r\n \"Price\": 17.42,\r\n \"Buy\": 17.43,\r\n \"Sell\": 17.43,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.0574,\r\n \"Volume\": 11720,\r\n \"High(D)\": 17.51,\r\n \"Low(D)\": 17.37,\r\n \"High(Y)\": 18.06,\r\n \"Low(Y)\": 13.73,\r\n \"Start(Y)\": 15.895,\r\n \"Change On Year(%)\": 9.5942\r\n},\r\n{\r\n \"Category\": \"Metal\",\r\n \"Type\": \"Copper\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 2.123,\r\n \"Price\": 2.113,\r\n \"Buy\": 2.123,\r\n \"Sell\": 2.123,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.471,\r\n \"Volume\": 28819,\r\n \"High(D)\": 2.16,\r\n \"Low(D)\": 2.11,\r\n \"High(Y)\": 2.94,\r\n \"Low(Y)\": 1.96,\r\n \"Start(Y)\": 2.45,\r\n \"Change On Year(%)\": -13.7551\r\n},\r\n{\r\n \"Category\": \"Metal\",\r\n \"Type\": \"Platinum\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 1071.60,\r\n \"Price\": 1071.0993,\r\n \"Buy\": 1071.0943,\r\n \"Sell\": 1071.1043,\r\n \"Change\": -0.5007,\r\n \"Change(%)\": -0.0467,\r\n \"Volume\": 3039,\r\n \"High(D)\": 1081.20,\r\n \"Low(D)\": 1070.50,\r\n \"High(Y)\": 1120.60,\r\n \"Low(Y)\": 812.40,\r\n \"Start(Y)\": 966.50,\r\n \"Change On Year(%)\": 10.8225\r\n},\r\n{\r\n \"Category\": \"Metal\",\r\n \"Type\": \"Palladium\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 600.55,\r\n \"Price\": 601.0005,\r\n \"Buy\": 600.9955,\r\n \"Sell\": 601.0055,\r\n \"Change\": 0.4505,\r\n \"Change(%)\": 0.075,\r\n \"Volume\": 651,\r\n \"High(D)\": 607.20,\r\n \"Low(D)\": 598.40,\r\n \"High(Y)\": 690,\r\n \"Low(Y)\": 458.6,\r\n \"Start(Y)\": 574.3,\r\n \"Change On Year(%)\": 4.6492\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Oil\",\r\n \"Spread\": 0.015,\r\n \"Open Price\": 45.54,\r\n \"Price\": 45.7899,\r\n \"Buy\": 45.7824,\r\n \"Sell\": 45.7974,\r\n \"Change\": 0.2499,\r\n \"Change(%)\": 0.5487,\r\n \"Volume\": 107196,\r\n \"High(D)\": 45.94,\r\n \"Low(D)\": 45.00,\r\n \"High(Y)\": 65.28,\r\n \"Low(Y)\": 30.79,\r\n \"Start(Y)\": 48.035,\r\n \"Change On Year(%)\": -4.6739\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Brent\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 46.06,\r\n \"Price\": 46.05,\r\n \"Buy\": 46.06,\r\n \"Sell\": 46.06,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.0217,\r\n \"Volume\": 59818,\r\n \"High(D)\": 46.48,\r\n \"Low(D)\": 45.60,\r\n \"High(Y)\": 71.14,\r\n \"Low(Y)\": 30.02,\r\n \"Start(Y)\": 50.58,\r\n \"Change On Year(%)\": -8.9561\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Natural Gas\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 2.094,\r\n \"Price\": 2.104,\r\n \"Buy\": 2.094,\r\n \"Sell\": 2.094,\r\n \"Change\": 0.01,\r\n \"Change(%)\": 0.4776,\r\n \"Volume\": 2783,\r\n \"High(D)\": 2.11,\r\n \"Low(D)\": 2.09,\r\n \"High(Y)\": 3.20,\r\n \"Low(Y)\": 1.84,\r\n \"Start(Y)\": 2.52,\r\n \"Change On Year(%)\": -16.5079\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Gas\",\r\n \"Spread\": 0.015,\r\n \"Open Price\": 1.5086,\r\n \"Price\": 1.9532,\r\n \"Buy\": 1.9457,\r\n \"Sell\": 1.9607,\r\n \"Change\": 0.4446,\r\n \"Change(%)\": 29.4686,\r\n \"Volume\": 2646,\r\n \"High(D)\": 1.9532,\r\n \"Low(D)\": 1.50,\r\n \"High(Y)\": 2.05,\r\n \"Low(Y)\": 1.15,\r\n \"Start(Y)\": 1.60,\r\n \"Change On Year(%)\": 22.0727\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Diesel\",\r\n \"Spread\": 0.015,\r\n \"Open Price\": 1.3474,\r\n \"Price\": 1.3574,\r\n \"Buy\": 1.3474,\r\n \"Sell\": 1.3474,\r\n \"Change\": 0.01,\r\n \"Change(%)\": 0.7422,\r\n \"Volume\": 2971,\r\n \"High(D)\": 1.36,\r\n \"Low(D)\": 1.34,\r\n \"High(Y)\": 2.11,\r\n \"Low(Y)\": 0.92,\r\n \"Start(Y)\": 1.515,\r\n \"Change On Year(%)\": -10.4026\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Ethanol\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 1.512,\r\n \"Price\": 2.7538,\r\n \"Buy\": 2.7488,\r\n \"Sell\": 2.7588,\r\n \"Change\": 1.2418,\r\n \"Change(%)\": 82.1323,\r\n \"Volume\": 14,\r\n \"High(D)\": 2.7538,\r\n \"Low(D)\": 1.1168,\r\n \"High(Y)\": 2.7538,\r\n \"Low(Y)\": 1.1168,\r\n \"Start(Y)\": 1.475,\r\n \"Change On Year(%)\": 86.7011\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Crude\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 27.55,\r\n \"Price\": 27.58,\r\n \"Buy\": 27.55,\r\n \"Sell\": 27.55,\r\n \"Change\": 0.03,\r\n \"Change(%)\": 0.1089,\r\n \"Volume\": 12,\r\n \"High(D)\": 27.55,\r\n \"Low(D)\": 27.55,\r\n \"High(Y)\": 29.32,\r\n \"Low(Y)\": 21.28,\r\n \"Start(Y)\": 25.30,\r\n \"Change On Year(%)\": 9.0119\r\n},\r\n{\r\n \"Category\": \"Oil\",\r\n \"Type\": \"Coal\",\r\n \"Spread\": 0.015,\r\n \"Open Price\": 0.4363,\r\n \"Price\": 0.4163,\r\n \"Buy\": 0.4363,\r\n \"Sell\": 0.4363,\r\n \"Change\": -0.02,\r\n \"Change(%)\": -4.584,\r\n \"Volume\": 3,\r\n \"High(D)\": 0.4363,\r\n \"Low(D)\": 0.4363,\r\n \"High(Y)\": 0.4841,\r\n \"Low(Y)\": 0.3954,\r\n \"Start(Y)\": 0.4398,\r\n \"Change On Year(%)\": -5.3326\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Wheat\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 465.50,\r\n \"Price\": 465.52,\r\n \"Buy\": 465.50,\r\n \"Sell\": 465.50,\r\n \"Change\": 0.02,\r\n \"Change(%)\": 0.0043,\r\n \"Volume\": 4318,\r\n \"High(D)\": 467.00,\r\n \"Low(D)\": 463.25,\r\n \"High(Y)\": 628.50,\r\n \"Low(Y)\": 449.50,\r\n \"Start(Y)\": 539.00,\r\n \"Change On Year(%)\": -13.6327\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Corn\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 379.50,\r\n \"Price\": 379.8026,\r\n \"Buy\": 379.7976,\r\n \"Sell\": 379.8076,\r\n \"Change\": 0.3026,\r\n \"Change(%)\": 0.0797,\r\n \"Volume\": 11266,\r\n \"High(D)\": 381.00,\r\n \"Low(D)\": 377.75,\r\n \"High(Y)\": 471.25,\r\n \"Low(Y)\": 351.25,\r\n \"Start(Y)\": 411.25,\r\n \"Change On Year(%)\": -7.6468\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Sugar\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 15.68,\r\n \"Price\": 14.6742,\r\n \"Buy\": 14.6692,\r\n \"Sell\": 14.6792,\r\n \"Change\": -1.0058,\r\n \"Change(%)\": -6.4146,\r\n \"Volume\": 4949,\r\n \"High(D)\": 15.70,\r\n \"Low(D)\": 14.6742,\r\n \"High(Y)\": 16.87,\r\n \"Low(Y)\": 11.37,\r\n \"Start(Y)\": 14.12,\r\n \"Change On Year(%)\": 3.9249\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Soybean\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 1038.00,\r\n \"Price\": 1038.6171,\r\n \"Buy\": 1038.6121,\r\n \"Sell\": 1038.6221,\r\n \"Change\": 0.6171,\r\n \"Change(%)\": 0.0595,\r\n \"Volume\": 20356,\r\n \"High(D)\": 1044.00,\r\n \"Low(D)\": 1031.75,\r\n \"High(Y)\": 1057.00,\r\n \"Low(Y)\": 859.50,\r\n \"Start(Y)\": 958.25,\r\n \"Change On Year(%)\": 8.3869\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Soy oil\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 33.26,\r\n \"Price\": 33.7712,\r\n \"Buy\": 33.7662,\r\n \"Sell\": 33.7762,\r\n \"Change\": 0.5112,\r\n \"Change(%)\": 1.5371,\r\n \"Volume\": 10592,\r\n \"High(D)\": 33.7712,\r\n \"Low(D)\": 33.06,\r\n \"High(Y)\": 35.43,\r\n \"Low(Y)\": 26.61,\r\n \"Start(Y)\": 31.02,\r\n \"Change On Year(%)\": 8.8692\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Soy Meat\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 342.60,\r\n \"Price\": 342.62,\r\n \"Buy\": 342.60,\r\n \"Sell\": 342.60,\r\n \"Change\": 0.02,\r\n \"Change(%)\": 0.0058,\r\n \"Volume\": 5646,\r\n \"High(D)\": 345.40,\r\n \"Low(D)\": 340.30,\r\n \"High(Y)\": 353.40,\r\n \"Low(Y)\": 261.70,\r\n \"Start(Y)\": 307.55,\r\n \"Change On Year(%)\": 11.403\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"OJ Future\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 140.60,\r\n \"Price\": 140.1893,\r\n \"Buy\": 140.1843,\r\n \"Sell\": 140.1943,\r\n \"Change\": -0.4107,\r\n \"Change(%)\": -0.2921,\r\n \"Volume\": 7,\r\n \"High(D)\": 140.1893,\r\n \"Low(D)\": 0.00,\r\n \"High(Y)\": 155.95,\r\n \"Low(Y)\": 113.00,\r\n \"Start(Y)\": 134.475,\r\n \"Change On Year(%)\": 4.2493\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Coffee\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 125.70,\r\n \"Price\": 125.69,\r\n \"Buy\": 125.70,\r\n \"Sell\": 125.70,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.008,\r\n \"Volume\": 1654,\r\n \"High(D)\": 125.80,\r\n \"Low(D)\": 125.00,\r\n \"High(Y)\": 155.75,\r\n \"Low(Y)\": 115.35,\r\n \"Start(Y)\": 135.55,\r\n \"Change On Year(%)\": -7.2741\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Cocoa\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 3076.00,\r\n \"Price\": 3076.03,\r\n \"Buy\": 3076.00,\r\n \"Sell\": 3076.00,\r\n \"Change\": 0.03,\r\n \"Change(%)\": 0.001,\r\n \"Volume\": 978,\r\n \"High(D)\": 3078.00,\r\n \"Low(D)\": 3066.00,\r\n \"High(Y)\": 3406.00,\r\n \"Low(Y)\": 2746.00,\r\n \"Start(Y)\": 3076.00,\r\n \"Change On Year(%)\": 0.001\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Rice\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 11.245,\r\n \"Price\": 10.4154,\r\n \"Buy\": 10.4104,\r\n \"Sell\": 10.4204,\r\n \"Change\": -0.8296,\r\n \"Change(%)\": -7.3779,\r\n \"Volume\": 220,\r\n \"High(D)\": 11.38,\r\n \"Low(D)\": 10.4154,\r\n \"High(Y)\": 14.14,\r\n \"Low(Y)\": 9.70,\r\n \"Start(Y)\": 11.92,\r\n \"Change On Year(%)\": -12.6228\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Oats\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 194.50,\r\n \"Price\": 194.2178,\r\n \"Buy\": 194.2128,\r\n \"Sell\": 194.2228,\r\n \"Change\": -0.2822,\r\n \"Change(%)\": -0.1451,\r\n \"Volume\": 64,\r\n \"High(D)\": 195.75,\r\n \"Low(D)\": 194.00,\r\n \"High(Y)\": 241.25,\r\n \"Low(Y)\": 183.75,\r\n \"Start(Y)\": 212.50,\r\n \"Change On Year(%)\": -8.6034\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Milk\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 12.87,\r\n \"Price\": 12.86,\r\n \"Buy\": 12.87,\r\n \"Sell\": 12.87,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.0777,\r\n \"Volume\": 7,\r\n \"High(D)\": 12.89,\r\n \"Low(D)\": 12.81,\r\n \"High(Y)\": 16.96,\r\n \"Low(Y)\": 12.81,\r\n \"Start(Y)\": 14.885,\r\n \"Change On Year(%)\": -13.6043\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Cotton\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 61.77,\r\n \"Price\": 61.76,\r\n \"Buy\": 61.77,\r\n \"Sell\": 61.77,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.0162,\r\n \"Volume\": 3612,\r\n \"High(D)\": 62.06,\r\n \"Low(D)\": 61.32,\r\n \"High(Y)\": 67.59,\r\n \"Low(Y)\": 54.33,\r\n \"Start(Y)\": 60.96,\r\n \"Change On Year(%)\": 1.3123\r\n},\r\n{\r\n \"Category\": \"Agriculture\",\r\n \"Type\": \"Lumber\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 303.90,\r\n \"Price\": 304.5994,\r\n \"Buy\": 304.5944,\r\n \"Sell\": 304.6044,\r\n \"Change\": 0.6994,\r\n \"Change(%)\": 0.2302,\r\n \"Volume\": 2,\r\n \"High(D)\": 304.5994,\r\n \"Low(D)\": 303.90,\r\n \"High(Y)\": 317.10,\r\n \"Low(Y)\": 236.00,\r\n \"Start(Y)\": 276.55,\r\n \"Change On Year(%)\": 10.1426\r\n},\r\n{\r\n \"Category\": \"Livestock\",\r\n \"Type\": \"LV Cattle\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 120.725,\r\n \"Price\": 120.705,\r\n \"Buy\": 120.725,\r\n \"Sell\": 120.725,\r\n \"Change\": -0.02,\r\n \"Change(%)\": -0.0166,\r\n \"Volume\": 4,\r\n \"High(D)\": 120.725,\r\n \"Low(D)\": 120.725,\r\n \"High(Y)\": 147.98,\r\n \"Low(Y)\": 113.90,\r\n \"Start(Y)\": 130.94,\r\n \"Change On Year(%)\": -7.8166\r\n},\r\n{\r\n \"Category\": \"Livestock\",\r\n \"Type\": \"FD Cattle\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 147.175,\r\n \"Price\": 148.6065,\r\n \"Buy\": 148.6015,\r\n \"Sell\": 148.6115,\r\n \"Change\": 1.4315,\r\n \"Change(%)\": 0.9727,\r\n \"Volume\": 5,\r\n \"High(D)\": 148.6065,\r\n \"Low(D)\": 147.175,\r\n \"High(Y)\": 190.00,\r\n \"Low(Y)\": 138.10,\r\n \"Start(Y)\": 164.05,\r\n \"Change On Year(%)\": -9.4139\r\n},\r\n{\r\n \"Category\": \"Livestock\",\r\n \"Type\": \"Lean Hogs\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 81.275,\r\n \"Price\": 81.8146,\r\n \"Buy\": 81.8096,\r\n \"Sell\": 81.8196,\r\n \"Change\": 0.5396,\r\n \"Change(%)\": 0.664,\r\n \"Volume\": 1,\r\n \"High(D)\": 81.8146,\r\n \"Low(D)\": 81.275,\r\n \"High(Y)\": 83.98,\r\n \"Low(Y)\": 70.25,\r\n \"Start(Y)\": 77.115,\r\n \"Change On Year(%)\": 6.0943\r\n},\r\n{\r\n \"Category\": \"Currencies\",\r\n \"Type\": \"USD IDX Future\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 93.88,\r\n \"Price\": 93.7719,\r\n \"Buy\": 93.7619,\r\n \"Sell\": 93.7819,\r\n \"Change\": -0.1081,\r\n \"Change(%)\": -0.1151,\r\n \"Volume\": 5788,\r\n \"High(D)\": 94.05,\r\n \"Low(D)\": 93.7534,\r\n \"High(Y)\": 100.70,\r\n \"Low(Y)\": 91.88,\r\n \"Start(Y)\": 96.29,\r\n \"Change On Year(%)\": -2.6151\r\n},\r\n{\r\n \"Category\": \"Currencies\",\r\n \"Type\": \"USD/JPY Future\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 9275.50,\r\n \"Price\": 9277.3342,\r\n \"Buy\": 9277.3242,\r\n \"Sell\": 9277.3442,\r\n \"Change\": 1.8342,\r\n \"Change(%)\": 0.0198,\r\n \"Volume\": 47734,\r\n \"High(D)\": 9277.3342,\r\n \"Low(D)\": 0.93,\r\n \"High(Y)\": 9483.00,\r\n \"Low(Y)\": 0.93,\r\n \"Start(Y)\": 4741.965,\r\n \"Change On Year(%)\": 95.6432\r\n},\r\n{\r\n \"Category\": \"Currencies\",\r\n \"Type\": \"GBP/USD Future\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 1.4464,\r\n \"Price\": 1.1941,\r\n \"Buy\": 1.1841,\r\n \"Sell\": 1.2041,\r\n \"Change\": -0.2523,\r\n \"Change(%)\": -17.4441,\r\n \"Volume\": 29450,\r\n \"High(D)\": 1.45,\r\n \"Low(D)\": 1.1941,\r\n \"High(Y)\": 1.59,\r\n \"Low(Y)\": 1.1941,\r\n \"Start(Y)\": 1.485,\r\n \"Change On Year(%)\": -19.59\r\n},\r\n{\r\n \"Category\": \"Currencies\",\r\n \"Type\": \"AUD/USD Future\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 0.7344,\r\n \"Price\": 0.7444,\r\n \"Buy\": 0.7344,\r\n \"Sell\": 0.7344,\r\n \"Change\": 0.01,\r\n \"Change(%)\": 1.3617,\r\n \"Volume\": 36764,\r\n \"High(D)\": 0.74,\r\n \"Low(D)\": 0.73,\r\n \"High(Y)\": 0.79,\r\n \"Low(Y)\": 0.68,\r\n \"Start(Y)\": 0.735,\r\n \"Change On Year(%)\": 1.2789\r\n},\r\n{\r\n \"Category\": \"Currencies\",\r\n \"Type\": \"USD/CAD Future\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 0.7744,\r\n \"Price\": 0.9545,\r\n \"Buy\": 0.9445,\r\n \"Sell\": 0.9645,\r\n \"Change\": 0.1801,\r\n \"Change(%)\": 23.2622,\r\n \"Volume\": 13669,\r\n \"High(D)\": 0.9545,\r\n \"Low(D)\": 0.77,\r\n \"High(Y)\": 0.9545,\r\n \"Low(Y)\": 0.68,\r\n \"Start(Y)\": 0.755,\r\n \"Change On Year(%)\": 26.4295\r\n},\r\n{\r\n \"Category\": \"Currencies\",\r\n \"Type\": \"USD/CHF Future\",\r\n \"Spread\": 0.02,\r\n \"Open Price\": 1.0337,\r\n \"Price\": 1.0437,\r\n \"Buy\": 1.0337,\r\n \"Sell\": 1.0337,\r\n \"Change\": 0.01,\r\n \"Change(%)\": 0.9674,\r\n \"Volume\": 5550,\r\n \"High(D)\": 1.03,\r\n \"Low(D)\": 1.03,\r\n \"High(Y)\": 1.11,\r\n \"Low(Y)\": 0.98,\r\n \"Start(Y)\": 1.045,\r\n \"Change On Year(%)\": -0.1244\r\n},\r\n{\r\n \"Category\": \"Index\",\r\n \"Type\": \"DOW Future\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 17711.00,\r\n \"Price\": 17712.1515,\r\n \"Buy\": 17712.1465,\r\n \"Sell\": 17712.1565,\r\n \"Change\": 1.1515,\r\n \"Change(%)\": 0.0065,\r\n \"Volume\": 22236,\r\n \"High(D)\": 17727.00,\r\n \"Low(D)\": 17642.00,\r\n \"High(Y)\": 18083.00,\r\n \"Low(Y)\": 15299.00,\r\n \"Start(Y)\": 16691.00,\r\n \"Change On Year(%)\": 6.118\r\n},\r\n{\r\n \"Category\": \"Index\",\r\n \"Type\": \"S&P Future\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 2057.50,\r\n \"Price\": 2056.6018,\r\n \"Buy\": 2056.5968,\r\n \"Sell\": 2056.6068,\r\n \"Change\": -0.8982,\r\n \"Change(%)\": -0.0437,\r\n \"Volume\": 142780,\r\n \"High(D)\": 2059.50,\r\n \"Low(D)\": 2049.00,\r\n \"High(Y)\": 2105.50,\r\n \"Low(Y)\": 1794.50,\r\n \"Start(Y)\": 1950.00,\r\n \"Change On Year(%)\": 5.4668\r\n},\r\n{\r\n \"Category\": \"Index\",\r\n \"Type\": \"NAS Future\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 4341.25,\r\n \"Price\": 4341.28,\r\n \"Buy\": 4341.25,\r\n \"Sell\": 4341.25,\r\n \"Change\": 0.03,\r\n \"Change(%)\": 0.0007,\r\n \"Volume\": 18259,\r\n \"High(D)\": 4347.00,\r\n \"Low(D)\": 4318.00,\r\n \"High(Y)\": 4719.75,\r\n \"Low(Y)\": 3867.75,\r\n \"Start(Y)\": 4293.75,\r\n \"Change On Year(%)\": 1.107\r\n},\r\n{\r\n \"Category\": \"Index\",\r\n \"Type\": \"S&P MID MINI\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 1454.30,\r\n \"Price\": 1455.7812,\r\n \"Buy\": 1455.7762,\r\n \"Sell\": 1455.7862,\r\n \"Change\": 1.4812,\r\n \"Change(%)\": 0.1018,\r\n \"Volume\": 338,\r\n \"High(D)\": 1455.7812,\r\n \"Low(D)\": 1448.00,\r\n \"High(Y)\": 1527.30,\r\n \"Low(Y)\": 1236.00,\r\n \"Start(Y)\": 1381.65,\r\n \"Change On Year(%)\": 5.3654\r\n},\r\n{\r\n \"Category\": \"Index\",\r\n \"Type\": \"S&P 600 MINI\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 687.90,\r\n \"Price\": 687.88,\r\n \"Buy\": 687.90,\r\n \"Sell\": 687.90,\r\n \"Change\": -0.02,\r\n \"Change(%)\": -0.0029,\r\n \"Volume\": 0,\r\n \"High(D)\": 0.00,\r\n \"Low(D)\": 0.00,\r\n \"High(Y)\": 620.32,\r\n \"Low(Y)\": 595.90,\r\n \"Start(Y)\": 608.11,\r\n \"Change On Year(%)\": 13.1177\r\n},\r\n{\r\n \"Category\": \"Interest Rate\",\r\n \"Type\": \"US 30YR Future\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 164.875,\r\n \"Price\": 164.1582,\r\n \"Buy\": 164.1532,\r\n \"Sell\": 164.1632,\r\n \"Change\": -0.7168,\r\n \"Change(%)\": -0.4347,\r\n \"Volume\": 28012,\r\n \"High(D)\": 165.25,\r\n \"Low(D)\": 164.0385,\r\n \"High(Y)\": 169.38,\r\n \"Low(Y)\": 151.47,\r\n \"Start(Y)\": 160.425,\r\n \"Change On Year(%)\": 2.3271\r\n},\r\n{\r\n \"Category\": \"Interest Rate\",\r\n \"Type\": \"US 2Y Future\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 109.3984,\r\n \"Price\": 109.3884,\r\n \"Buy\": 109.3984,\r\n \"Sell\": 109.3984,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.0091,\r\n \"Volume\": 17742,\r\n \"High(D)\": 109.41,\r\n \"Low(D)\": 109.38,\r\n \"High(Y)\": 109.80,\r\n \"Low(Y)\": 108.62,\r\n \"Start(Y)\": 109.21,\r\n \"Change On Year(%)\": 0.1634\r\n},\r\n{\r\n \"Category\": \"Interest Rate\",\r\n \"Type\": \"US 10YR Future\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 130.5625,\r\n \"Price\": 130.5825,\r\n \"Buy\": 130.5625,\r\n \"Sell\": 130.5625,\r\n \"Change\": 0.02,\r\n \"Change(%)\": 0.0153,\r\n \"Volume\": 189310,\r\n \"High(D)\": 130.63,\r\n \"Low(D)\": 130.44,\r\n \"High(Y)\": 132.64,\r\n \"Low(Y)\": 125.48,\r\n \"Start(Y)\": 129.06,\r\n \"Change On Year(%)\": 1.1797\r\n},\r\n{\r\n \"Category\": \"Interest Rate\",\r\n \"Type\": \"Euro$ 3M\",\r\n \"Spread\": 0.01,\r\n \"Open Price\": 99.18,\r\n \"Price\": 99.17,\r\n \"Buy\": 99.18,\r\n \"Sell\": 99.18,\r\n \"Change\": -0.01,\r\n \"Change(%)\": -0.0101,\r\n \"Volume\": 29509,\r\n \"High(D)\": 99.18,\r\n \"Low(D)\": 99.17,\r\n \"High(Y)\": 99.38,\r\n \"Low(Y)\": 98.41,\r\n \"Start(Y)\": 98.895,\r\n \"Change On Year(%)\": 0.2781\r\n}\r\n];\r\n\r\ninterface UpdateResponse {\r\n  data: any[];\r\n  recordsUpdated: number;\r\n}\r\n\r\n/* tslint:enable */\r\nexport class LiveFinancialData {\r\n\r\n  public static generateData(count: number): any[] {\r\n      const data: any[] = [];\r\n      for (let i = 0; i < count; i++) {\r\n          const rand = Math.floor(Math.random() * Math.floor(DataItems.length));\r\n\r\n          const item = Object.assign({}, DataItems[rand]);\r\n          item.Settlement = this.getRandomItem(Settlements);\r\n          item.Contract = this.getRandomItem(Contracts);\r\n          const region = this.getRandomItem(Regions);\r\n          item.Region = region.Name;\r\n          item.Country = this.getRandomItem(region.Countries);\r\n          item.Risk = this.getRandomItem(CountryRisks);\r\n          item.Sector = this.getRandomItem(SectorTypes);\r\n          item.Currency = this.getRandomItem(CurrencyTypes);\r\n          item.Security = this.getRandomItem(SecurityTypes);\r\n          item.Issuer = this.getRandomItem(IssuerNames);\r\n          item.Maturity = this.getRandomDate();\r\n          item.Rating = this.getRandomItem(RatingTypes);\r\n\r\n          for (const mockData of DefaultData) {\r\n              for (const prop in mockData) {\r\n                  if (mockData.hasOwnProperty(prop)) {\r\n                      item[prop] = mockData[prop];\r\n                  }\r\n              }\r\n          }\r\n          item.ID = i;\r\n          this.randomizeDataValues(item);\r\n          data.push(item);\r\n      }\r\n      return data;\r\n  }\r\n\r\n  public static updateAllPrices(data: any[]): any[] {\r\n      const currData = [];\r\n      for (const dataRow of data) {\r\n        const item = Object.assign({}, dataRow);\r\n        this.randomizeDataValues(item);\r\n        currData.push(item);\r\n      }\r\n      return currData;\r\n  }\r\n\r\n  public static updateRandomPrices(data: any[]): any {\r\n      const currData = data.slice(0, data.length + 1);\r\n      let y = 0;\r\n      for (let i = Math.round(Math.random() * 10); i < data.length; i += Math.round(Math.random() * 10)) {\r\n        const item = Object.assign({}, data[i]);\r\n        this.randomizeDataValues(item);\r\n        currData[i] = item;\r\n        y++;\r\n      }\r\n      return currData;\r\n  }\r\n\r\n  public static updateRandomPrices2(data: any[]): UpdateResponse {\r\n      const currData = data.slice(0, data.length + 1);\r\n      let y = 0;\r\n      for (let i = Math.round(Math.random() * 10); i < data.length; i += Math.round(Math.random() * 10)) {\r\n        const item = Object.assign({}, data[i]);\r\n        this.randomizeDataValues(item);\r\n        currData[i] = item;\r\n        y++;\r\n      }\r\n      return {data: currData, recordsUpdated: y };\r\n  }\r\n\r\n  public static randomizeDataValues(item: any): void {\r\n      const changeP = \"Change(%)\";\r\n      const res = this.getRandomPrice(item.Price);\r\n      item.Change = res.Price - item.Price;\r\n      item.Price = res.Price;\r\n      item[changeP] = res.ChangePercent;\r\n  }\r\n\r\n  public static getRandomPrice(oldPrice: any): any {\r\n      const rnd = parseFloat(Math.random().toFixed(2));\r\n      const volatility = 2;\r\n      let newPrice = 0;\r\n\r\n      let changePercent = 2 * volatility * rnd;\r\n      if (changePercent > volatility) {\r\n          changePercent -= (2 * volatility);\r\n      }\r\n      const changeAmount = oldPrice * (changePercent / 100);\r\n      newPrice = oldPrice + changeAmount;\r\n      const result = { Price: 0, ChangePercent: 0 };\r\n      result.Price = Math.round(newPrice * 100) / 100;\r\n      result.ChangePercent = Math.round(changePercent * 100) / 100;\r\n      return result;\r\n  }\r\n\r\n  public static getRandomDate(): Date {\r\n      const now: Date = new Date();\r\n      const month = this.getRandomNumber(0, 8);\r\n      const day = this.getRandomNumber(10, 27);\r\n      return new Date(now.getFullYear(), month, day);\r\n  }\r\n\r\n  public static getRandomItem(array: any[]): any {\r\n      const index = Math.round(this.getRandomNumber(0, array.length - 1));\r\n      return array[index];\r\n  }\r\n\r\n  public static getRandomNumber(min: number, max: number): number {\r\n      return Math.round(min + Math.random() * (max - min));\r\n  }\r\n\r\n  public static getRandomCountry(region: any): string {\r\n      if (region.Countries === undefined) {\r\n          return this.getRandomItem(Regions[2].Countries);\r\n      } else {\r\n          return this.getRandomItem(region.Countries);\r\n      }\r\n  }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 }
]
}