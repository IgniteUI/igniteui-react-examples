{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-matrix-table/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// grid modules:\nimport { IgrDataGridModule } from 'igniteui-react-grids';\nimport { IgrDataGrid } from 'igniteui-react-grids';\nimport { IgrTextColumn } from 'igniteui-react-grids';\nimport { IgrTemplateColumn } from 'igniteui-react-grids';\nimport { IgrTemplateCellInfo } from 'igniteui-react-grids';\nimport { IgrTemplateHeader } from 'igniteui-react-grids';\nimport { IgrTemplateCellUpdatingEventArgs } from 'igniteui-react-grids';\nimport { IgrTemplateHeaderCellUpdatingEventArgs } from 'igniteui-react-grids';\n\nIgrDataGridModule.register();\n\nexport default class DataGridTypeMatrixTable extends React.Component<any, any> {\n\n    public dataPeople: any[];\n    public dataRelations: any[];\n\n    public VerticalHeader: IgrTemplateHeader;\n    public HorizontalRightHeader: IgrTemplateHeader;\n    public HorizontalLeftHeader: IgrTemplateHeader;\n    public cellSize: number = 50;\n\n    public names: string[] = [\"Kyle\", \"Oscar\", \"Gina\", \"Irene\", \"Kate\", \"Brenda\", \"Mark\", \"John\", \"Andrew\", \"Casey\", \"Holly\", \"Larry\", \"Pete\", \"Steve\"];\n\n    constructor(props: any) {\n        super(props);\n\n        this.onVerticalHeaderUpdating = this.onVerticalHeaderUpdating.bind(this);\n        this.onCellUpdating = this.onCellUpdating.bind(this);\n\n        this.createData();\n\n        this.VerticalHeader = new IgrTemplateHeader({});\n        this.VerticalHeader.cellUpdating = (s, e) => this.onVerticalHeaderUpdating(s, e);\n\n        this.HorizontalRightHeader = new IgrTemplateHeader({});\n        this.HorizontalRightHeader.cellUpdating = (s, e) => this.onHorizontalHeaderUpdating(s, e, \"right\");\n\n        this.HorizontalLeftHeader = new IgrTemplateHeader({});\n        this.HorizontalLeftHeader.cellUpdating = (s, e) => this.onHorizontalHeaderUpdating(s, e, \"left\");\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <IgrDataGrid\n                    height=\"100%\"\n                    width=\"100%\"\n\n                    rowHeight={this.cellSize}\n                    rowSeparatorHeight=\"1\"\n                    rowSeparatorBackground=\"lightgray\"\n                    headerSeparatorBackground=\"lightgray\"\n                    headerSeparatorWidth=\"1\"\n                    headerHeight=\"110\"\n\n                    columnResizingMode=\"None\"\n                    autoGenerateColumns=\"false\"\n                    dataSource={this.dataRelations}>\n\n                    <IgrTextColumn field=\"Name\"\n                    headerText=\"Friends\"\n                    header={this.HorizontalRightHeader}\n                    width=\"*>110\" horizontalAlignment=\"right\" />\n\n                    {this.renderDataColumns()}\n\n                    <IgrTextColumn field=\"Count\"\n                    headerText=\"Total\"\n                    header={this.HorizontalLeftHeader}\n                    width=\"*>110\" horizontalAlignment=\"left\"    />\n\n               </IgrDataGrid>\n            </div>\n        );\n    }\n\n    public renderDataColumns(): JSX.Element[] {\n        const columns: JSX.Element[] = [];\n\n        for (let i = 0; i < this.dataPeople.length; i++) {\n            const name = this.dataPeople[i].Name;\n            columns.push(this.renderColumn(name));\n        }\n        return columns;\n    }\n\n    public renderColumn(columnPath: string, columnName?: string) {\n        if (columnName === undefined) {\n            columnName = columnPath;\n        }\n        return <IgrTemplateColumn key={columnPath}\n        field={columnPath} headerText={columnName}\n        width={this.cellSize.toString()}\n        paddingBottom=\"0\" paddingLeft=\"0\" paddingRight=\"0\" paddingTop=\"0\"\n        header={this.VerticalHeader}\n        cellUpdating={this.onCellUpdating}\n        horizontalAlignment=\"center\"\n        verticalAlignment=\"bottom\"\n        borderLeftWidth=\"0.5\" border=\"lightgray\"\n        borderRightWidth=\"0.5\"\n        borderTopWidth=\"0\"\n        borderBottomWidth=\"0\"\n        />;\n    }\n\n    public onVerticalHeaderUpdating(s: IgrTemplateHeader, e: IgrTemplateHeaderCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n        let label: HTMLSpanElement | null = null;\n        if (content.childElementCount === 0) {\n            content.style.lineHeight = \"140px\";\n            label = document.createElement(\"div\");\n            label.style.background = \"transparent\";\n            label.style.color = \"rgb(24, 29, 31)\";\n            label.style.fontSize = \"13px\";\n            label.style.fontFamily = \"Verdana\";\n            label.style.transform = \"rotate(270deg)\";\n            label.style.transformOrigin = \"center\";\n            content.appendChild(label);\n        } else {\n            label = content.children[0] as HTMLDivElement;\n        }\n\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        label.textContent = info.value;\n    }\n\n    public onHorizontalHeaderUpdating(s: IgrTemplateHeader, e: IgrTemplateHeaderCellUpdatingEventArgs, align: string) {\n        const content = e.content as HTMLDivElement;\n        let label: HTMLSpanElement | null = null;\n        if (content.childElementCount === 0) {\n            content.style.lineHeight = \"140px\";\n            label = document.createElement(\"div\");\n            label.style.background = \"transparent\";\n            label.style.color = \"rgb(24, 29, 31)\";\n            label.style.fontSize = \"13px\";\n            label.style.fontFamily = \"Verdana\";\n            label.style.verticalAlign = \"bottom\";\n            label.style.textAlign = align;\n            content.appendChild(label);\n        } else {\n            label = content.children[0] as HTMLDivElement;\n        }\n\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        label.textContent = info.value;\n    }\n\n    public onCellUpdating(s: IgrTemplateColumn, e: IgrTemplateCellUpdatingEventArgs) {\n        const content = e.content as HTMLDivElement;\n        const info = e.cellInfo as IgrTemplateCellInfo;\n        let cell: HTMLDivElement | null = null;\n\n        if (content.childElementCount === 0) {\n            content.style.margin = \"0px\";\n            content.style.padding = \"0px\";\n            cell = document.createElement(\"div\");\n            cell.style.margin = \"0px\";\n            cell.style.padding = \"0px\";\n            cell.style.fontFamily = \"Verdana\";\n            cell.style.fontSize = \"large\";\n            cell.style.textAlign = \"center\";\n            cell.style.fontSize = \"large\";\n            content.appendChild(cell);\n        } else {\n            cell = content.children[0] as HTMLDivElement;\n        }\n\n        if (info.value === 1) {\n            cell.style.color = \"lightgray\";\n            cell.style.background = \"lightgray\";\n            cell.textContent = \"\";\n        } else if (info.value > 0) {\n            cell.style.color = \"#02d302\";\n            cell.style.background = \"transparent\";\n            cell.textContent = \"\\u2714\";\n        } else {\n            cell.style.color = \"red\";\n            cell.style.background = \"transparent\";\n            cell.textContent = \"\\u2716\";\n        }\n    }\n\n    public createData() {\n\n        this.dataPeople = [];\n        this.dataRelations = [];\n\n        this.names.sort();\n\n        for (let i = 0; i < this.names.length; i++) {\n            const person: any = {};\n            person.ID = i;\n            person.Name = this.names[i];\n            this.dataPeople.push(person);\n        }\n\n        let friendships = new Map<string, number>();\n\n        for (let row = 0; row < this.dataPeople.length; row++) {\n            const person1 = this.dataPeople[row];\n\n            for (let col = 0; col < this.dataPeople.length; col++) {\n                const person2 = this.dataPeople[col];\n\n                const rand = Math.random() - 0.5;\n\n                if (person1.Name !== person2.Name) {\n                    if (rand > 0) {\n                       const p1p2 = person1.Name + person2.Name;\n                       const p2p1 = person2.Name + person1.Name;\n\n                       if (!friendships.has(p1p2)) {\n                            friendships.set(p1p2, rand);\n                       }\n\n                       if (!friendships.has(p2p1)) {\n                            friendships.set(p2p1, rand);\n                       }\n                    }\n                }\n            }\n        }\n\n        for (let row = 0; row < this.dataPeople.length; row++) {\n            const person1 = this.dataPeople[row];\n\n            const relation: any = {};\n            relation.ID = row;\n            relation.Name = person1.Name;\n            relation.Count = 0;\n\n            for (let col = 0; col < this.dataPeople.length; col++) {\n                const person2 = this.dataPeople[col];\n                const key = person2.Name\n\n                if (person1.Name === person2.Name) {\n                    relation[key] = 1;\n                } else  {\n\n                    const p1p2 = person1.Name + person2.Name;\n\n                    if (friendships.has(p1p2)) {\n                        relation[key] = friendships.get(p1p2);\n                        relation.Count += 1;\n                    } else {\n                        relation[key] = 0;\n                    }\n                }\n            }\n            this.dataRelations.push(relation);\n        }\n\n    }\n\n    public getRandomNumber(min: number, max: number): number {\n        return Math.round(min + Math.random() * (max - min));\n    }\n\n    public getRandomItem(array: any[]): any {\n        const index = Math.round(this.getRandomNumber(0, array.length - 1));\n        return array[index];\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<DataGridTypeMatrixTable />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/grids/data-grid/type-matrix-table/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}