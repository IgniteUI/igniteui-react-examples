{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/overview/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './DockManagerStyles.css';\nimport { IgcDockManagerComponent, IgcContentPane } from \"igniteui-dockmanager\";\nimport { IgcDockManagerPaneType, IgcSplitPaneOrientation } from \"igniteui-dockmanager\";\nimport { defineCustomElements } from \"igniteui-dockmanager/loader\";\n\n/* eslint-disable */\ndeclare global {\n    namespace JSX {\n        // tslint:disable-next-line:interface-name\n        interface IntrinsicElements {\n            \"igc-dockmanager\": any;\n        }\n    }\n}\n/* eslint-enable */\n\ndefineCustomElements();\n\nexport default class DockManagerOverview extends React.Component {\n\n    public dockManager: IgcDockManagerComponent;\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <igc-dockmanager id=\"dockManager\">\n                    <div slot=\"content1\" className=\"dockManagerContent\">Content 1</div>\n                    <div slot=\"content2\" className=\"dockManagerContent\">Content 2</div>\n                    <div slot=\"content3\" className=\"dockManagerContent\">Content 3</div>\n                    <div slot=\"content4\" className=\"dockManagerContent\">Content 4</div>\n                    <div slot=\"content5\" className=\"dockManagerContent\">Content 5</div>\n                    <div slot=\"content6\" className=\"dockManagerContent\">Content 6</div>\n                    <div slot=\"content7\" className=\"dockManagerContent\">Content 7</div>\n                    <div slot=\"content8\" className=\"dockManagerContent\">Content 8</div>\n                    <div slot=\"content9\" className=\"dockManagerContent\">Content 9</div>\n                </igc-dockmanager>\n            </div>\n        );\n    }\n\n    public createContentPane(contentID: string, paneHeader: string): any {\n        const pane = {\n            // size: 150,\n            header: paneHeader,\n            type: IgcDockManagerPaneType.contentPane,\n            contentId: contentID\n        };\n        return pane;\n    }\n\n    public createSplitPane(orientation: IgcSplitPaneOrientation, contentPanes: any[], size?: number): any {\n        const pane =  {\n            type: IgcDockManagerPaneType.splitPane,\n            orientation: orientation,\n            panes: contentPanes,\n            size: size\n        };\n        return pane;\n    }\n\n    public createTabPane(orientation: IgcSplitPaneOrientation, contentPanes: any[], size?: number): any {\n        const pane =  {\n            type: IgcDockManagerPaneType.documentHost,\n            size: size,\n            rootPane: {\n                type: IgcDockManagerPaneType.splitPane,\n                orientation: orientation,\n                panes: [\n                    {\n                        type: IgcDockManagerPaneType.tabGroupPane,\n                        panes: contentPanes\n                    }\n                ]\n            }\n        };\n        return pane;\n    }\n\n    public componentDidMount() {\n\n        const pane1 = this.createContentPane('content1', 'Content Pane 1');\n        const pane2 = this.createContentPane('content2', 'Unpinned Pane 1');\n        pane2.isPinned = false;\n\n        const pane3 = this.createContentPane('content3', 'Document 1');\n        const pane4 = this.createContentPane('content4', 'Document 2');\n\n        const contentPane5 = this.createContentPane('content5', 'Unpinned Pane 2');\n        contentPane5.isPinned = false;\n\n        const pane6 = this.createContentPane('content6', 'Tab 1');\n        const pane7 = this.createContentPane('content7', 'Tab 2');\n        const pane8 = this.createContentPane('content8', 'Content Pane 2');\n        const pane9 = this.createContentPane('content9', 'Floating Pane');\n\n        const tabPane1 = this.createTabPane(IgcSplitPaneOrientation.horizontal, [ pane3, pane4 ], 200);\n\n        const splitPane1 = this.createSplitPane(IgcSplitPaneOrientation.vertical, [ pane1, pane2 ]);\n        const splitPane2 = this.createSplitPane(IgcSplitPaneOrientation.vertical, [ tabPane1, contentPane5 ], 200);\n\n        this.dockManager = document.getElementById(\"dockManager\") as IgcDockManagerComponent;\n        this.dockManager.layout = {\n            rootPane: {\n                type: IgcDockManagerPaneType.splitPane,\n                orientation: IgcSplitPaneOrientation.horizontal,\n                panes: [\n                    splitPane1, // or:\n                    // {\n                    //     type: IgcDockManagerPaneType.splitPane,\n                    //     orientation: IgcSplitPaneOrientation.vertical,\n                    //     panes: [ pane1, pane2 ]\n                    // },\n                    splitPane2, // or:\n                    // {\n                    //     type: IgcDockManagerPaneType.splitPane,\n                    //     orientation: IgcSplitPaneOrientation.vertical,\n                    //     size: 200,\n                    //     panes: [\n                    //         tabPane1,\n                    //         contentPane5\n                    //     ]\n                    // },\n                    {\n                        type: IgcDockManagerPaneType.splitPane,\n                        orientation: IgcSplitPaneOrientation.vertical,\n                        panes: [\n                            {\n                                type: IgcDockManagerPaneType.tabGroupPane,\n                                size: 200,\n                                panes: [ pane6, pane7 ]\n                            },\n                            pane8\n                        ]\n                    }\n                ]\n            },\n            floatingPanes: [\n                {\n                    type: IgcDockManagerPaneType.splitPane,\n                    orientation: IgcSplitPaneOrientation.horizontal,\n                    floatingHeight: 150,\n                    floatingWidth: 250,\n                    floatingLocation: { x: 300, y: 200 },\n                    panes: [ pane9 ]\n                }\n            ]\n        };\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<DockManagerOverview />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/overview/src/DockManagerStyles.css",
  "content": "\r\n.dockManagerContent {\r\n    padding: 0.5rem;\r\n    height: calc(100% - 1rem);\r\n    width: calc(100% - 1rem);\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* background: orange; */\r\n}\r\n\r\n.dockManagerFull {\r\n    padding: 0rem;\r\n    margin: 0rem;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n}\r\n\r\n.dockManagerFrame {\r\n    padding: 0rem;\r\n    margin: 0rem;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n}\r\n\r\n.employeesDetailsRow {\r\n    height: 4rem;\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding-left: 0.5rem;\r\n    padding-right: 0.5rem;\r\n    padding-top: 0.5rem;\r\n    padding-bottom: 0.5rem;\r\n    align-items: center;\r\n}\r\n\r\n",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/overview/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}