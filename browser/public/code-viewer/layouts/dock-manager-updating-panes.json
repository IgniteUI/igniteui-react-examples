{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/updating-panes/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './DockManagerStyles.css';\nimport WorldUtils from \"./WorldUtils\"\nimport { DockManagerSharedData } from \"./DockManagerSharedData\";\nimport { IgrGeographicMap, IgrGeographicMapModule } from \"igniteui-react-maps\";\nimport { IgrGeographicSymbolSeries } from 'igniteui-react-maps';\nimport { IgrArcGISOnlineMapImagery } from 'igniteui-react-maps';\nimport { IgrDataChartInteractivityModule } from 'igniteui-react-charts';\nimport { IgrDataContext } from 'igniteui-react-core';\nimport { IgrCategoryChartModule, MarkerType, ToolTipType, AxisLabelsLocation } from \"igniteui-react-charts\";\nimport { IgrCategoryChart, CategoryTransitionInMode, CategoryChartType } from \"igniteui-react-charts\";\nimport { IgrLegendModule } from \"igniteui-react-charts\";\nimport { IgcDockManagerComponent, IgcContentPane } from \"igniteui-dockmanager\";\nimport { IgcDockManagerPaneType, IgcSplitPaneOrientation } from \"igniteui-dockmanager\";\nimport { defineCustomElements } from \"igniteui-dockmanager/loader\";\n\n/* eslint-disable */\ndeclare global {\n    namespace JSX {\n        // tslint:disable-next-line:interface-name\n        interface IntrinsicElements {\n            \"igc-dockmanager\": any;\n        }\n    }\n}\n/* eslint-enable */\n\ndefineCustomElements();\n\nIgrCategoryChartModule.register();\nIgrGeographicMapModule.register();\nIgrDataChartInteractivityModule.register();\nIgrLegendModule.register();\n\nexport default class DockManagerUpdatingPanes extends React.Component<any, any> {\n    private chart: IgrCategoryChart;\n    private map: IgrGeographicMap;\n    private dockManager: IgcDockManagerComponent;\n    private employeesDatabase = DockManagerSharedData.getEmployees(60);\n\n    private employeeListContainer: HTMLDivElement;\n    private employeeListPane: IgcContentPane;\n    private employeesList: HTMLDivElement[] = [];\n\n    private productivityChart: IgrCategoryChart;\n    private productivityChartPane: IgcContentPane;\n    private productivityChartContainer: HTMLDivElement;\n\n    private geoLocationMap: IgrGeographicMap;\n    private geoLocationMapPane: IgcContentPane;\n    private geoLocationMapContainer: HTMLDivElement;\n    private geoLocationSeries: IgrGeographicSymbolSeries;\n\n    constructor(props: any) {\n        super(props);\n\n        this.mapRef = this.mapRef.bind(this);\n        this.chartRef = this.chartRef.bind(this);\n\n        this.createEmployeeList = this.createEmployeeList.bind(this);\n        this.createLocationMapTooltip = this.createLocationMapTooltip.bind(this);\n        this.createProductivityChart = this.createProductivityChart.bind(this);\n\n        this.createLocationMap = this.createLocationMap.bind(this);\n        this.onEmployeeClick = this.onEmployeeClick.bind(this);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <igc-dockmanager id=\"dockManager\">\n                    <div\n                        className=\"dockManagerContent\"\n                        slot=\"employeeListContainer\"\n                        id=\"employeeListContainer\"/>\n                    <div\n                        className=\"dockManagerContent\"\n                        slot=\"productivityChartContainer\"\n                        id=\"productivityChartContainer\">\n                            <IgrCategoryChart\n                                key=\"productivityChart\"\n                                ref={this.chartRef}\n                                width=\"calc(100% - 2rem)\"\n                                height=\"100%\"/>\n                    </div>\n                    <div\n                        className=\"dockManagerContent\"\n                        slot=\"geoLocationMapContainer\"\n                        id=\"geoLocationMapContainer\" >\n                            <IgrGeographicMap\n                                ref={this.mapRef}\n                                key=\"geoLocationMap\"\n                                width=\"100%\"\n                                height=\"100%\"/>\n                    </div>\n                </igc-dockmanager>\n            </div>\n        );\n    }\n\n    private chartRef(chart: IgrCategoryChart) {\n        this.chart = chart;\n        if (this.chart && this.map) {\n            this.onReady();\n        }\n    }\n\n    private mapRef(map: IgrGeographicMap) {\n        this.map = map;\n        if (this.chart && this.map) {\n            this.onReady();\n        }\n    }\n\n    private onReady() {\n        this.createEmployeeList();\n        this.createLocationMap();\n        this.createProductivityChart();\n\n        this.employeeListContainer = document.getElementById(\"employeeListContainer\") as HTMLDivElement;\n        this.geoLocationMapContainer = document.getElementById(\"geoLocationMapContainer\") as HTMLDivElement;\n        this.productivityChartContainer = document.getElementById(\"productivityChartContainer\") as HTMLDivElement;\n        this.productivityChartContainer.style.overflow = \"hidden\";\n\n        this.productivityChartPane = {\n            size: 150,\n            header: \"EMPLOYEE PRODUCTIVITY\",\n            type: IgcDockManagerPaneType.contentPane,\n            contentId: \"productivityChartContainer\"\n        };\n\n        this.geoLocationMapPane = {\n            size: 150,\n            header: \"EMPLOYEE LOCATIONS\",\n            type: IgcDockManagerPaneType.contentPane,\n            contentId: \"geoLocationMapContainer\"\n        };\n\n        this.employeeListPane = {\n            header: \"EMPLOYEE LIST\",\n            type: IgcDockManagerPaneType.contentPane,\n            contentId: \"employeeListContainer\"\n        };\n\n        this.dockManager = document.getElementById(\"dockManager\") as IgcDockManagerComponent;\n        this.dockManager.layout = {\n            rootPane: {\n                type: IgcDockManagerPaneType.splitPane,\n                orientation: IgcSplitPaneOrientation.horizontal,\n                panes: [\n                    {\n                        type: IgcDockManagerPaneType.splitPane,\n                        orientation: IgcSplitPaneOrientation.vertical,\n                        size: 100,\n                        panes: [this.employeeListPane]\n                    },\n                    {\n                        type: IgcDockManagerPaneType.splitPane,\n                        orientation: IgcSplitPaneOrientation.vertical,\n                        size: 300,\n                        panes: [this.productivityChartPane, this.geoLocationMapPane]\n                    }\n                ]\n            }\n        };\n\n        this.onEmployeeClick(this.employeesDatabase[0]);\n    }\n\n    public createProductivityChart() {\n        this.productivityChart = this.chart;\n        this.productivityChart.includedProperties = [\"Value\", \"Month\"];\n        this.productivityChart.chartType = CategoryChartType.Column;\n        this.productivityChart.thickness = 1;\n        this.productivityChart.yAxisLabelLocation = AxisLabelsLocation.OutsideRight;\n        this.productivityChart.yAxisLabelRightMargin = 20;\n        this.productivityChart.yAxisMinimumValue = 25;\n        this.productivityChart.yAxisMaximumValue = 100;\n        this.productivityChart.yAxisInterval = 25;\n        this.productivityChart.xAxisInterval = 1;\n        this.productivityChart.width = \"100%\";\n        this.productivityChart.height = \"100%\";\n        this.productivityChart.transitionDuration = 100;\n        this.productivityChart.transitionInDuration = 1000;\n        this.productivityChart.isSeriesHighlightingEnabled = true;\n        this.productivityChart.crosshairsAnnotationEnabled = true;\n        this.productivityChart.crosshairsSnapToData = true;\n        this.productivityChart.toolTipType = ToolTipType.Item;\n\n        this.productivityChart.transitionInMode = CategoryTransitionInMode.AccordionFromBottom;\n    }\n\n    public createEmployeeList() {\n\n        let employeeListContainer = document.getElementById(\"employeeListContainer\") as HTMLDivElement;\n        employeeListContainer.style.width = \"calc(100% - 1rem)\";\n        employeeListContainer.style.height = \"calc(100% - 1rem)\";\n        // employeeListContainer.style.overflowY = \"scroll\";\n        employeeListContainer.style.display = \"flex\";\n        employeeListContainer.style.flexDirection = \"column\";\n\n        for (const employee of this.employeesDatabase) {\n            let employeeName = document.createElement(\"div\");\n            employeeName.style.paddingLeft = \"1rem\";\n            employeeName.textContent = employee.Name;\n            // let employeeSurname = document.createElement(\"div\");\n            // employeeSurname.style.paddingLeft = \"1rem\";\n            // employeeSurname.textContent = employee.LastName;\n            let employeePhoto = document.createElement(\"img\");\n            employeePhoto.height = 50;\n            employeePhoto.width = 50;\n            employeePhoto.src = employee.Photo;\n\n            let employeeListItem = document.createElement(\"div\");\n            employeeListItem.id = employee.ID;\n            employeeListItem.style.height = \"3rem\";\n            employeeListItem.style.display = \"flex\";\n            employeeListItem.style.flexDirection = \"row\";\n            employeeListItem.style.paddingLeft = \"0.5rem\";\n            employeeListItem.style.paddingTop = \"0.5rem\";\n            employeeListItem.style.paddingBottom = \"0.5rem\";\n            employeeListItem.style.alignItems = \"center\";\n            employeeListItem.style.cursor = \"pointer\";\n            employeeListItem.appendChild(employeePhoto);\n            employeeListItem.appendChild(employeeName);\n            employeeListItem.addEventListener(\"click\", e =>\n                this.onEmployeeClick(employee)\n            );\n            // employeeListItem.appendChild(employeeSurname);\n\n            employeeListContainer.appendChild(employeeListItem);\n            this.employeesList.push(employeeListItem);\n        }\n    }\n\n    public createLocationMap() {\n        let allLocationSeries = new IgrGeographicSymbolSeries({\n            name: \"symbolSeries1\"\n        });\n        allLocationSeries.latitudeMemberPath = \"Latitude\";\n        allLocationSeries.longitudeMemberPath = \"Longitude\";\n        allLocationSeries.dataSource = this.employeesDatabase;\n        allLocationSeries.markerType = MarkerType.Circle;\n        allLocationSeries.markerBrush = \"white\";\n        allLocationSeries.markerOutline = \"Red\";\n        allLocationSeries.tooltipTemplate = this.createLocationMapTooltip;\n\n        this.geoLocationSeries = new IgrGeographicSymbolSeries({\n            name: \"symbolSeries2\"\n        });\n        this.geoLocationSeries.latitudeMemberPath = \"Latitude\";\n        this.geoLocationSeries.longitudeMemberPath = \"Longitude\";\n        this.geoLocationSeries.dataSource = [];\n        this.geoLocationSeries.markerType = MarkerType.Circle;\n        this.geoLocationSeries.markerBrush = \"white\";\n        this.geoLocationSeries.markerOutline = \"LimeGreen\";\n        this.geoLocationSeries.tooltipTemplate = this.createLocationMapTooltip;\n\n        const tileSource = new IgrArcGISOnlineMapImagery();\n        tileSource.mapServerUri = \"https://services.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer\";\n\n        this.geoLocationMap = this.map;\n        this.geoLocationMap.height = \"100%\";\n        this.geoLocationMap.width = \"100%\";\n        this.geoLocationMap.series.add(allLocationSeries);\n        this.geoLocationMap.series.add(this.geoLocationSeries);\n        this.geoLocationMap.backgroundContent = tileSource;\n    }\n\n    public createLocationMapTooltip(tooltipProps: any) {\n        const dataContext = tooltipProps.dataContext as IgrDataContext;\n        if (!dataContext) return null;\n\n        const dataItem = dataContext.item as any;\n        if (!dataItem) return null;\n\n        const lbl = dataItem.City;\n        const scr = dataItem.CountryFlag;\n        const lat = WorldUtils.toStringLat(dataItem.Latitude);\n        const lon = WorldUtils.toStringLon(dataItem.Longitude);\n\n        return <div className=\"tooltipHorizontal\">\n            <img className=\"tooltipFlagImage\" src={scr}/>\n            <div className=\"tooltipBox\">\n                <div className=\"tooltipRow\">\n                    <div className=\"tooltipLbl\">Latitude:</div>\n                    <div className=\"tooltipVal\">{lat}</div>\n                </div>\n                <div className=\"tooltipRow\">\n                    <div className=\"tooltipLbl\">Longitude:</div>\n                    <div className=\"tooltipVal\">{lon}</div>\n                </div>\n                <div className=\"tooltipRow\">\n                    <div className=\"tooltipLbl\">City: </div>\n                    <div className=\"tooltipVal\">{lbl}</div>\n                </div>\n            </div>\n        </div>\n    }\n\n    public onEmployeeClick(employee: any) {\n\n        for (const employeeListItem of this.employeesList) {\n            if (employeeListItem.id !== employee.ID) {\n                employeeListItem.style.background = \"transparent\";\n            } else {\n                employeeListItem.style.background = \"#a8d3fd\";\n\n                this.geoLocationSeries.dataSource = [employee];\n                this.productivityChart.dataSource = employee.Productivity;\n\n                let geoZoom: any = {};\n                geoZoom.width = 50;\n                geoZoom.height = 25;\n                geoZoom.left = employee.Longitude - geoZoom.width / 2;\n                geoZoom.top = employee.Latitude - geoZoom.height / 2;\n                this.geoLocationMap.zoomToGeographic(geoZoom);\n            }\n        }\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<DockManagerUpdatingPanes />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/updating-panes/src/DockManagerSharedData.ts",
  "content": "export class DockManagerSharedData {\r\n\r\n    public static getEmployees(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const contacts: any[] = [];\r\n        let maleCount: number = 0;\r\n        let femaleCount: number = 0;\r\n        const emails: string[] = [ \"gmail.com\", \"yahoo.com\", \"facebook.com\", \"twitter.com\"];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const age: number = Math.round(this.getRandomNumber(20, 40));\r\n            const gender: string = this.getRandomGender();\r\n            const firstName: string = this.getRandomNameFirst(gender);\r\n            const lastName: string = this.getRandomNameLast();\r\n            const street: string = this.getRandomStreet();\r\n            const location: any = this.getRandomItem(this.locations);\r\n            // const country: string = this.getRandomItem(this.countries);\r\n            // const city: string = this.getRandomCity(country);\r\n\r\n            const generation = Math.floor(age / 10) * 10 + \"s\";\r\n            const email: string = firstName.toLowerCase() + \"@\" + this.getRandomItem(emails);\r\n            let photoPath: any;\r\n\r\n            if (gender === \"male\") {\r\n                maleCount++;\r\n                if (maleCount > 26) {\r\n                    maleCount = 1;\r\n                }\r\n                photoPath = \"https://static.infragistics.com/xplatform/images/people/GUY\" + this.pad(maleCount, 2) + \".png\";\r\n            }\r\n            else {\r\n                femaleCount++;\r\n                if (femaleCount > 24) {\r\n                    femaleCount = 1;\r\n                }\r\n                photoPath = \"https://static.infragistics.com/xplatform/images/people/GIRL\" + this.pad(femaleCount, 2) + \".png\";\r\n            }\r\n\r\n            let person: any = {};\r\n            person.Address = street + \",\" + location.city;\r\n            person.Age = age;\r\n            person.Birthday = this.getBirthday(age);\r\n            person.City = location.city;\r\n            person.Country = location.country;\r\n            person.Location = location.city + \", \" + location.country;\r\n            person.Latitude = location.lat;\r\n            person.Longitude = location.lon;\r\n            person.CountryFlag = \"https://static.infragistics.com/xplatform/images/flags/\" + location.country + \".png\";\r\n            person.Email = email;\r\n            person.FirstName = firstName;\r\n            person.Gender = \"https://static.infragistics.com/xplatform/images/genders/\" + gender + \".png\";\r\n            person.Generation = generation;\r\n            person.ID = this.pad(i + 1, 5);\r\n            person.LastName = lastName;\r\n            person.Name = firstName + \" \" + lastName;\r\n            person.Phone = this.getRandomPhone();\r\n            person.Productivity = this.getProductivity(26);\r\n            person.Photo = photoPath;\r\n            person.Street = street;\r\n\r\n            person.Salary = this.getRandomNumber(40, 200) * 1000;\r\n            person.Sales = this.getRandomNumber(200, 990) * 1000;\r\n            if (person.Salary < 50000) {\r\n                person.Income = \"Low\";\r\n            } else if (person.Salary < 100000) {\r\n                person.Income = \"Average\";\r\n            } else {\r\n                person.Income = \"High\";\r\n            }\r\n\r\n            contacts.push(person);\r\n        }\r\n        return contacts;\r\n    }\r\n\r\n    public static getProductivity(weekCount?: number): any[] {\r\n        if (weekCount === undefined) {\r\n            weekCount = 52;\r\n        }\r\n        const months = [\r\n            \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\r\n            \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"\r\n        ];\r\n\r\n        const sales: any[] = [];\r\n        let value = 50;\r\n        for (const month of months) {\r\n            sales.push({Value: value, Month: month});\r\n            value += this.getRandomNumber(-5, 10);\r\n            value = Math.max(20, value);\r\n        }\r\n        // const today: Date = new Date();\r\n        // const year: number = today.getFullYear();\r\n\r\n        // for (let day = 0; day < 365; day++) {\r\n        //     const value = this.getRandomNumber(-100, 100);\r\n\r\n        //     const month: number = this.getRandomNumber(0, 8);\r\n        //     // const day: number = this.getRandomNumber(10, 27);\r\n        //     //     const date = new Date(year, month, day);\r\n\r\n        //     sales.push({Value: value, Month: month});\r\n        // }\r\n        // for (let w = 0; w < weekCount; w++) {\r\n        //     const value = this.getRandomNumber(-100, 100);\r\n        //     sales.push({Value: value, Week: w.toString()});\r\n        // }\r\n        return sales;\r\n    }\r\n\r\n    public static getSales(count?: number): any[] {\r\n        if (count === undefined) {\r\n            count = 250;\r\n        }\r\n\r\n        const names: string[] = [\r\n            \"Intel CPU\", \"AMD CPU\",\r\n            \"Intel Motherboard\", \"AMD Motherboard\", \"NVIDIA Motherboard\",\r\n            \"NVIDIA GPU\", \"GIGABYTE GPU\", \"Asus GPU\", \"AMD GPU\", \"MSI GPU\",\r\n            \"Corsair Memory\", \"Patriot Memory\", \"Skill Memory\",\r\n            \"Samsung HDD\", \"WD HDD\", \"Seagate HDD\", \"Intel HDD\",\r\n            \"Samsung SSD\", \"WD SSD\", \"Seagate SSD\", \"Intel SSD\",\r\n            \"Samsung Monitor\", \"Asus Monitor\", \"LG Monitor\", \"HP Monitor\" ];\r\n        const countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\", \"Japan\", \"Germany\"];\r\n\r\n        const sales: any[] = [];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const price = this.getRandomNumber(100, 900);\r\n            const items = this.getRandomNumber(10, 80);\r\n            const value = price * items;\r\n            const margin = this.getRandomNumber(3, 10);\r\n            const profit = Math.round((price * margin / 100) * items);\r\n            sales.push({\r\n                BundlePrice: price,\r\n                Margin: margin,\r\n                OrderDate: this.getRandomDate(new Date(2012, 0, 1), new Date()),\r\n                OrderItems: items,\r\n                OrderValue: value, //  Math.round(value / 1000) + \",\" + Math.round(value % 1000),\r\n                ProductID: 1001 + i,\r\n                ProductName: this.getRandomItem(names),\r\n                Profit: profit,\r\n                Countries: this.getRandomItem(countries),\r\n            });\r\n        }\r\n        return sales;\r\n    }\r\n\r\n    private static genders: string[] = [\"male\", \"female\"];\r\n    private static maleNames: string[] = [\"Kyle\", \"Oscar\", \"Ralph\", \"Mike\", \"Bill\", \"Frank\", \"Howard\", \"Jack\", \"Larry\", \"Pete\", \"Steve\", \"Vince\", \"Mark\", \"Alex\", \"Max\", \"Brian\", \"Chris\", \"Andrew\", \"Martin\", \"Mike\", \"Steve\", \"Glenn\", \"Bruce\"];\r\n    private static femaleNames: string[] = [\"Gina\", \"Irene\", \"Katie\", \"Brenda\", \"Casey\", \"Fiona\", \"Holly\", \"Kate\", \"Liz\", \"Pamela\", \"Nelly\", \"Marisa\", \"Monica\", \"Anna\", \"Jessica\", \"Sofia\", \"Isabella\", \"Margo\", \"Jane\", \"Audrey\", \"Sally\", \"Melanie\", \"Greta\", \"Aurora\", \"Sally\"];\r\n    private static lastNames: string[] = [\"Adams\", \"Crowley\", \"Ellis\", \"Martinez\", \"Irvine\", \"Maxwell\", \"Clark\", \"Owens\", \"Rooney\", \"Lincoln\", \"Thomas\", \"Spacey\", \"Betts\", \"King\", \"Newton\", \"Fitzgerald\", \"Holmes\", \"Jefferson\", \"Landry\", \"Newberry\", \"Perez\", \"Spencer\", \"Starr\", \"Carter\", \"Edwards\", \"Stark\", \"Johnson\", \"Fitz\", \"Chief\", \"Blanc\", \"Perry\", \"Stone\", \"Williams\", \"Lane\", \"Jobs\", \"Adama\", \"Power\", \"Tesla\"];\r\n    // private static countries: string[] = [\"USA\", \"UK\", \"France\", \"Canada\", \"Poland\"];\r\n    // private static citiesUS: string[] = [\"New York\", \"Los Angeles\", \"Miami\", \"San Francisco\", \"San Diego\", \"Las Vegas\"];\r\n    // private static citiesUK: string[] = [\"London\", \"Liverpool\", \"Manchester\"];\r\n    // private static citiesFR: string[] = [\"Paris\", \"Marseille\", \"Lyon\"];\r\n    // private static citiesCA: string[] = [\"Toronto\", \"Vancouver\", \"Montreal\"];\r\n    // private static citiesPL: string[] = [\"Krakow\", \"Warsaw\", \"Wroclaw\", \"Gdansk\"];\r\n    // private static citiesJP: string[] = [\"Tokyo\", \"Osaka\", \"Kyoto\", \"Yokohama\"];\r\n    // private static citiesGR: string[] = [\"Berlin\", \"Bonn\", \"Cologne\", \"Munich\", \"Hamburg\"];\r\n    private static roadSuffixes: string[] = [\"Road\", \"Street\", \"Way\"];\r\n    private static roadNames: string[] = [\"Main\", \"Garden\", \"Broad\", \"Oak\", \"Cedar\", \"Park\", \"Pine\", \"Elm\", \"Market\", \"Hill\"];\r\n\r\n    private static locations: any[] = [\r\n        { lat: 54.689, lon: 25.276, country: \"Lithuania\", city: \"Vilnius\" },\r\n        { lat: 53.900, lon: 27.576, country: \"Belarus\", city: \"Minsk\" },\r\n        { lat: 53.342, lon: -6.257, country: \"Ireland\", city: \"Dublin\" },\r\n        { lat: 52.516, lon: 13.328, country: \"Germany\", city: \"Berlin\" },\r\n        { lat: 52.373, lon: 4.895, country: \"Netherlands\", city: \"Amsterdam\" },\r\n        { lat: 52.245, lon: 21.012, country: \"Poland\", city: \"Warsaw\" },\r\n        { lat: 51.488, lon: -0.178, country: \"UK\", city: \"London\" },\r\n        // { lat: 50.837, lon: 4.368, country: \"Belgium\", city: \"Bruxelles\" },\r\n        { lat: 50.448, lon: 30.502, country: \"Ukraine\", city: \"Kiev\" },\r\n        { lat: 50.106, lon: 14.457, country: \"Czech-Republic\", city: \"Prague\" },\r\n        { lat: 48.882, lon: 2.433, country: \"France\", city: \"Paris\" },\r\n        // { lat: 48.202, lon: 16.321, country: \"Austria\", city: \"Vienna\" },\r\n        // { lat: 47.929, lon: 106.912, country: \"Mongolia\", city: \"Ulaanbaatar\" },\r\n        { lat: 47.515, lon: 19.094, country: \"Hungary\", city: \"Budapest\" },\r\n        { lat: 46.948, lon: 7.446, country: \"Switzerland\", city: \"Bern\" },\r\n        { lat: 45.374, lon: -75.651, country: \"Canada\", city: \"Ottawa\" },\r\n        // { lat: 44.800, lon: 20.413, country: \"Serbia\", city: \"Beograd\" },\r\n        // { lat: 44.430, lon: 26.123, country: \"Romania\", city: \"Bucuresti\" },\r\n        { lat: 43.255, lon: 76.913, country: \"Kazakhstan\", city: \"Almaty\" },\r\n        { lat: 42.707, lon: 23.332, country: \"Bulgaria\", city: \"Sofia\" },\r\n        { lat: 41.722, lon: 44.783, country: \"Georgia\", city: \"Tbilisi\" },\r\n        // { lat: 41.332, lon: 19.832, country: \"Albania\", city: \"Tirane\" },\r\n        { lat: 40.442, lon: -3.691, country: \"Spain\", city: \"Madrid\" },\r\n        // { lat: 40.324, lon: 49.816, country: \"Azerbaijan\", city: \"Baku\" },\r\n        // { lat: 40.208, lon: 44.533, country: \"Armenia\", city: \"Yerevan\" },\r\n        { lat: 39.929, lon: 32.853, country: \"Turkey\", city: \"Ankara\" },\r\n        { lat: 39.906, lon: 116.388, country: \"China\", city: \"Beijing\" },\r\n        { lat: 39.029, lon: 125.758, country: \"Korea-North\", city: \"Pyongyang\" },\r\n        { lat: 38.891, lon: -76.954, country: \"USA\", city: \"Washington\" },\r\n        { lat: 37.950, lon: 58.390, country: \"Turkmenistan\", city: \"Ashkhabad\" },\r\n        { lat: 37.542, lon: 126.935, country: \"Korea-South\", city: \"Seoul\" },\r\n        { lat: 36.819, lon: 10.166, country: \"Tunisia\", city: \"Tunis\" },\r\n        { lat: 35.774, lon: 51.448, country: \"Iran\", city: \"Tehran\" },\r\n        { lat: 35.683, lon: 139.809, country: \"Japan\", city: \"Tokyo\" },\r\n        { lat: 34.531, lon: 69.137, country: \"Afghanistan\", city: \"Kabul\" },\r\n        { lat: 33.718, lon: 73.061, country: \"Pakistan\", city: \"Islamabad\" },\r\n        { lat: 33.519, lon: 36.313, country: \"Syria\", city: \"Damascus\" },\r\n        { lat: 33.334, lon: 44.398, country: \"Iraq\", city: \"Baghdad\" },\r\n        { lat: 31.949, lon: 35.933, country: \"Jordan\", city: \"Amman\" },\r\n        { lat: 30.078, lon: 31.251, country: \"Egypt\", city: \"Cairo\" },\r\n        { lat: 28.569, lon: 77.217, country: \"India\", city: \"New Delhi\" },\r\n        { lat: 27.712, lon: 85.313, country: \"Nepal\", city: \"Kathmandu\" },\r\n        // { lat: 27.443, lon: 89.667, country: \"Bhutan\", city: \"Thimbu\" },\r\n        { lat: 25.204, lon: 51.497, country: \"Qatar\", city: \"Doha\" },\r\n        { lat: 25.035, lon: 121.507, country: \"Taiwan\", city: \"Taipei\" },\r\n        { lat: 23.710, lon: 90.407, country: \"Bangladesh\", city: \"Dhaka\" },\r\n        { lat: 21.032, lon: 105.820, country: \"Vietnam\", city: \"Hanoi\" },\r\n        { lat: 19.427, lon: -99.128, country: \"Mexico\", city: \"Mexico City\" },\r\n        { lat: 18.527, lon: -72.343, country: \"Haiti\", city: \"Port-au-Prince\" },\r\n        // { lat: 18.401, lon: -66.082, country: \"USA\", city: \"San Juan\" },\r\n        { lat: 18.016, lon: -76.797, country: \"Jamaica\", city: \"Kingston\" },\r\n        { lat: 16.872, lon: 96.125, country: \"Myanmar\", city: \"Rangoon\" },\r\n        { lat: 15.361, lon: 44.210, country: \"Yemen\", city: \"Sanaa\" },\r\n        { lat: 14.618, lon: -90.525, country: \"Guatemala\", city: \"Guatemala\" },\r\n        { lat: 14.099, lon: -87.203, country: \"Honduras\", city: \"Tegucigalpa\" },\r\n        { lat: 13.746, lon: 100.553, country: \"Thailand\", city: \"Bangkok\" },\r\n        // { lat: 13.701, lon: -89.200, country: \"El-Salvador\", city: \"San Salvador\" },\r\n        { lat: 13.605, lon: 2.083, country: \"Niger\", city: \"Niamey\" },\r\n        { lat: 12.653, lon: -7.986, country: \"Mali\", city: \"Bamako\" },\r\n        { lat: 12.151, lon: -86.273, country: \"Nicaragua\", city: \"Managua\" },\r\n        // { lat: 11.565, lon: 104.913, country: \"Cambodia\", city: \"Phnom Penh\" },\r\n        { lat: 10.496, lon: -66.898, country: \"Venezuela\", city: \"Caracas\" },\r\n        { lat: 9.930, lon: -84.079, country: \"Costa-Rica\", city: \"San Jose\" },\r\n        { lat: 5.559, lon: -0.201, country: \"Ghana\", city: \"Accra\" },\r\n        { lat: 5.325, lon: -4.022, country: \"Ivory-Coast\", city: \"Abidjan\" },\r\n        { lat: 4.630, lon: -74.081, country: \"Colombia\", city: \"Bogota\" },\r\n        // { lat: 4.366, lon: 18.562, country: \"Central-African-Republic\", city: \"Bangui\" },\r\n        { lat: 3.865, lon: 11.514, country: \"Cameroon\", city: \"Yaounde\" },\r\n        // { lat: 3.150, lon: 101.708, country: \"Malaysia\", city: \"Kuala Lumpur\" },\r\n        // { lat: 2.041, lon: 45.344, country: \"Somalia\", city: \"Muqdisho\" }\r\n    ]\r\n\r\n    private static getRandomNumber(min: number, max: number): number {\r\n        return Math.round(min + Math.random() * (max - min));\r\n    }\r\n\r\n    private static getRandomItem(array: any[]): any {\r\n        const index = Math.round(this.getRandomNumber(0, array.length - 1));\r\n        return array[index];\r\n    }\r\n\r\n    private static getRandomDate(start: Date, end: Date): Date {\r\n        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r\n    }\r\n\r\n    private static getRandomPhone(): string {\r\n        const phoneCode = this.getRandomNumber(100, 900);\r\n        const phoneNum1 = this.getRandomNumber(100, 900);\r\n        const phoneNum2 = this.getRandomNumber(1000, 9000);\r\n        const phone = phoneCode + \"-\" + phoneNum1 + \"-\" + phoneNum2;\r\n        return phone;\r\n    }\r\n\r\n    private static getRandomGender(): string {\r\n        return this.getRandomItem(this.genders);\r\n    }\r\n\r\n    private static getRandomNameLast(): string {\r\n        return this.getRandomItem(this.lastNames);\r\n    }\r\n\r\n    private static getRandomNameFirst(gender: string): string {\r\n        if (gender === \"male\") {\r\n            return this.getRandomItem(this.maleNames);\r\n        }\r\n        else {\r\n            return this.getRandomItem(this.femaleNames);\r\n        }\r\n    }\r\n\r\n    // private static getRandomCity(country: string): string {\r\n    //     if (country === \"Canada\") {\r\n    //         return this.getRandomItem(this.citiesCA);\r\n    //     } else if (country === \"France\") {\r\n    //         return this.getRandomItem(this.citiesFR);\r\n    //     } else if (country === \"Poland\") {\r\n    //         return this.getRandomItem(this.citiesPL);\r\n    //     } else if (country === \"USA\") {\r\n    //         return this.getRandomItem(this.citiesUS);\r\n    //     } else if (country === \"Japan\") {\r\n    //         return this.getRandomItem(this.citiesJP);\r\n    //     } else if (country === \"Germany\") {\r\n    //         return this.getRandomItem(this.citiesGR);\r\n    //     } else { // if (country === \"United Kingdom\") {\r\n    //         return this.getRandomItem(this.citiesUK);\r\n    //     }\r\n    // }\r\n\r\n    private static getRandomStreet(): string {\r\n        const num = Math.round(this.getRandomNumber(100, 300)).toString();\r\n        const road = this.getRandomItem(this.roadNames);\r\n        const suffix = this.getRandomItem(this.roadSuffixes);\r\n        return num + \" \" + road + \" \" + suffix;\r\n    }\r\n\r\n    private static getBirthday(age: number): Date {\r\n        const today: Date = new Date();\r\n        const year: number = today.getFullYear() - age;\r\n        const month: number = this.getRandomNumber(0, 8);\r\n        const day: number = this.getRandomNumber(10, 27);\r\n        return new Date(year, month, day);\r\n    }\r\n\r\n    // private static getPhotoMale(id: number): string {\r\n    //     return require('./assets/GUY' + this.pad(id, 2) + '.png');\r\n    // }\r\n\r\n    // private static getPhotoFemale(id: number): string {\r\n    //     return require('./assets/GIRL' + this.pad(id, 2) + '.png');\r\n    // }\r\n\r\n    // private static getGenderPhoto(gender: string): string {\r\n    //     return require('./genders/' + gender + '.png');\r\n    // }\r\n\r\n    // private static getCountryFlag(country: string): string {\r\n    //     return require('./flags/' + country + '.png');\r\n    // }\r\n\r\n    private static pad(num: number, size: number): string{\r\n        let s = num + \"\";\r\n        while (s.length < size) {\r\n            s = \"0\" + s;\r\n        }\r\n        return s;\r\n    }\r\n\r\n}",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/updating-panes/src/DockManagerStyles.css",
  "content": "\r\n.dockManagerContent {\r\n    padding: 0.5rem;\r\n    height: calc(100% - 1rem);\r\n    width: calc(100% - 1rem);\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* background: orange; */\r\n}\r\n\r\n.dockManagerFull {\r\n    padding: 0rem;\r\n    margin: 0rem;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n}\r\n\r\n.dockManagerFrame {\r\n    padding: 0rem;\r\n    margin: 0rem;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n}\r\n\r\n.employeesDetailsRow {\r\n    height: 4rem;\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding-left: 0.5rem;\r\n    padding-right: 0.5rem;\r\n    padding-top: 0.5rem;\r\n    padding-bottom: 0.5rem;\r\n    align-items: center;\r\n}\r\n\r\n",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/updating-panes/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/layouts/dock-manager/updating-panes/src/WorldUtils.ts",
  "content": "export default class WorldUtils {\r\n\r\n    // calculate geo-paths between two locations using great circle formula\r\n    public static calcPaths(origin: any, dest: any): any[] {\r\n        let interval = 200;\r\n        let paths: any[] = [[]];\r\n        let pathID = 0;\r\n        let distance = this.calcDistance(origin, dest);\r\n        if (distance <= interval) {\r\n            paths[pathID].push({ x: origin.lon, y: origin.lat });\r\n            paths[pathID].push({ x: dest.lon, y: dest.lat });\r\n        } else {\r\n            let current = origin;\r\n            let previous = origin;\r\n\r\n            for (let dist = interval; dist <= distance; dist += interval)\r\n            {\r\n                previous = current\r\n                paths[pathID].push({ x: current.lon, y: current.lat });\r\n\r\n                let bearing = this.calcBearing(current, dest);\r\n                current = this.calcDestination(current, bearing, interval);\r\n                // ensure geo-path wrap around the world through the new date-line\r\n                if (previous.lon > 150 && current.lon < -150) {\r\n                    paths[pathID].push({ x: 180, y: current.lat });\r\n                    paths.push([]);\r\n                    pathID++\r\n                    current = { lon: -180, lat: current.lat }\r\n                } else if (previous.lon < -150 && current.lon > 150) {\r\n                    paths[pathID].push({ x: -180, y: current.lat });\r\n                    paths.push([]);\r\n                    pathID++\r\n                    current = { lon: 180, lat: current.lat }\r\n                }\r\n            }\r\n            paths[pathID].push({ x: dest.lon, y: dest.lat });\r\n        }\r\n        return paths;\r\n    }\r\n\r\n    // calculate bearing angle between two locations\r\n    public static calcBearing(origin: any, dest: any): number\r\n    {\r\n        origin = this.toRadianLocation(origin);\r\n        dest = this.toRadianLocation(dest);\r\n        let range = (dest.lon - origin.lon);\r\n        let y = Math.sin(range) * Math.cos(dest.lat);\r\n        let x = Math.cos(origin.lat) * Math.sin(dest.lat) -\r\n                Math.sin(origin.lat) * Math.cos(dest.lat) * Math.cos(range);\r\n        let angle = Math.atan2(y, x);\r\n        return this.toDegreesNormalized(angle);\r\n    }\r\n\r\n    // calculate destination for origin location and travel distance\r\n    public static calcDestination(origin: any, bearing: number, distance: number): any {\r\n        let radius = 6371.0;\r\n        origin = this.toRadianLocation(origin);\r\n        bearing = this.toRadians(bearing);\r\n        distance = distance / radius; // angular distance in radians\r\n\r\n        let lat = Math.asin(Math.sin(origin.lat) * Math.cos(distance) +\r\n                       Math.cos(origin.lat) * Math.sin(distance) * Math.cos(bearing));\r\n        let x = Math.sin(bearing) * Math.sin(distance) * Math.cos(origin.lat);\r\n        let y = Math.cos(distance) - Math.sin(origin.lat) * Math.sin(origin.lat);\r\n        let lon = origin.lon + Math.atan2(x, y);\r\n        // normalize lon to coordinate between -180º and +180º\r\n        lon = (lon + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\r\n\r\n        lon = this.toDegrees(lon);\r\n        lat = this.toDegrees(lat);\r\n\r\n        return { lon: lon, lat: lat };\r\n    }\r\n\r\n    // calculate distance between two locations\r\n    public static calcDistance(origin: any, dest: any): number {\r\n        origin = this.toRadianLocation(origin);\r\n        dest = this.toRadianLocation(dest);\r\n        let sinProd = Math.sin(origin.lat) * Math.sin(dest.lat);\r\n        let cosProd = Math.cos(origin.lat) * Math.cos(dest.lat);\r\n        let lonDelta = (dest.lon - origin.lon);\r\n\r\n        let angle = Math.acos(sinProd + cosProd * Math.cos(lonDelta));\r\n        let distance = angle * 6371.0;\r\n        return distance; // * 6371.0; // in km\r\n    }\r\n\r\n    public static toRadianLocation(geoPoint: any): any {\r\n        let x = this.toRadians(geoPoint.lon);\r\n        let y = this.toRadians(geoPoint.lat);\r\n        return { lon: x, lat: y };\r\n    }\r\n\r\n    public static toRadians(degrees: number): number\r\n    {\r\n        return degrees * Math.PI / 180;\r\n    }\r\n\r\n    public static toDegrees(radians: number): number {\r\n        return (radians * 180.0 / Math.PI);\r\n    }\r\n\r\n    public static toDegreesNormalized(radians: number): number\r\n    {\r\n        let degrees = this.toDegrees(radians);\r\n        degrees = (degrees + 360) % 360;\r\n        return degrees;\r\n    }\r\n\r\n    // converts latitude coordinate to a string\r\n    public static toStringLat(latitude: number): string {\r\n        let str = Math.abs(latitude).toFixed(1) + \"°\";\r\n        return latitude > 0 ? str + \"N\" : str + \"S\";\r\n    }\r\n\r\n    // converts longitude coordinate to a string\r\n    public static toStringLon(coordinate: number): string {\r\n        let val = Math.abs(coordinate);\r\n        let str = val < 100 ? val.toFixed(1) : val.toFixed(0);\r\n        return coordinate > 0 ? str + \"°E\" : str + \"°W\";\r\n    }\r\n\r\n    public static toStringAbbr(value: number): string {\r\n        if (value > 1000000000000) {\r\n            return (value / 1000000000000).toFixed(1) + \" T\"\r\n        } else if (value > 1000000000) {\r\n            return (value / 1000000000).toFixed(1) + \" B\"\r\n        } else if (value > 1000000) {\r\n            return (value / 1000000).toFixed(1) + \" M\"\r\n        } else if (value > 1000) {\r\n            return (value / 1000).toFixed(1) + \" K\"\r\n        }\r\n        return value.toFixed(0);\r\n    }\r\n\r\n    public static getLongitude(location: any): number {\r\n        if (location.x) return location.x;\r\n        if (location.lon) return location.lon;\r\n        if (location.longitude) return location.longitude;\r\n        return Number.NaN;\r\n    }\r\n\r\n    public static getLatitude(location: any): number {\r\n        if (location.y) return location.y;\r\n        if (location.lat) return location.lat;\r\n        if (location.latitude) return location.latitude;\r\n        return Number.NaN;\r\n    }\r\n\r\n    public static getBounds(locations: any[]): any {\r\n        let minLat = 90;\r\n        let maxLat = -90;\r\n        let minLon = 180;\r\n        let maxLon = -180;\r\n\r\n        for (const location of locations) {\r\n            const crrLon = this.getLongitude(location);\r\n            if (!Number.isNaN(crrLon)) {\r\n                minLon = Math.min(minLon, crrLon);\r\n                maxLon = Math.max(maxLon, crrLon);\r\n            }\r\n\r\n            const crrLat = this.getLatitude(location);\r\n            if (!Number.isNaN(crrLat)) {\r\n                minLat = Math.min(minLat, crrLat);\r\n                maxLat = Math.max(maxLat, crrLat);\r\n            }\r\n\r\n            // if (location.x) {\r\n            //     minLon = Math.min(minLon, location.x);\r\n            //     maxLon = Math.max(maxLon, location.x);\r\n            // } else if (location.lon) {\r\n            //     minLon = Math.min(minLon, location.lon);\r\n            //     maxLon = Math.max(maxLon, location.lon);\r\n            // } else if (location.longitude) {\r\n            //     minLon = Math.min(minLon, location.longitude);\r\n            //     maxLon = Math.max(maxLon, location.longitude);\r\n            // }\r\n            // if (location.y) {\r\n            //     minLat = Math.min(minLat, location.y);\r\n            //     maxLat = Math.max(maxLat, location.y);\r\n            // } else if (location.lat) {\r\n            //     minLat = Math.min(minLat, location.lat);\r\n            //     maxLat = Math.max(maxLat, location.lat);\r\n            // } else if (location.latitude) {\r\n            //     minLat = Math.min(minLat, location.latitude);\r\n            //     maxLat = Math.max(maxLat, location.latitude);\r\n            // }\r\n        }\r\n\r\n        const geoBounds = {\r\n            left: minLon,\r\n            top: minLat,\r\n            width: Math.abs(maxLon - minLon),\r\n            height: Math.abs(maxLat - minLat)\r\n        };\r\n        return geoBounds;\r\n    }\r\n\r\n    public static getNightShapes(): any[] {\r\n        let nightShape = [];\r\n\r\n        let line: any[] = [];\r\n\r\n        for (let lon = -180; lon <= 180; lon += 1) {\r\n\r\n            // let line: any[] = [{x: lon, y: -90}, {x: lon, y: 90}];\r\n            let x = lon;\r\n            let y = 75 * Math.cos(lon * Math.PI / 180);\r\n            line.push({x: x, y: y});\r\n        }\r\n        // line.push({x: 180, y: 90});\r\n        // line.push({x: -180, y: 90});\r\n        // line.push({x: -180, y: -90});\r\n\r\n        let coordinateLine = {points: [line]};\r\n\r\n        nightShape.push(coordinateLine);\r\n\r\n        return nightShape;\r\n    }\r\n\r\n}",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 }
]
}