{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/binding-shp-polylines/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { IgrGeographicMapModule } from 'igniteui-react-maps';\nimport { IgrGeographicMap } from 'igniteui-react-maps';\nimport { IgrGeographicPolylineSeries } from 'igniteui-react-maps';\nimport { IgrDataChartInteractivityModule } from 'igniteui-react-charts';\nimport { IgrDataContext } from 'igniteui-react-core';\nimport { IgrShapeDataSource } from 'igniteui-react-core';\n\nIgrGeographicMapModule.register();\nIgrDataChartInteractivityModule.register();\n\nexport default class MapBindingShapefilePolylines extends React.Component<any, any> {\n\n    public geoMap: IgrGeographicMap;\n\n    constructor(props: any) {\n        super(props);\n\n        this.onMapRef = this.onMapRef.bind(this);\n        this.onDataLoaded = this.onDataLoaded.bind(this);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\">\n                <div className=\"container\" >\n                    <IgrGeographicMap\n                        ref={this.onMapRef}\n                        width=\"100%\"\n                        height=\"100%\"\n                        zoomable=\"true\"/>\n                </div>\n                <div className=\"overlay-bottom-right overlay-border\">Imagery Tiles: @OpenStreetMap</div>\n            </div>\n        );\n    }\n\n    public onMapRef(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        this.geoMap = geoMap;\n        this.geoMap.windowRect = { left: 0.2, top: 0.1, width: 0.6, height: 0.6 };\n\n        // loading a shapefile with geographic polygons\n        const sds = new IgrShapeDataSource();\n        sds.importCompleted = this.onDataLoaded;\n        sds.shapefileSource = \"https://static.infragistics.com/xplatform/shapes/WorldCableRoutes.shp\";\n        sds.databaseSource  = \"https://static.infragistics.com/xplatform/shapes/WorldCableRoutes.dbf\";\n        sds.dataBind();\n    }\n\n    public onDataLoaded(sds: IgrShapeDataSource, e: any) {\n        const shapeRecords = sds.getPointData();\n        console.log(\"loaded WorldCities.shp \" + shapeRecords.length);\n\n        const geoPolylines: any[] = [];\n        // parsing shapefile data and creating geo-polygons\n        for (const record of shapeRecords) {\n            // using field/column names from .DBF file\n            const route = {\n                points: record.points,\n                name: record.fieldValues.Name,\n                capacity: record.fieldValues.CapacityG,\n                distance: record.fieldValues.DistanceKM\n            };\n            geoPolylines.push(route);\n        }\n\n        const geoSeries = new IgrGeographicPolylineSeries( { name: \"series\" });\n        geoSeries.dataSource = geoPolylines;\n        geoSeries.shapeMemberPath = \"points\";\n        geoSeries.shapeFilterResolution = 0.0;\n        geoSeries.shapeStrokeThickness = 3;\n        geoSeries.shapeStroke = \"rgb(82, 82, 82, 0.4)\";\n        geoSeries.tooltipTemplate = this.createTooltip;\n\n        this.geoMap.series.add(geoSeries);\n    }\n\n    public createTooltip(context: any) {\n        const dataContext = context.dataContext as IgrDataContext;\n        if (!dataContext) return null;\n\n        const series = dataContext.series as any;\n        if (!series) return null;\n\n        const dataItem = dataContext.item as any;\n        if (!dataItem) return null;\n\n        const capacity = dataItem.capacity + \" GB/s\";\n        const distance = dataItem.distance + \" KM\";\n\n        return <div>\n            {/* <div className=\"tooltipTitle\">{dataItem.name}</div> */}\n            <div className=\"tooltipBox\">\n                <div className=\"tooltipRow\">\n                    <div className=\"tooltipLbl\">Name</div>\n                    <div className=\"tooltipVal\">{dataItem.name}</div>\n                </div>\n                <div className=\"tooltipRow\">\n                    <div className=\"tooltipLbl\">Distance</div>\n                    <div className=\"tooltipVal\">{distance}</div>\n                </div>\n                <div className=\"tooltipRow\">\n                    <div className=\"tooltipLbl\">Capacity</div>\n                    <div className=\"tooltipVal\">{capacity}</div>\n                </div>\n            </div>\n        </div>\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<MapBindingShapefilePolylines />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/binding-shp-polylines/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 }
]
}