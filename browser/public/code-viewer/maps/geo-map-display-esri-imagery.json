{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/display-esri-imagery/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MapUtils, MapRegion } from './MapUtils';\nimport { EsriUtility, EsriStyle } from './EsriUtility';\nimport { IgrArcGISOnlineMapImagery } from 'igniteui-react-maps';\nimport { IgrGeographicMapModule } from 'igniteui-react-maps';\nimport { IgrGeographicMap } from 'igniteui-react-maps';\nimport { IgrDataChartInteractivityModule } from 'igniteui-react-charts';\n\nIgrGeographicMapModule.register();\nIgrDataChartInteractivityModule.register();\n\nexport default class MapDisplayImageryEsri extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.onEsriMapStreet = this.onEsriMapStreet.bind(this);\n        this.onEsriMapOceans = this.onEsriMapOceans.bind(this);\n        this.onEsriMapNational = this.onEsriMapNational.bind(this);\n        this.onEsriMapTopographic = this.onEsriMapTopographic.bind(this);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container horizontal\" >\n                <div className=\"container\">\n                    <IgrGeographicMap\n                        ref={this.onEsriMapStreet}\n                        width=\"100%\" height=\"100%\" zoomable=\"true\"/>\n                </div>\n                <div className=\"container\">\n                    <IgrGeographicMap\n                        ref={this.onEsriMapTopographic}\n                        width=\"100%\" height=\"100%\" zoomable=\"true\"/>\n                </div>\n                <div className=\"container\">\n                    <IgrGeographicMap\n                        ref={this.onEsriMapOceans}\n                        width=\"100%\" height=\"100%\" zoomable=\"true\"/>\n                </div>\n\n                <div className=\"overlay-bottom-right overlay-border\">Imagery Tiles: @ESRI/ArcGIS</div>\n            </div>\n        );\n    }\n\n    public onEsriMapStreet(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        const tileSource = new IgrArcGISOnlineMapImagery();\n        tileSource.mapServerUri = EsriUtility.getUri(EsriStyle.WorldStreetMap);\n        geoMap.backgroundContent = tileSource;\n\n        MapUtils.navigateTo(geoMap, MapRegion.Caribbean);\n    }\n\n    public onEsriMapOceans(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        const tileSource = new IgrArcGISOnlineMapImagery();\n        tileSource.mapServerUri = EsriUtility.getUri(EsriStyle.WorldOceansMap);\n        // or\n        // tileSource.mapServerUri = \"https://services.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer\";\n        geoMap.backgroundContent = tileSource;\n\n        MapUtils.navigateTo(geoMap, MapRegion.Caribbean);\n    }\n\n    public onEsriMapTopographic(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        const tileSource = new IgrArcGISOnlineMapImagery();\n        tileSource.mapServerUri = EsriUtility.getUri(EsriStyle.WorldTopographicMap);\n        geoMap.backgroundContent = tileSource;\n\n        MapUtils.navigateTo(geoMap, MapRegion.Caribbean);\n    }\n\n    public onEsriMapNational(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        const tileSource = new IgrArcGISOnlineMapImagery();\n        tileSource.mapServerUri = EsriUtility.getUri(EsriStyle.WorldNationalGeoMap);\n        geoMap.backgroundContent = tileSource;\n\n        MapUtils.navigateTo(geoMap, MapRegion.Caribbean);\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<MapDisplayImageryEsri />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/display-esri-imagery/src/EsriUtility.ts",
  "content": "/**\r\n * Describes available links to imagery tile sources on public ArcGIS/Esri servers.\r\n * You can find up-to-date list on https://services.arcgisonline.com/arcgis/rest/services\r\n */\r\nexport enum EsriStyle {\r\n\r\n    // note Esri maps show geographic tiles for the whole of world with shapes\r\n    WorldTopographicMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer\",\r\n    WorldStreetMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer\",\r\n    WorldSatelliteMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\",\r\n    WorldPhysicalMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer\",\r\n    WorldDeLormesMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer\",\r\n    WorldTerrainMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer\",\r\n    WorldNationalGeoMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer\",\r\n    WorldShadedReliefMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer\",\r\n    WorldOceansMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer\",\r\n\r\n    // not usable imagery tiles\r\n    // WorldHillShadeDarkMap = \"https://services.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade_Dark/MapServer\",\r\n    // WorldHillShadeLightMap = \"https://services.arcgisonline.com/arcgis/rest/services/Elevation/World_Hillshade/MapServer\",\r\n    // WorldElevation3dTerrainMap = \"https://services.arcgisonline.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\",\r\n    // WorldElevation3dTopographicMap = \"https://services.arcgisonline.com/arcgis/rest/services/WorldElevation3D/TopoBathy3D/ImageServer\",\r\n\r\n    // note Esri overlays show geographic tiles for the whole of world without any shapes\r\n    WorldOceansBaseMap = \"https://services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Base/MapServer\",\r\n    WorldOceansOverlay = \"https://services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Reference/MapServer\",\r\n\r\n    WorldLightGrayMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer\",\r\n    WorldLightGrayOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Reference/MapServer\",\r\n\r\n    WorldDarkGrayMap = \"https://services.arcgisonline.com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\",\r\n    WorldDarkGrayOverlay = \"https://services.arcgisonline.com/arcgis/rest/services/Canvas/World_Dark_Gray_Reference/MapServer\",\r\n\r\n    WorldAdminOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer\",\r\n    WorldTransportationOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Transportation/MapServer\",\r\n    WorldBordersWithDarkLabelsOverlay =\"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer\",\r\n    WorldBordersWithLightLabelsOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places_Alternate/MapServer\",\r\n\r\n    // these Esri maps show only geographic tiles for the USA\r\n    // therefore the Map should be zoomed in to geographic bounds of USA when using them\r\n    UsaOwnerOccupiedHousing = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Owner_Occupied_Housing/MapServer\",\r\n    UsaSoilSurvey = \"https://services.arcgisonline.com/ArcGIS/rest/services/Specialty/Soil_Survey_Map/MapServer\",\r\n    UsaPopulationOlderThanAge64 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Percent_Over_64/MapServer\",\r\n    UsaPopulationYoungerThan18 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Percent_Under_18/MapServer\",\r\n    UsaPopulationGrowth2015 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Projected_Population_Change/MapServer\",\r\n    UsaUnemploymentRate = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Unemployment_Rate/MapServer\",\r\n    UsaSocialVulnerability = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Social_Vulnerability_Index/MapServer\",\r\n    UsaRetailSpendingPotential = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Retail_Spending_Potential/MapServer\",\r\n    UsaPopulationChange2010 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Recent_Population_Change/MapServer\",\r\n    UsaPopulationChange2000 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_1990-2000_Population_Change/MapServer\",\r\n    UsaPopulationDensity = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Population_Density/MapServer\",\r\n    UsaPopulationByGender = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Population_by_Sex/MapServer\",\r\n    UsaMedianHouseholdIncome = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Household_Income/MapServer\",\r\n    UsaMedianNetWorth = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Net_Worth/MapServer\",\r\n    UsaMedianHomeValue = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Home_Value/MapServer\",\r\n    UsaMedianAge = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Age/MapServer\",\r\n    UsaLaborForceParticipation = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Labor_Force_Participation_Rate/MapServer\",\r\n    UsaAverageHouseholdSize = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Average_Household_Size/MapServer\",\r\n    UsaDiversityIndex = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Diversity_Index/MapServer\",\r\n    UsaRailNetwork = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer\",\r\n\r\n}\r\n\r\nexport class EsriUtility {\r\n\r\n    public static getUri(style: EsriStyle): string {\r\n\r\n        let isHttpSecured = window.location.toString().startsWith(\"https:\");\r\n\r\n        // resolving Esri Server uri based on hosting website\r\n        let uri: string = style;\r\n        if (!isHttpSecured) {\r\n            uri = uri.replace(\"https:\", \"http:\");\r\n        }\r\n        // console.log(\"uri \" + uri);\r\n        return uri;\r\n    }\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/display-esri-imagery/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/display-esri-imagery/src/MapUtils.ts",
  "content": "import { IgrGeographicMap } from 'igniteui-react-maps';\r\n\r\nexport enum MapRegion {\r\n    Caribbean = \"Caribbean\",\r\n    UnitedStates = \"United States\",\r\n    UnitedKingdom = \"United Kingdom\",\r\n    European = \"European\",\r\n    SouthAfrica = \"South Africa\",\r\n    Poland = \"Poland\",\r\n    Australia = \"Australia\",\r\n    Japan = \"Japan\",\r\n    Uruguay = \"Uruguay\",\r\n    Egypt = \"Egypt\",\r\n    Hawaii = \"Hawaii\",\r\n}\r\n\r\nexport class MapUtils {\r\n\r\n    public static navigateTo(geoMap: IgrGeographicMap, name: MapRegion): void {\r\n\r\n        const geoRect = this.getRegions()[name];\r\n        // console.log(\"MapUtils \" + name) ;\r\n        geoMap.zoomToGeographic(geoRect);\r\n    }\r\n\r\n    public static toPixel(num: number): string {\r\n        const s = Math.abs(num).toFixed(0);\r\n        return s + \" px\";\r\n    }\r\n\r\n    public static toLng(num: number): string {\r\n        num = this.clamp(num, -180, 180);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"°E\";\r\n        } else  {\r\n            return s + \"°W\";\r\n        }\r\n    }\r\n\r\n    public static toLat(num: number): string {\r\n        num = this.clamp(num, -90, 90);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"°N\";\r\n        } else  {\r\n            return s + \"°S\";\r\n        }\r\n    }\r\n\r\n    public static clamp(num: number, min: number, max: number): number {\r\n        return Math.max(min, Math.min(max, num));\r\n    }\r\n\r\n    public static pad(num: number, places?: number): string {\r\n        places = places || 20;\r\n        let s = num.toFixed(1).toString();\r\n        while (s.length < places) {s = \" \" + s;}\r\n        return s;\r\n    }\r\n\r\n    public static getBingKey(): string {\r\n        return \"Aj2inbXEmvSbAbbVUKH1-DWlUeWIGjFTY3K2K8d1lqE5mEwI3_1oFX2U2tqONiHF\";\r\n    }\r\n\r\n    public static getRegions(): any {\r\n        // create regions only once\r\n        if (this.Regions === undefined) {\r\n            this.createRegions();\r\n        }\r\n        return this.Regions;\r\n    }\r\n\r\n    private static Regions: any;\r\n\r\n    private static addRegion(name: string, geoRect: any): void {\r\n        geoRect.name = name;\r\n        geoRect.longitude = geoRect.left + (geoRect.width / 2);\r\n        geoRect.latitude = geoRect.top + (geoRect.height / 2);\r\n\r\n        this.Regions[name] = geoRect;\r\n    }\r\n\r\n    private static createRegions(): void {\r\n        this.Regions = {};\r\n        this.addRegion(MapRegion.Australia, { left: 81.5, top: -52.0, width: 98.0, height: 56.0 });\r\n        this.addRegion(MapRegion.Caribbean, { left: -92.9, top: 5.4, width: 35.1, height: 25.8 });\r\n        this.addRegion(MapRegion.Egypt, { left: 19.3, top: 19.9, width: 19.3, height: 13.4 });\r\n        this.addRegion(MapRegion.European, { left: -36.0, top:31.0, width: 98.0, height: 38.0 });\r\n        this.addRegion(MapRegion.Japan, { left: 122.7, top: 29.4, width: 27.5, height: 17.0 });\r\n        this.addRegion(MapRegion.Hawaii, { left: -161.2, top: 18.5, width: 6.6, height: 4.8 });\r\n        this.addRegion(MapRegion.Poland, { left: 13.0, top: 48.0, width: 11.0, height: 9.0 });\r\n        this.addRegion(MapRegion.SouthAfrica, { left: 9.0, top: -37.1, width: 26.0, height: 17.8 });\r\n        this.addRegion(MapRegion.UnitedStates, { left: -134.5, top: 16.0, width: 70.0, height: 37.0 });\r\n        this.addRegion(MapRegion.UnitedKingdom, { left: -15.0, top: 49.5, width: 22.5, height: 8.0 });\r\n        this.addRegion(MapRegion.Uruguay, { left: -62.1, top: -35.7, width: 10.6, height: 7.0 });\r\n    }\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 }
]
}