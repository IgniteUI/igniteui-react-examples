{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/navigation/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MapUtils, MapRegion } from './MapUtils';\n// for handling of maps events\nimport { IgrRectChangedEventArgs, IgRect } from 'igniteui-react-core';\nimport { IgrDataChartInteractivityModule, IgrSeriesViewer } from 'igniteui-react-charts';\nimport { IgrGeographicMapModule } from 'igniteui-react-maps';\nimport { IgrGeographicMap } from 'igniteui-react-maps';\nimport { IgrArcGISOnlineMapImagery } from 'igniteui-react-maps';\n\nIgrGeographicMapModule.register();\nIgrDataChartInteractivityModule.register();\n\nexport default class MapNavigation extends React.Component<any, any> {\n\n    public geoMap: IgrGeographicMap;\n\n    public NavigationOptions: JSX.Element[] = [];\n    public NavigationRegions: any = {};\n\n    constructor(props: any) {\n        super(props);\n\n        this.onMapRef = this.onMapRef.bind(this);\n        this.onMapWindowRectChanged = this.onMapWindowRectChanged.bind(this);\n        this.onSelectionChanged = this.onSelectionChanged.bind(this);\n        this.onMapMouseMove = this.onMapMouseMove.bind(this);\n\n        // generating navigation regions and options\n        const regions =  MapUtils.getRegions();\n        for (const key in regions) {\n            if (regions.hasOwnProperty(key)) {\n                const region = regions[key];\n                const name = region.name;\n                this.NavigationRegions[name] = region;\n                this.NavigationOptions.push(<option id={name} key={name}>{name}</option>);\n            }\n        }\n\n        this.state = {\n            selectedRegion: MapRegion.UnitedStates,\n            mapRegion: this.NavigationRegions[MapRegion.UnitedStates],\n            mapHoverGeographicCoordinate: { x: 0, y: 0 },\n            mapHoverRelativeCoordinate: { x: 0, y: 0 },\n            mapHoverWindowCoordinate: { x: 0, y: 0 },\n\n            windowScale: 0,\n            windowPositionVertical: 0,\n            windowPositionHorizontal: 0,\n            getRect: { left: -180, top: -75, height: 170, width: 360 },\n            geoT: \"\",\n            geoL: \"\",\n            geoH: \"\",\n            geoW: \"\",\n            winT: \"\",\n            winL: \"\",\n            winH: \"\",\n            winW: \"\",\n        };\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\"    >\n\n                <div className=\"container\" id=\"map\" >\n                    <IgrGeographicMap\n                        ref={this.onMapRef}\n                        actualWindowRectChanged={this.onMapWindowRectChanged}\n                        width=\"100%\"\n                        height=\"100%\"\n                        zoomable=\"true\"/>\n                </div>\n\n                <div className=\"overlay-left overlay-border vertical\" style={{background: \"rgba(217, 217, 217, 0.5)\"}} >\n                    <label style={{fontWeight: 600}}>Zoom to Map Region</label>\n                    <select value={this.state.selectedRegion} onChange={this.onSelectionChanged}>\n                            {this.NavigationOptions}\n                    </select>\n                    <label style={{fontWeight: 600}}>Map Geographic Rect</label>\n                    <div className=\"horizontal\" >\n                        <div className=\"vertical\"  style={{marginRight: \"1rem\"}}>\n                            <label >{this.state.geoT}</label>\n                            <label >{this.state.geoL}</label>\n                        </div>\n                        <div className=\"vertical\">\n                            <label >{this.state.geoH}</label>\n                            <label >{this.state.geoW}</label>\n                        </div>\n                    </div>\n\n                    <label style={{fontWeight: 600}}>Map Window Rect</label>\n                    <div className=\"horizontal\" >\n                        <div className=\"vertical\"  style={{marginRight: \"1rem\"}}>\n                            <label >{this.state.winT}</label>\n                            <label >{this.state.winL}</label>\n                        </div>\n                        <div className=\"vertical\">\n                            <label >{this.state.winH}</label>\n                            <label >{this.state.winW}</label>\n                        </div>\n                    </div>\n\n                    <label style={{fontWeight: 600}}>Map Window Position</label>\n                    <div className=\"horizontal\">\n                        <div className=\"vertical\"  style={{marginRight: \"1rem\"}}>\n                            <label >Horizontal:</label>\n                            <label >Vertical:</label>\n                            <label >Scale:</label>\n                        </div>\n                        <div className=\"vertical\">\n                            <label >{this.state.windowPositionHorizontal.toFixed(4)}</label>\n                            <label >{this.state.windowPositionVertical.toFixed(4)}</label>\n                            <label >{this.state.windowScale.toFixed(4)}</label>\n                        </div>\n                    </div>\n\n                    <label style={{fontWeight: 600}}>Map Hover Coordinates</label>\n                    <div className=\"horizontal\">\n                        <div className=\"vertical\" style={{marginRight: \"1rem\"}}>\n                            <label >Window X: </label>\n                            <label >Window Y: </label>\n                            <label >Longitude: </label>\n                            <label >Latitude: </label>\n                            <label >Pixel X: </label>\n                            <label >Pixel Y: </label>\n                        </div>\n                        <div className=\"vertical\">\n                            <label >{this.state.mapHoverWindowCoordinate.x.toFixed(4)}</label>\n                            <label >{this.state.mapHoverWindowCoordinate.y.toFixed(4)}</label>\n                            <label >{MapUtils.toLng(this.state.mapHoverGeographicCoordinate.x)}</label>\n                            <label >{MapUtils.toLat(this.state.mapHoverGeographicCoordinate.y)}</label>\n                            <label >{MapUtils.toPixel(this.state.mapHoverRelativeCoordinate.x)}</label>\n                            <label >{MapUtils.toPixel(this.state.mapHoverRelativeCoordinate.y)}</label>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"overlay-bottom-right overlay-border\">Imagery Tiles: @ESRI/ArcGIS</div>\n            </div>\n        );\n    }\n\n    public windowPositionHorizontalChanged = (e: any) => {\n        this.geoMap.windowPositionHorizontal = e.target.valueAsNumber;\n    }\n\n    public windowPositionVerticalChanged = (e: any) => {\n        this.geoMap.windowPositionVertical = e.target.valueAsNumber;\n    }\n\n    public windowScaleChanged = (e: any) => {\n        this.geoMap.windowScale = e.target.valueAsNumber;\n    }\n\n    public onMapRef(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        this.geoMap = geoMap;\n        this.geoMap.zoomToGeographic({ left:-134.5, top:16.5, width:70.0, height:37.0 });\n\n        // optional imagery background that provides context for map regions with oceans\n        const tileSource = new IgrArcGISOnlineMapImagery();\n        tileSource.mapServerUri = \"https://services.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer\";\n        this.geoMap.backgroundContent = tileSource;\n\n        this.geoMap.windowPositionHorizontal = 0.1;\n        this.geoMap.windowPositionVertical = 0.1;\n        this.geoMap.windowScale = 0.1;\n    }\n\n    public onMapWindowRectChanged(viewer: IgrSeriesViewer, e: IgrRectChangedEventArgs) {\n        let geoMap = viewer as IgrGeographicMap;\n\n        // storing window location and size (values between 0.0 and 1.0)\n        const windowRect: IgRect = e.newRect;\n\n        // converting window rect to geographic rect/region:\n        const geoRect: any = geoMap.getGeographicFromZoom(windowRect);\n        geoRect.bottom = geoRect.top  + geoRect.height;\n        geoRect.right  = geoRect.left + geoRect.width;\n        // calculating center of geographic region\n        geoRect.latitude  = geoRect.top  + (geoRect.height / 2);\n        geoRect.longitude = geoRect.left + (geoRect.width / 2);\n\n        this.setState({\n            mapRegion: geoRect,\n            windowPositionHorizontal: geoMap.actualWindowPositionHorizontal,\n            windowPositionVertical: geoMap.actualWindowPositionVertical,\n            windowScale: geoMap.actualWindowScale,\n            geoT: \"T: \" + MapUtils.toLat(geoRect.top),\n            geoL: \"L: \" + MapUtils.toLng(geoRect.left),\n            geoH: \"H: \" + MapUtils.toLng(geoRect.height),\n            geoW: \"W: \" + MapUtils.toLng(geoRect.width),\n            winT: \"T: \" + windowRect.top.toFixed(4),\n            winL: \"L: \" + windowRect.left.toFixed(4),\n            winH: \"H: \" + windowRect.height.toFixed(4),\n            winW: \"W: \" + windowRect.width.toFixed(4),\n        });\n    }\n\n    public onMapMouseMove(e: any) {\n        const bounds = e.target.getBoundingClientRect();\n        const relativeCoordinate = {\n            x: e.clientX - bounds.left,\n            y: e.clientY - bounds.top\n        };\n\n        const windowCoordinate = {\n            x: (e.clientX - bounds.left) / bounds.width,\n            y: (e.clientY - bounds.top) / bounds.height\n        };\n\n        // converting mouse pixel coordinate to geographic coordinate:\n        const geoCoordinate: any = this.geoMap.getGeographicPoint(relativeCoordinate);\n\n        this.setState({\n            mapHoverGeographicCoordinate: geoCoordinate,\n            mapHoverRelativeCoordinate: relativeCoordinate,\n            mapHoverWindowCoordinate: windowCoordinate\n        });\n    }\n\n    public componentDidMount() {\n        const elem = document.getElementById('map');\n        elem.addEventListener('mousemove', this.onMapMouseMove, false);\n    }\n\n    public onSelectionChanged = (e: any) =>{\n        if (this.geoMap === undefined) return;\n\n        const name = e.target.value.toString();\n        const region = this.NavigationRegions[name];\n\n        this.geoMap.zoomToGeographic(region);\n\n        this.setState({ selectedRegion: name});\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<MapNavigation />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/navigation/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/navigation/src/MapUtils.ts",
  "content": "import { IgrGeographicMap } from 'igniteui-react-maps';\r\n\r\nexport enum MapRegion {\r\n    Caribbean = \"Caribbean\",\r\n    UnitedStates = \"United States\",\r\n    UnitedKingdom = \"United Kingdom\",\r\n    European = \"European\",\r\n    SouthAfrica = \"South Africa\",\r\n    Poland = \"Poland\",\r\n    Australia = \"Australia\",\r\n    Japan = \"Japan\",\r\n    Uruguay = \"Uruguay\",\r\n    Egypt = \"Egypt\",\r\n    Hawaii = \"Hawaii\",\r\n}\r\n\r\nexport class MapUtils {\r\n\r\n    public static navigateTo(geoMap: IgrGeographicMap, name: MapRegion): void {\r\n\r\n        const geoRect = this.getRegions()[name];\r\n        // console.log(\"MapUtils \" + name) ;\r\n        geoMap.zoomToGeographic(geoRect);\r\n    }\r\n\r\n    public static toPixel(num: number): string {\r\n        const s = Math.abs(num).toFixed(0);\r\n        return s + \" px\";\r\n    }\r\n\r\n    public static toLng(num: number): string {\r\n        num = this.clamp(num, -180, 180);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"°E\";\r\n        } else  {\r\n            return s + \"°W\";\r\n        }\r\n    }\r\n\r\n    public static toLat(num: number): string {\r\n        num = this.clamp(num, -90, 90);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"°N\";\r\n        } else  {\r\n            return s + \"°S\";\r\n        }\r\n    }\r\n\r\n    public static clamp(num: number, min: number, max: number): number {\r\n        return Math.max(min, Math.min(max, num));\r\n    }\r\n\r\n    public static pad(num: number, places?: number): string {\r\n        places = places || 20;\r\n        let s = num.toFixed(1).toString();\r\n        while (s.length < places) {s = \" \" + s;}\r\n        return s;\r\n    }\r\n\r\n    public static getBingKey(): string {\r\n        return \"Aj2inbXEmvSbAbbVUKH1-DWlUeWIGjFTY3K2K8d1lqE5mEwI3_1oFX2U2tqONiHF\";\r\n    }\r\n\r\n    public static getRegions(): any {\r\n        // create regions only once\r\n        if (this.Regions === undefined) {\r\n            this.createRegions();\r\n        }\r\n        return this.Regions;\r\n    }\r\n\r\n    private static Regions: any;\r\n\r\n    private static addRegion(name: string, geoRect: any): void {\r\n        geoRect.name = name;\r\n        geoRect.longitude = geoRect.left + (geoRect.width / 2);\r\n        geoRect.latitude = geoRect.top + (geoRect.height / 2);\r\n\r\n        this.Regions[name] = geoRect;\r\n    }\r\n\r\n    private static createRegions(): void {\r\n        this.Regions = {};\r\n        this.addRegion(MapRegion.Australia, { left: 81.5, top: -52.0, width: 98.0, height: 56.0 });\r\n        this.addRegion(MapRegion.Caribbean, { left: -92.9, top: 5.4, width: 35.1, height: 25.8 });\r\n        this.addRegion(MapRegion.Egypt, { left: 19.3, top: 19.9, width: 19.3, height: 13.4 });\r\n        this.addRegion(MapRegion.European, { left: -36.0, top:31.0, width: 98.0, height: 38.0 });\r\n        this.addRegion(MapRegion.Japan, { left: 122.7, top: 29.4, width: 27.5, height: 17.0 });\r\n        this.addRegion(MapRegion.Hawaii, { left: -161.2, top: 18.5, width: 6.6, height: 4.8 });\r\n        this.addRegion(MapRegion.Poland, { left: 13.0, top: 48.0, width: 11.0, height: 9.0 });\r\n        this.addRegion(MapRegion.SouthAfrica, { left: 9.0, top: -37.1, width: 26.0, height: 17.8 });\r\n        this.addRegion(MapRegion.UnitedStates, { left: -134.5, top: 16.0, width: 70.0, height: 37.0 });\r\n        this.addRegion(MapRegion.UnitedKingdom, { left: -15.0, top: 49.5, width: 22.5, height: 8.0 });\r\n        this.addRegion(MapRegion.Uruguay, { left: -62.1, top: -35.7, width: 10.6, height: 7.0 });\r\n    }\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 }
]
}