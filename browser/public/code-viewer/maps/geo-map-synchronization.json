{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/synchronization/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MapUtils, MapRegion } from './MapUtils';\nimport { IgrGeographicMapModule } from 'igniteui-react-maps';\nimport { IgrGeographicMap } from 'igniteui-react-maps';\nimport { IgrDataChartInteractivityModule, IgrSeriesViewer } from 'igniteui-react-charts';\n// for handling of maps events\nimport { IgrRectChangedEventArgs } from 'igniteui-react-core';\n\nIgrGeographicMapModule.register();\nIgrDataChartInteractivityModule.register();\n\nexport default class MapSynchronization extends React.Component<any, any> {\n\n    public GeoMap1: IgrGeographicMap;\n    public GeoMap2: IgrGeographicMap;\n    public GeoMapSynchronizing = false;\n\n    constructor(props: any) {\n        super(props);\n\n        this.onReferenceMap2 = this.onReferenceMap2.bind(this);\n        this.onReferenceMap1 = this.onReferenceMap1.bind(this);\n\n        this.onWindowRectChangedMap1 = this.onWindowRectChangedMap1.bind(this);\n        this.onWindowRectChangedMap2 = this.onWindowRectChangedMap2.bind(this);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container horizontal\">\n                <IgrGeographicMap subtitle=\"Geo1\"\n                    ref={this.onReferenceMap1}\n                    actualWindowRectChanged={this.onWindowRectChangedMap1}\n                    width=\"100%\" height=\"100%\" zoomable=\"true\"/>\n                <IgrGeographicMap subtitle=\"Geo2\"\n                    ref={this.onReferenceMap2}\n                    actualWindowRectChanged={this.onWindowRectChangedMap2}\n                    width=\"100%\" height=\"100%\" zoomable=\"true\"/>\n\n                <div className=\"overlay-bottom-right overlay-border\">Imagery Tiles: @OpenStreetMap</div>\n            </div>\n        );\n    }\n\n    public onReferenceMap1(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        MapUtils.navigateTo(geoMap, MapRegion.European);\n\n        this.GeoMap1 = geoMap;\n    }\n\n    public onReferenceMap2(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        MapUtils.navigateTo(geoMap, MapRegion.European);\n\n        this.GeoMap2 = geoMap;\n    }\n\n    public onWindowRectChangedMap1(geoMap: IgrSeriesViewer, e: IgrRectChangedEventArgs) {\n        if (this.GeoMapSynchronizing) { return; }\n\n        this.GeoMapSynchronizing = true;\n        this.GeoMap2.windowRect = geoMap.actualWindowRect;\n        this.GeoMapSynchronizing = false;\n    }\n\n    public onWindowRectChangedMap2(geoMap: IgrSeriesViewer, e: IgrRectChangedEventArgs) {\n        if (this.GeoMapSynchronizing) { return; }\n\n        this.GeoMapSynchronizing = true;\n        this.GeoMap1.windowRect = e.newRect;\n        this.GeoMapSynchronizing = false;\n    }\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<MapSynchronization />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/synchronization/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/synchronization/src/MapUtils.ts",
  "content": "import { IgrGeographicMap } from 'igniteui-react-maps';\r\n\r\nexport enum MapRegion {\r\n    Caribbean = \"Caribbean\",\r\n    UnitedStates = \"United States\",\r\n    UnitedKingdom = \"United Kingdom\",\r\n    European = \"European\",\r\n    SouthAfrica = \"South Africa\",\r\n    Poland = \"Poland\",\r\n    Australia = \"Australia\",\r\n    Japan = \"Japan\",\r\n    Uruguay = \"Uruguay\",\r\n    Egypt = \"Egypt\",\r\n    Hawaii = \"Hawaii\",\r\n}\r\n\r\nexport class MapUtils {\r\n\r\n    public static navigateTo(geoMap: IgrGeographicMap, name: MapRegion): void {\r\n\r\n        const geoRect = this.getRegions()[name];\r\n        // console.log(\"MapUtils \" + name) ;\r\n        geoMap.zoomToGeographic(geoRect);\r\n    }\r\n\r\n    public static toPixel(num: number): string {\r\n        const s = Math.abs(num).toFixed(0);\r\n        return s + \" px\";\r\n    }\r\n\r\n    public static toLng(num: number): string {\r\n        num = this.clamp(num, -180, 180);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"째E\";\r\n        } else  {\r\n            return s + \"째W\";\r\n        }\r\n    }\r\n\r\n    public static toLat(num: number): string {\r\n        num = this.clamp(num, -90, 90);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"째N\";\r\n        } else  {\r\n            return s + \"째S\";\r\n        }\r\n    }\r\n\r\n    public static clamp(num: number, min: number, max: number): number {\r\n        return Math.max(min, Math.min(max, num));\r\n    }\r\n\r\n    public static pad(num: number, places?: number): string {\r\n        places = places || 20;\r\n        let s = num.toFixed(1).toString();\r\n        while (s.length < places) {s = \" \" + s;}\r\n        return s;\r\n    }\r\n\r\n    public static getBingKey(): string {\r\n        return \"Aj2inbXEmvSbAbbVUKH1-DWlUeWIGjFTY3K2K8d1lqE5mEwI3_1oFX2U2tqONiHF\";\r\n    }\r\n\r\n    public static getRegions(): any {\r\n        // create regions only once\r\n        if (this.Regions === undefined) {\r\n            this.createRegions();\r\n        }\r\n        return this.Regions;\r\n    }\r\n\r\n    private static Regions: any;\r\n\r\n    private static addRegion(name: string, geoRect: any): void {\r\n        geoRect.name = name;\r\n        geoRect.longitude = geoRect.left + (geoRect.width / 2);\r\n        geoRect.latitude = geoRect.top + (geoRect.height / 2);\r\n\r\n        this.Regions[name] = geoRect;\r\n    }\r\n\r\n    private static createRegions(): void {\r\n        this.Regions = {};\r\n        this.addRegion(MapRegion.Australia, { left: 81.5, top: -52.0, width: 98.0, height: 56.0 });\r\n        this.addRegion(MapRegion.Caribbean, { left: -92.9, top: 5.4, width: 35.1, height: 25.8 });\r\n        this.addRegion(MapRegion.Egypt, { left: 19.3, top: 19.9, width: 19.3, height: 13.4 });\r\n        this.addRegion(MapRegion.European, { left: -36.0, top:31.0, width: 98.0, height: 38.0 });\r\n        this.addRegion(MapRegion.Japan, { left: 122.7, top: 29.4, width: 27.5, height: 17.0 });\r\n        this.addRegion(MapRegion.Hawaii, { left: -161.2, top: 18.5, width: 6.6, height: 4.8 });\r\n        this.addRegion(MapRegion.Poland, { left: 13.0, top: 48.0, width: 11.0, height: 9.0 });\r\n        this.addRegion(MapRegion.SouthAfrica, { left: 9.0, top: -37.1, width: 26.0, height: 17.8 });\r\n        this.addRegion(MapRegion.UnitedStates, { left: -134.5, top: 16.0, width: 70.0, height: 37.0 });\r\n        this.addRegion(MapRegion.UnitedKingdom, { left: -15.0, top: 49.5, width: 22.5, height: 8.0 });\r\n        this.addRegion(MapRegion.Uruguay, { left: -62.1, top: -35.7, width: 10.6, height: 7.0 });\r\n    }\r\n\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 }
]
}