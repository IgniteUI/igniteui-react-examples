{
 "sampleFiles":
[
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/type-scatter-contour-series/src/index.tsx",
  "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { LegendOverlay, LegendItem } from \"./LegendOverlay\"\nimport { IgrGeographicMapModule } from 'igniteui-react-maps';\nimport { IgrGeographicMap } from 'igniteui-react-maps';\nimport { IgrGeographicContourLineSeries } from 'igniteui-react-maps';\nimport { IgrValueBrushScale } from 'igniteui-react-charts';\nimport { IgrCustomPaletteColorScale } from 'igniteui-react-charts';\nimport { IgrDataChartInteractivityModule } from 'igniteui-react-charts';\nimport { MarkerType } from 'igniteui-react-charts';\nimport { IgrShapeDataSource } from 'igniteui-react-core';\nimport { IgrDataContext } from 'igniteui-react-core';\n\nIgrGeographicMapModule.register();\nIgrDataChartInteractivityModule.register();\n\nexport default class MapTypeScatterContourSeries extends React.Component<any, any> {\n\n    private geoMap: IgrGeographicMap;\n\n    constructor(props: any) {\n        super(props);\n\n        this.onMapRef = this.onMapRef.bind(this);\n        this.onDataLoaded = this.onDataLoaded.bind(this);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"container sample\" >\n                <IgrGeographicMap\n                    ref={this.onMapRef}\n                    width=\"100%\"\n                    height=\"100%\"\n                    zoomable=\"true\" />\n\n                <LegendOverlay dock=\"BottomLeft\"\n                text=\"Source: NOAA\" href=\"https://www.noaa.gov/\" />\n                <div className=\"overlay-bottom-right overlay-border\">Imagery Tiles: @OpenStreetMap</div>\n\n            </div>\n        );\n    }\n\n    public onMapRef(geoMap: IgrGeographicMap) {\n        if (!geoMap) { return; }\n\n        this.geoMap = geoMap;\n        this.geoMap.windowRect = { left: 0.2, top: 0.1, width: 0.6, height: 0.6 };\n\n        const sds = new IgrShapeDataSource();\n        sds.importCompleted = this.onDataLoaded;\n        sds.shapefileSource = \"https://static.infragistics.com/xplatform/shapes/WorldTemperatures.shp\";\n        sds.databaseSource  = \"https://static.infragistics.com/xplatform/shapes/WorldTemperatures.dbf\";\n        sds.dataBind();\n    }\n\n    public onDataLoaded(sds: IgrShapeDataSource, e: any) {\n        const shapeRecords = sds.getPointData();\n        console.log(\"loaded WorldTemperatures.shp: \" + shapeRecords.length);\n\n        const contourPoints: any[] = [];\n        for (const record of shapeRecords) {\n            const temp = record.fieldValues.Contour;\n            // using only major contours (every 10th degrees Celsius)\n            if (temp % 10 === 0 && temp >= 0) {\n                for (const shapes of record.points) {\n                     for (let i = 0; i < shapes.length; i++) {\n                        if (i % 5 === 0) {\n                            const p = shapes[i];\n                            const item = { lon: p.x, lat: p.y, value: temp};\n                            contourPoints.push(item);\n                        }\n                     }\n                }\n            }\n        }\n\n        console.log(\"loaded contour points: \" + contourPoints.length);\n        this.createContourSeries(contourPoints);\n    }\n\n    public createContourSeries(data: any[])\n    {\n        const brushes = [\n            \"rgba(32, 146, 252, 0.5)\", // semi-transparent blue\n            \"rgba(14, 194, 14, 0.5)\",  // semi-transparent green\n            \"rgba(252, 120, 32, 0.5)\", // semi-transparent orange\n            \"rgba(252, 32, 32, 0.5)\",  // semi-transparent red\n        ];\n\n        const brushScale = new IgrValueBrushScale({});\n        brushScale.brushes = brushes;\n        brushScale.minimumValue = 0;\n        brushScale.maximumValue = 30;\n\n        const contourSeries = new IgrGeographicContourLineSeries( { name: \"contourSeries\" });\n        contourSeries.dataSource = data;\n        contourSeries.longitudeMemberPath = \"lon\";\n        contourSeries.latitudeMemberPath = \"lat\";\n        contourSeries.valueMemberPath = \"value\";\n        contourSeries.fillScale = brushScale;\n        contourSeries.tooltipTemplate = this.createContourTooltip;\n        contourSeries.thickness = 4;\n\n        this.geoMap.series.add(contourSeries);\n    }\n\n    public createContourTooltip(context: any) {\n        const dataContext = context.dataContext as IgrDataContext;\n        if (!dataContext) return null;\n\n        const dataItem = dataContext.item as any;\n        if (!dataItem) return null;\n\n        // dataContext.item is always a number for contour series\n        const tmp = dataItem.toFixed(1) + \"Â°C\";\n        return <div className=\"tooltipBox\">\n            <div className=\"tooltipRow\">\n                <div className=\"tooltipLbl\">Temperature:</div>\n                <div className=\"tooltipVal\"> {tmp}</div>\n            </div>\n        </div>\n    }\n\n}\n\n// rendering above class to the React DOM\nReactDOM.render(<MapTypeScatterContourSeries />, document.getElementById('root'));\n",
  "isMain": true,
  "fileExtension": "tsx",
  "fileHeader": "tsx"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/type-scatter-contour-series/src/index.css",
  "content": "",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/type-scatter-contour-series/src/LegendOverlay.css",
  "content": ".LegendOverlay {\r\n    border-radius: 3px;\r\n    background: rgba(221, 221, 221, 0.671);\r\n    position: absolute;\r\n    padding-left: 4px;\r\n    padding-right: 4px;\r\n    padding-top: 4px;\r\n    padding-bottom: 4px;\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    margin-right: 2px;\r\n    margin-bottom: 2px;\r\n    pointer-events: none;\r\n    font-family: Lato, Helvetica, sans-serif;\r\n    font-size: 10px;\r\n    color: #2c2c2c;\r\n}\r\n\r\n.LegendItem {\r\n    /* height: 12px; */\r\n    /* width: 10px; */\r\n    /* background: rgb(5, 91, 219); */\r\n    display: block;\r\n    margin-left: 2px;\r\n    margin-right: 2px;\r\n    margin-top: 0px;\r\n    /* border-radius: 3px; */\r\n    text-decoration: none;\r\n}\r\n\r\n.LegendItemMap {\r\n    height: 12px;\r\n    width: 12px;\r\n    background: rgb(35, 36, 36);\r\n    background: rgb(5, 91, 219);\r\n    display: inline-block;\r\n    /* margin-left: 2px; */\r\n    /* margin-top: 2px; */\r\n    margin-top: 1px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.LegendItemLabel {\r\n    /* background: rgb(97, 241, 186); */\r\n    /* width: 115px; */\r\n    display: inline-block;\r\n    /* vertical-align: text-top; */\r\n    margin-left: 5px;\r\n    margin-right: 5px;\r\n    font-size: 10px;\r\n}\r\n\r\n.SourceLabel {\r\n    display: block;\r\n    margin-left: 4px;\r\n    margin-right: 4px;\r\n    margin-top: 4px;\r\n    margin-bottom: 4px;\r\n    font-size: 10px;\r\n    font-family: Lato, Helvetica, sans-serif;\r\n    color: #2c2c2c;\r\n    background: #f0f1f100;\r\n}\r\n\r\n.SourceStyle {\r\n    display: block;\r\n    margin-left: 2px;\r\n    margin-right: 2px;\r\n    margin-top: 2px;\r\n    margin-bottom: 2px;\r\n    font-size: 10px;\r\n    font-family: Lato, Helvetica, sans-serif;\r\n    color: #2c2c2c;\r\n    background: #f0f1f100;\r\n    pointer-events: auto;\r\n}\r\n\r\n.SourceStyle a {\r\n    color: #1362f5 !important;\r\n    background: #f0f1f100 !important;\r\n    pointer-events: auto;\r\n}\r\n\r\n.SourceStyle a:hover {\r\n    /* color: #134ff5; */\r\n    color: #2c2c2c !important;\r\n    background: #f0f1f100 !important;\r\n    pointer-events: auto;\r\n}\r\n",
  "isMain": true,
  "fileExtension": "css",
  "fileHeader": "css"
 },
 {
  "hasRelativeAssetsUrls": false,
  "path": "../samples/maps/geo-map/type-scatter-contour-series/src/LegendOverlay.tsx",
  "content": "import React from \"react\";\r\nimport \"./LegendOverlay.css\";\r\n\r\nexport class LegendOverlay extends React.Component<any, any> {\r\n\r\n    public render(): JSX.Element {\r\n\r\n        let bg: string = this.props.background;\r\n        if (bg === undefined) { bg = \"rgba(221, 221, 221, 0.65)\"; }\r\n\r\n        let style = { background: bg, bottom: 3, left: 3 } as React.CSSProperties;\r\n\r\n        const dock: string = this.props.dock;\r\n        if (dock === \"TopRight\") {\r\n            style = { background: bg, top: 3, right: 3 } as React.CSSProperties;\r\n        }\r\n        else if (dock === \"TopLeft\") {\r\n            style = { background: bg, top: 3, left: 3 } as React.CSSProperties;\r\n        }\r\n        else if (dock === \"BottomRight\") {\r\n            style = { background: bg, bottom: 3, right: 3 } as React.CSSProperties;\r\n        }\r\n        else  { // if (dock === \"BottomLeft\")\r\n            style = { background: bg, bottom: 3, left: 3 } as React.CSSProperties;\r\n        }\r\n\r\n        // let title: JSX.Element;\r\n\r\n        const hasLink = this.props.href !== undefined || this.props.text !== undefined;\r\n        return hasLink ?\r\n            <div className=\"LegendOverlay\" style={style}>\r\n                <LegendLink text={this.props.text} href={this.props.href}  />\r\n                <div   >\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n            :\r\n            <div className=\"LegendOverlay\" style={style}>\r\n                <div   >\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n\r\n        // return (\r\n            // <div className=\"LegendOverlay\" style={style}>\r\n            //     {this.props.children}\r\n            // </div>\r\n        // );\r\n    }\r\n}\r\n\r\nexport class LegendItem extends React.Component<any, any> {\r\n\r\n    public render(): JSX.Element {\r\n        const bg = this.props.background;\r\n        const bgStyle = { background: bg } as React.CSSProperties;\r\n\r\n        return (\r\n            <div  className=\"LegendItem\">\r\n                <div   className=\"LegendItemMap\" style={bgStyle}/>\r\n                <label className=\"LegendItemLabel\">{this.props.text}</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class LegendLink extends React.Component<any, any> {\r\n\r\n    public render(): JSX.Element {\r\n        const hasLink = this.props.href !== undefined;\r\n\r\n        return hasLink ?\r\n        <div className=\"SourceStyle\">\r\n            <a target=\"_blank\" href={this.props.href} rel=\"noopener noreferrer\">\r\n            {this.props.text}</a>\r\n        </div> :\r\n        // <div >\r\n            <label className=\"SourceLabel\">{this.props.text}</label>\r\n        // </div>\r\n    }\r\n}\r\n",
  "isMain": false,
  "fileExtension": "ts",
  "fileHeader": "ts"
 }
]
}